/**
 * This file was auto-generated by Fern from our API Definition.
 */
package com.vapi.api.types;

import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.vapi.api.core.ObjectMappers;
import java.util.HashMap;
import java.util.Map;
import java.util.Objects;
import org.jetbrains.annotations.NotNull;

@JsonInclude(JsonInclude.Include.NON_ABSENT)
@JsonDeserialize(builder = ToolCall.Builder.class)
public final class ToolCall {
    private final String id;

    private final String type;

    private final ToolCallFunction function;

    private final Map<String, Object> additionalProperties;

    private ToolCall(String id, String type, ToolCallFunction function, Map<String, Object> additionalProperties) {
        this.id = id;
        this.type = type;
        this.function = function;
        this.additionalProperties = additionalProperties;
    }

    /**
     * @return This is the ID of the tool call
     */
    @JsonProperty("id")
    public String getId() {
        return id;
    }

    /**
     * @return This is the type of tool
     */
    @JsonProperty("type")
    public String getType() {
        return type;
    }

    /**
     * @return This is the function that was called
     */
    @JsonProperty("function")
    public ToolCallFunction getFunction() {
        return function;
    }

    @java.lang.Override
    public boolean equals(Object other) {
        if (this == other) return true;
        return other instanceof ToolCall && equalTo((ToolCall) other);
    }

    @JsonAnyGetter
    public Map<String, Object> getAdditionalProperties() {
        return this.additionalProperties;
    }

    private boolean equalTo(ToolCall other) {
        return id.equals(other.id) && type.equals(other.type) && function.equals(other.function);
    }

    @java.lang.Override
    public int hashCode() {
        return Objects.hash(this.id, this.type, this.function);
    }

    @java.lang.Override
    public String toString() {
        return ObjectMappers.stringify(this);
    }

    public static IdStage builder() {
        return new Builder();
    }

    public interface IdStage {
        /**
         * <p>This is the ID of the tool call</p>
         */
        TypeStage id(@NotNull String id);

        Builder from(ToolCall other);
    }

    public interface TypeStage {
        /**
         * <p>This is the type of tool</p>
         */
        FunctionStage type(@NotNull String type);
    }

    public interface FunctionStage {
        /**
         * <p>This is the function that was called</p>
         */
        _FinalStage function(@NotNull ToolCallFunction function);
    }

    public interface _FinalStage {
        ToolCall build();
    }

    @JsonIgnoreProperties(ignoreUnknown = true)
    public static final class Builder implements IdStage, TypeStage, FunctionStage, _FinalStage {
        private String id;

        private String type;

        private ToolCallFunction function;

        @JsonAnySetter
        private Map<String, Object> additionalProperties = new HashMap<>();

        private Builder() {}

        @java.lang.Override
        public Builder from(ToolCall other) {
            id(other.getId());
            type(other.getType());
            function(other.getFunction());
            return this;
        }

        /**
         * <p>This is the ID of the tool call</p>
         * <p>This is the ID of the tool call</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        @JsonSetter("id")
        public TypeStage id(@NotNull String id) {
            this.id = Objects.requireNonNull(id, "id must not be null");
            return this;
        }

        /**
         * <p>This is the type of tool</p>
         * <p>This is the type of tool</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        @JsonSetter("type")
        public FunctionStage type(@NotNull String type) {
            this.type = Objects.requireNonNull(type, "type must not be null");
            return this;
        }

        /**
         * <p>This is the function that was called</p>
         * <p>This is the function that was called</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        @JsonSetter("function")
        public _FinalStage function(@NotNull ToolCallFunction function) {
            this.function = Objects.requireNonNull(function, "function must not be null");
            return this;
        }

        @java.lang.Override
        public ToolCall build() {
            return new ToolCall(id, type, function, additionalProperties);
        }
    }
}
