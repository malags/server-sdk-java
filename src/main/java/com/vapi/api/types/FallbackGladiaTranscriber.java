/**
 * This file was auto-generated by Fern from our API Definition.
 */
package com.vapi.api.types;

import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.annotation.Nulls;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.vapi.api.core.ObjectMappers;
import java.util.HashMap;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;

@JsonInclude(JsonInclude.Include.NON_ABSENT)
@JsonDeserialize(builder = FallbackGladiaTranscriber.Builder.class)
public final class FallbackGladiaTranscriber {
    private final Optional<FallbackGladiaTranscriberModel> model;

    private final Optional<FallbackGladiaTranscriberLanguageBehaviour> languageBehaviour;

    private final Optional<FallbackGladiaTranscriberLanguage> language;

    private final Optional<FallbackGladiaTranscriberLanguages> languages;

    private final Optional<String> transcriptionHint;

    private final Optional<Boolean> prosody;

    private final Optional<Boolean> audioEnhancer;

    private final Optional<Double> confidenceThreshold;

    private final Map<String, Object> additionalProperties;

    private FallbackGladiaTranscriber(
            Optional<FallbackGladiaTranscriberModel> model,
            Optional<FallbackGladiaTranscriberLanguageBehaviour> languageBehaviour,
            Optional<FallbackGladiaTranscriberLanguage> language,
            Optional<FallbackGladiaTranscriberLanguages> languages,
            Optional<String> transcriptionHint,
            Optional<Boolean> prosody,
            Optional<Boolean> audioEnhancer,
            Optional<Double> confidenceThreshold,
            Map<String, Object> additionalProperties) {
        this.model = model;
        this.languageBehaviour = languageBehaviour;
        this.language = language;
        this.languages = languages;
        this.transcriptionHint = transcriptionHint;
        this.prosody = prosody;
        this.audioEnhancer = audioEnhancer;
        this.confidenceThreshold = confidenceThreshold;
        this.additionalProperties = additionalProperties;
    }

    @JsonProperty("model")
    public Optional<FallbackGladiaTranscriberModel> getModel() {
        return model;
    }

    @JsonProperty("languageBehaviour")
    public Optional<FallbackGladiaTranscriberLanguageBehaviour> getLanguageBehaviour() {
        return languageBehaviour;
    }

    /**
     * @return Defines the language to use for the transcription. Required when languageBehaviour is 'manual'.
     */
    @JsonProperty("language")
    public Optional<FallbackGladiaTranscriberLanguage> getLanguage() {
        return language;
    }

    /**
     * @return Defines the languages to use for the transcription. Required when languageBehaviour is 'manual'.
     */
    @JsonProperty("languages")
    public Optional<FallbackGladiaTranscriberLanguages> getLanguages() {
        return languages;
    }

    /**
     * @return Provides a custom vocabulary to the model to improve accuracy of transcribing context specific words, technical terms, names, etc. If empty, this argument is ignored.
     * ⚠️ Warning ⚠️: Please be aware that the transcription_hint field has a character limit of 600. If you provide a transcription_hint longer than 600 characters, it will be automatically truncated to meet this limit.
     */
    @JsonProperty("transcriptionHint")
    public Optional<String> getTranscriptionHint() {
        return transcriptionHint;
    }

    /**
     * @return If prosody is true, you will get a transcription that can contain prosodies i.e. (laugh) (giggles) (malefic laugh) (toss) (music)… Default value is false.
     */
    @JsonProperty("prosody")
    public Optional<Boolean> getProsody() {
        return prosody;
    }

    /**
     * @return If true, audio will be pre-processed to improve accuracy but latency will increase. Default value is false.
     */
    @JsonProperty("audioEnhancer")
    public Optional<Boolean> getAudioEnhancer() {
        return audioEnhancer;
    }

    /**
     * @return Transcripts below this confidence threshold will be discarded.
     * <p>@default 0.4</p>
     */
    @JsonProperty("confidenceThreshold")
    public Optional<Double> getConfidenceThreshold() {
        return confidenceThreshold;
    }

    @java.lang.Override
    public boolean equals(Object other) {
        if (this == other) return true;
        return other instanceof FallbackGladiaTranscriber && equalTo((FallbackGladiaTranscriber) other);
    }

    @JsonAnyGetter
    public Map<String, Object> getAdditionalProperties() {
        return this.additionalProperties;
    }

    private boolean equalTo(FallbackGladiaTranscriber other) {
        return model.equals(other.model)
                && languageBehaviour.equals(other.languageBehaviour)
                && language.equals(other.language)
                && languages.equals(other.languages)
                && transcriptionHint.equals(other.transcriptionHint)
                && prosody.equals(other.prosody)
                && audioEnhancer.equals(other.audioEnhancer)
                && confidenceThreshold.equals(other.confidenceThreshold);
    }

    @java.lang.Override
    public int hashCode() {
        return Objects.hash(
                this.model,
                this.languageBehaviour,
                this.language,
                this.languages,
                this.transcriptionHint,
                this.prosody,
                this.audioEnhancer,
                this.confidenceThreshold);
    }

    @java.lang.Override
    public String toString() {
        return ObjectMappers.stringify(this);
    }

    public static Builder builder() {
        return new Builder();
    }

    @JsonIgnoreProperties(ignoreUnknown = true)
    public static final class Builder {
        private Optional<FallbackGladiaTranscriberModel> model = Optional.empty();

        private Optional<FallbackGladiaTranscriberLanguageBehaviour> languageBehaviour = Optional.empty();

        private Optional<FallbackGladiaTranscriberLanguage> language = Optional.empty();

        private Optional<FallbackGladiaTranscriberLanguages> languages = Optional.empty();

        private Optional<String> transcriptionHint = Optional.empty();

        private Optional<Boolean> prosody = Optional.empty();

        private Optional<Boolean> audioEnhancer = Optional.empty();

        private Optional<Double> confidenceThreshold = Optional.empty();

        @JsonAnySetter
        private Map<String, Object> additionalProperties = new HashMap<>();

        private Builder() {}

        public Builder from(FallbackGladiaTranscriber other) {
            model(other.getModel());
            languageBehaviour(other.getLanguageBehaviour());
            language(other.getLanguage());
            languages(other.getLanguages());
            transcriptionHint(other.getTranscriptionHint());
            prosody(other.getProsody());
            audioEnhancer(other.getAudioEnhancer());
            confidenceThreshold(other.getConfidenceThreshold());
            return this;
        }

        @JsonSetter(value = "model", nulls = Nulls.SKIP)
        public Builder model(Optional<FallbackGladiaTranscriberModel> model) {
            this.model = model;
            return this;
        }

        public Builder model(FallbackGladiaTranscriberModel model) {
            this.model = Optional.ofNullable(model);
            return this;
        }

        @JsonSetter(value = "languageBehaviour", nulls = Nulls.SKIP)
        public Builder languageBehaviour(Optional<FallbackGladiaTranscriberLanguageBehaviour> languageBehaviour) {
            this.languageBehaviour = languageBehaviour;
            return this;
        }

        public Builder languageBehaviour(FallbackGladiaTranscriberLanguageBehaviour languageBehaviour) {
            this.languageBehaviour = Optional.ofNullable(languageBehaviour);
            return this;
        }

        /**
         * <p>Defines the language to use for the transcription. Required when languageBehaviour is 'manual'.</p>
         */
        @JsonSetter(value = "language", nulls = Nulls.SKIP)
        public Builder language(Optional<FallbackGladiaTranscriberLanguage> language) {
            this.language = language;
            return this;
        }

        public Builder language(FallbackGladiaTranscriberLanguage language) {
            this.language = Optional.ofNullable(language);
            return this;
        }

        /**
         * <p>Defines the languages to use for the transcription. Required when languageBehaviour is 'manual'.</p>
         */
        @JsonSetter(value = "languages", nulls = Nulls.SKIP)
        public Builder languages(Optional<FallbackGladiaTranscriberLanguages> languages) {
            this.languages = languages;
            return this;
        }

        public Builder languages(FallbackGladiaTranscriberLanguages languages) {
            this.languages = Optional.ofNullable(languages);
            return this;
        }

        /**
         * <p>Provides a custom vocabulary to the model to improve accuracy of transcribing context specific words, technical terms, names, etc. If empty, this argument is ignored.
         * ⚠️ Warning ⚠️: Please be aware that the transcription_hint field has a character limit of 600. If you provide a transcription_hint longer than 600 characters, it will be automatically truncated to meet this limit.</p>
         */
        @JsonSetter(value = "transcriptionHint", nulls = Nulls.SKIP)
        public Builder transcriptionHint(Optional<String> transcriptionHint) {
            this.transcriptionHint = transcriptionHint;
            return this;
        }

        public Builder transcriptionHint(String transcriptionHint) {
            this.transcriptionHint = Optional.ofNullable(transcriptionHint);
            return this;
        }

        /**
         * <p>If prosody is true, you will get a transcription that can contain prosodies i.e. (laugh) (giggles) (malefic laugh) (toss) (music)… Default value is false.</p>
         */
        @JsonSetter(value = "prosody", nulls = Nulls.SKIP)
        public Builder prosody(Optional<Boolean> prosody) {
            this.prosody = prosody;
            return this;
        }

        public Builder prosody(Boolean prosody) {
            this.prosody = Optional.ofNullable(prosody);
            return this;
        }

        /**
         * <p>If true, audio will be pre-processed to improve accuracy but latency will increase. Default value is false.</p>
         */
        @JsonSetter(value = "audioEnhancer", nulls = Nulls.SKIP)
        public Builder audioEnhancer(Optional<Boolean> audioEnhancer) {
            this.audioEnhancer = audioEnhancer;
            return this;
        }

        public Builder audioEnhancer(Boolean audioEnhancer) {
            this.audioEnhancer = Optional.ofNullable(audioEnhancer);
            return this;
        }

        /**
         * <p>Transcripts below this confidence threshold will be discarded.</p>
         * <p>@default 0.4</p>
         */
        @JsonSetter(value = "confidenceThreshold", nulls = Nulls.SKIP)
        public Builder confidenceThreshold(Optional<Double> confidenceThreshold) {
            this.confidenceThreshold = confidenceThreshold;
            return this;
        }

        public Builder confidenceThreshold(Double confidenceThreshold) {
            this.confidenceThreshold = Optional.ofNullable(confidenceThreshold);
            return this;
        }

        public FallbackGladiaTranscriber build() {
            return new FallbackGladiaTranscriber(
                    model,
                    languageBehaviour,
                    language,
                    languages,
                    transcriptionHint,
                    prosody,
                    audioEnhancer,
                    confidenceThreshold,
                    additionalProperties);
        }
    }
}
