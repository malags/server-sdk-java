/**
 * This file was auto-generated by Fern from our API Definition.
 */
package com.vapi.api.types;

import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.annotation.Nulls;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.vapi.api.core.ObjectMappers;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;

@JsonInclude(JsonInclude.Include.NON_ABSENT)
@JsonDeserialize(builder = NodeArtifact.Builder.class)
public final class NodeArtifact {
    private final Optional<List<NodeArtifactMessagesItem>> messages;

    private final Optional<String> nodeName;

    private final Optional<Map<String, Object>> variableValues;

    private final Map<String, Object> additionalProperties;

    private NodeArtifact(
            Optional<List<NodeArtifactMessagesItem>> messages,
            Optional<String> nodeName,
            Optional<Map<String, Object>> variableValues,
            Map<String, Object> additionalProperties) {
        this.messages = messages;
        this.nodeName = nodeName;
        this.variableValues = variableValues;
        this.additionalProperties = additionalProperties;
    }

    /**
     * @return These are the messages that were spoken during the node.
     */
    @JsonProperty("messages")
    public Optional<List<NodeArtifactMessagesItem>> getMessages() {
        return messages;
    }

    /**
     * @return This is the node name.
     */
    @JsonProperty("nodeName")
    public Optional<String> getNodeName() {
        return nodeName;
    }

    /**
     * @return These are the variable values that were extracted from the node.
     */
    @JsonProperty("variableValues")
    public Optional<Map<String, Object>> getVariableValues() {
        return variableValues;
    }

    @java.lang.Override
    public boolean equals(Object other) {
        if (this == other) return true;
        return other instanceof NodeArtifact && equalTo((NodeArtifact) other);
    }

    @JsonAnyGetter
    public Map<String, Object> getAdditionalProperties() {
        return this.additionalProperties;
    }

    private boolean equalTo(NodeArtifact other) {
        return messages.equals(other.messages)
                && nodeName.equals(other.nodeName)
                && variableValues.equals(other.variableValues);
    }

    @java.lang.Override
    public int hashCode() {
        return Objects.hash(this.messages, this.nodeName, this.variableValues);
    }

    @java.lang.Override
    public String toString() {
        return ObjectMappers.stringify(this);
    }

    public static Builder builder() {
        return new Builder();
    }

    @JsonIgnoreProperties(ignoreUnknown = true)
    public static final class Builder {
        private Optional<List<NodeArtifactMessagesItem>> messages = Optional.empty();

        private Optional<String> nodeName = Optional.empty();

        private Optional<Map<String, Object>> variableValues = Optional.empty();

        @JsonAnySetter
        private Map<String, Object> additionalProperties = new HashMap<>();

        private Builder() {}

        public Builder from(NodeArtifact other) {
            messages(other.getMessages());
            nodeName(other.getNodeName());
            variableValues(other.getVariableValues());
            return this;
        }

        /**
         * <p>These are the messages that were spoken during the node.</p>
         */
        @JsonSetter(value = "messages", nulls = Nulls.SKIP)
        public Builder messages(Optional<List<NodeArtifactMessagesItem>> messages) {
            this.messages = messages;
            return this;
        }

        public Builder messages(List<NodeArtifactMessagesItem> messages) {
            this.messages = Optional.ofNullable(messages);
            return this;
        }

        /**
         * <p>This is the node name.</p>
         */
        @JsonSetter(value = "nodeName", nulls = Nulls.SKIP)
        public Builder nodeName(Optional<String> nodeName) {
            this.nodeName = nodeName;
            return this;
        }

        public Builder nodeName(String nodeName) {
            this.nodeName = Optional.ofNullable(nodeName);
            return this;
        }

        /**
         * <p>These are the variable values that were extracted from the node.</p>
         */
        @JsonSetter(value = "variableValues", nulls = Nulls.SKIP)
        public Builder variableValues(Optional<Map<String, Object>> variableValues) {
            this.variableValues = variableValues;
            return this;
        }

        public Builder variableValues(Map<String, Object> variableValues) {
            this.variableValues = Optional.ofNullable(variableValues);
            return this;
        }

        public NodeArtifact build() {
            return new NodeArtifact(messages, nodeName, variableValues, additionalProperties);
        }
    }
}
