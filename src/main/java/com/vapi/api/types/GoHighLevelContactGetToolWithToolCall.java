/**
 * This file was auto-generated by Fern from our API Definition.
 */
package com.vapi.api.types;

import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.annotation.Nulls;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.vapi.api.core.ObjectMappers;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import org.jetbrains.annotations.NotNull;

@JsonInclude(JsonInclude.Include.NON_ABSENT)
@JsonDeserialize(builder = GoHighLevelContactGetToolWithToolCall.Builder.class)
public final class GoHighLevelContactGetToolWithToolCall {
    private final Optional<List<GoHighLevelContactGetToolWithToolCallMessagesItem>> messages;

    private final ToolCall toolCall;

    private final Optional<OpenAiFunction> function;

    private final Map<String, Object> additionalProperties;

    private GoHighLevelContactGetToolWithToolCall(
            Optional<List<GoHighLevelContactGetToolWithToolCallMessagesItem>> messages,
            ToolCall toolCall,
            Optional<OpenAiFunction> function,
            Map<String, Object> additionalProperties) {
        this.messages = messages;
        this.toolCall = toolCall;
        this.function = function;
        this.additionalProperties = additionalProperties;
    }

    /**
     * @return These are the messages that will be spoken to the user as the tool is running.
     * <p>For some tools, this is auto-filled based on special fields like <code>tool.destinations</code>. For others like the function tool, these can be custom configured.</p>
     */
    @JsonProperty("messages")
    public Optional<List<GoHighLevelContactGetToolWithToolCallMessagesItem>> getMessages() {
        return messages;
    }

    /**
     * @return The type of tool. &quot;gohighlevel.contact.get&quot; for GoHighLevel contact get tool.
     */
    @JsonProperty("type")
    public String getType() {
        return "gohighlevel.contact.get";
    }

    @JsonProperty("toolCall")
    public ToolCall getToolCall() {
        return toolCall;
    }

    /**
     * @return This is the function definition of the tool.
     * <p>For <code>endCall</code>, <code>transferCall</code>, and <code>dtmf</code> tools, this is auto-filled based on tool-specific fields like <code>tool.destinations</code>. But, even in those cases, you can provide a custom function definition for advanced use cases.</p>
     * <p>An example of an advanced use case is if you want to customize the message that's spoken for <code>endCall</code> tool. You can specify a function where it returns an argument &quot;reason&quot;. Then, in <code>messages</code> array, you can have many &quot;request-complete&quot; messages. One of these messages will be triggered if the <code>messages[].conditions</code> matches the &quot;reason&quot; argument.</p>
     */
    @JsonProperty("function")
    public Optional<OpenAiFunction> getFunction() {
        return function;
    }

    @java.lang.Override
    public boolean equals(Object other) {
        if (this == other) return true;
        return other instanceof GoHighLevelContactGetToolWithToolCall
                && equalTo((GoHighLevelContactGetToolWithToolCall) other);
    }

    @JsonAnyGetter
    public Map<String, Object> getAdditionalProperties() {
        return this.additionalProperties;
    }

    private boolean equalTo(GoHighLevelContactGetToolWithToolCall other) {
        return messages.equals(other.messages) && toolCall.equals(other.toolCall) && function.equals(other.function);
    }

    @java.lang.Override
    public int hashCode() {
        return Objects.hash(this.messages, this.toolCall, this.function);
    }

    @java.lang.Override
    public String toString() {
        return ObjectMappers.stringify(this);
    }

    public static ToolCallStage builder() {
        return new Builder();
    }

    public interface ToolCallStage {
        _FinalStage toolCall(@NotNull ToolCall toolCall);

        Builder from(GoHighLevelContactGetToolWithToolCall other);
    }

    public interface _FinalStage {
        GoHighLevelContactGetToolWithToolCall build();

        /**
         * <p>These are the messages that will be spoken to the user as the tool is running.</p>
         * <p>For some tools, this is auto-filled based on special fields like <code>tool.destinations</code>. For others like the function tool, these can be custom configured.</p>
         */
        _FinalStage messages(Optional<List<GoHighLevelContactGetToolWithToolCallMessagesItem>> messages);

        _FinalStage messages(List<GoHighLevelContactGetToolWithToolCallMessagesItem> messages);

        /**
         * <p>This is the function definition of the tool.</p>
         * <p>For <code>endCall</code>, <code>transferCall</code>, and <code>dtmf</code> tools, this is auto-filled based on tool-specific fields like <code>tool.destinations</code>. But, even in those cases, you can provide a custom function definition for advanced use cases.</p>
         * <p>An example of an advanced use case is if you want to customize the message that's spoken for <code>endCall</code> tool. You can specify a function where it returns an argument &quot;reason&quot;. Then, in <code>messages</code> array, you can have many &quot;request-complete&quot; messages. One of these messages will be triggered if the <code>messages[].conditions</code> matches the &quot;reason&quot; argument.</p>
         */
        _FinalStage function(Optional<OpenAiFunction> function);

        _FinalStage function(OpenAiFunction function);
    }

    @JsonIgnoreProperties(ignoreUnknown = true)
    public static final class Builder implements ToolCallStage, _FinalStage {
        private ToolCall toolCall;

        private Optional<OpenAiFunction> function = Optional.empty();

        private Optional<List<GoHighLevelContactGetToolWithToolCallMessagesItem>> messages = Optional.empty();

        @JsonAnySetter
        private Map<String, Object> additionalProperties = new HashMap<>();

        private Builder() {}

        @java.lang.Override
        public Builder from(GoHighLevelContactGetToolWithToolCall other) {
            messages(other.getMessages());
            toolCall(other.getToolCall());
            function(other.getFunction());
            return this;
        }

        @java.lang.Override
        @JsonSetter("toolCall")
        public _FinalStage toolCall(@NotNull ToolCall toolCall) {
            this.toolCall = Objects.requireNonNull(toolCall, "toolCall must not be null");
            return this;
        }

        /**
         * <p>This is the function definition of the tool.</p>
         * <p>For <code>endCall</code>, <code>transferCall</code>, and <code>dtmf</code> tools, this is auto-filled based on tool-specific fields like <code>tool.destinations</code>. But, even in those cases, you can provide a custom function definition for advanced use cases.</p>
         * <p>An example of an advanced use case is if you want to customize the message that's spoken for <code>endCall</code> tool. You can specify a function where it returns an argument &quot;reason&quot;. Then, in <code>messages</code> array, you can have many &quot;request-complete&quot; messages. One of these messages will be triggered if the <code>messages[].conditions</code> matches the &quot;reason&quot; argument.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        public _FinalStage function(OpenAiFunction function) {
            this.function = Optional.ofNullable(function);
            return this;
        }

        /**
         * <p>This is the function definition of the tool.</p>
         * <p>For <code>endCall</code>, <code>transferCall</code>, and <code>dtmf</code> tools, this is auto-filled based on tool-specific fields like <code>tool.destinations</code>. But, even in those cases, you can provide a custom function definition for advanced use cases.</p>
         * <p>An example of an advanced use case is if you want to customize the message that's spoken for <code>endCall</code> tool. You can specify a function where it returns an argument &quot;reason&quot;. Then, in <code>messages</code> array, you can have many &quot;request-complete&quot; messages. One of these messages will be triggered if the <code>messages[].conditions</code> matches the &quot;reason&quot; argument.</p>
         */
        @java.lang.Override
        @JsonSetter(value = "function", nulls = Nulls.SKIP)
        public _FinalStage function(Optional<OpenAiFunction> function) {
            this.function = function;
            return this;
        }

        /**
         * <p>These are the messages that will be spoken to the user as the tool is running.</p>
         * <p>For some tools, this is auto-filled based on special fields like <code>tool.destinations</code>. For others like the function tool, these can be custom configured.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        public _FinalStage messages(List<GoHighLevelContactGetToolWithToolCallMessagesItem> messages) {
            this.messages = Optional.ofNullable(messages);
            return this;
        }

        /**
         * <p>These are the messages that will be spoken to the user as the tool is running.</p>
         * <p>For some tools, this is auto-filled based on special fields like <code>tool.destinations</code>. For others like the function tool, these can be custom configured.</p>
         */
        @java.lang.Override
        @JsonSetter(value = "messages", nulls = Nulls.SKIP)
        public _FinalStage messages(Optional<List<GoHighLevelContactGetToolWithToolCallMessagesItem>> messages) {
            this.messages = messages;
            return this;
        }

        @java.lang.Override
        public GoHighLevelContactGetToolWithToolCall build() {
            return new GoHighLevelContactGetToolWithToolCall(messages, toolCall, function, additionalProperties);
        }
    }
}
