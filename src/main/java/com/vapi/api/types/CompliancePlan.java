/**
 * This file was auto-generated by Fern from our API Definition.
 */
package com.vapi.api.types;

import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.annotation.Nulls;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.vapi.api.core.ObjectMappers;
import java.util.HashMap;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;

@JsonInclude(JsonInclude.Include.NON_ABSENT)
@JsonDeserialize(builder = CompliancePlan.Builder.class)
public final class CompliancePlan {
    private final Optional<Boolean> hipaaEnabled;

    private final Optional<Boolean> pciEnabled;

    private final Map<String, Object> additionalProperties;

    private CompliancePlan(
            Optional<Boolean> hipaaEnabled, Optional<Boolean> pciEnabled, Map<String, Object> additionalProperties) {
        this.hipaaEnabled = hipaaEnabled;
        this.pciEnabled = pciEnabled;
        this.additionalProperties = additionalProperties;
    }

    /**
     * @return When this is enabled, no logs, recordings, or transcriptions will be stored.
     * At the end of the call, you will still receive an end-of-call-report message to store on your server. Defaults to false.
     */
    @JsonProperty("hipaaEnabled")
    public Optional<Boolean> getHipaaEnabled() {
        return hipaaEnabled;
    }

    /**
     * @return When this is enabled, the user will be restricted to use PCI-compliant providers, and no logs or transcripts are stored.
     * At the end of the call, you will receive an end-of-call-report message to store on your server. Defaults to false.
     */
    @JsonProperty("pciEnabled")
    public Optional<Boolean> getPciEnabled() {
        return pciEnabled;
    }

    @java.lang.Override
    public boolean equals(Object other) {
        if (this == other) return true;
        return other instanceof CompliancePlan && equalTo((CompliancePlan) other);
    }

    @JsonAnyGetter
    public Map<String, Object> getAdditionalProperties() {
        return this.additionalProperties;
    }

    private boolean equalTo(CompliancePlan other) {
        return hipaaEnabled.equals(other.hipaaEnabled) && pciEnabled.equals(other.pciEnabled);
    }

    @java.lang.Override
    public int hashCode() {
        return Objects.hash(this.hipaaEnabled, this.pciEnabled);
    }

    @java.lang.Override
    public String toString() {
        return ObjectMappers.stringify(this);
    }

    public static Builder builder() {
        return new Builder();
    }

    @JsonIgnoreProperties(ignoreUnknown = true)
    public static final class Builder {
        private Optional<Boolean> hipaaEnabled = Optional.empty();

        private Optional<Boolean> pciEnabled = Optional.empty();

        @JsonAnySetter
        private Map<String, Object> additionalProperties = new HashMap<>();

        private Builder() {}

        public Builder from(CompliancePlan other) {
            hipaaEnabled(other.getHipaaEnabled());
            pciEnabled(other.getPciEnabled());
            return this;
        }

        /**
         * <p>When this is enabled, no logs, recordings, or transcriptions will be stored.
         * At the end of the call, you will still receive an end-of-call-report message to store on your server. Defaults to false.</p>
         */
        @JsonSetter(value = "hipaaEnabled", nulls = Nulls.SKIP)
        public Builder hipaaEnabled(Optional<Boolean> hipaaEnabled) {
            this.hipaaEnabled = hipaaEnabled;
            return this;
        }

        public Builder hipaaEnabled(Boolean hipaaEnabled) {
            this.hipaaEnabled = Optional.ofNullable(hipaaEnabled);
            return this;
        }

        /**
         * <p>When this is enabled, the user will be restricted to use PCI-compliant providers, and no logs or transcripts are stored.
         * At the end of the call, you will receive an end-of-call-report message to store on your server. Defaults to false.</p>
         */
        @JsonSetter(value = "pciEnabled", nulls = Nulls.SKIP)
        public Builder pciEnabled(Optional<Boolean> pciEnabled) {
            this.pciEnabled = pciEnabled;
            return this;
        }

        public Builder pciEnabled(Boolean pciEnabled) {
            this.pciEnabled = Optional.ofNullable(pciEnabled);
            return this;
        }

        public CompliancePlan build() {
            return new CompliancePlan(hipaaEnabled, pciEnabled, additionalProperties);
        }
    }
}
