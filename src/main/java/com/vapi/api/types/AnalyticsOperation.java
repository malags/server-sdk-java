/**
 * This file was auto-generated by Fern from our API Definition.
 */
package com.vapi.api.types;

import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.annotation.Nulls;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.vapi.api.core.ObjectMappers;
import java.util.HashMap;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import org.jetbrains.annotations.NotNull;

@JsonInclude(JsonInclude.Include.NON_ABSENT)
@JsonDeserialize(builder = AnalyticsOperation.Builder.class)
public final class AnalyticsOperation {
    private final AnalyticsOperationOperation operation;

    private final AnalyticsOperationColumn column;

    private final Optional<String> alias;

    private final Map<String, Object> additionalProperties;

    private AnalyticsOperation(
            AnalyticsOperationOperation operation,
            AnalyticsOperationColumn column,
            Optional<String> alias,
            Map<String, Object> additionalProperties) {
        this.operation = operation;
        this.column = column;
        this.alias = alias;
        this.additionalProperties = additionalProperties;
    }

    /**
     * @return This is the aggregation operation you want to perform.
     */
    @JsonProperty("operation")
    public AnalyticsOperationOperation getOperation() {
        return operation;
    }

    /**
     * @return This is the columns you want to perform the aggregation operation on.
     */
    @JsonProperty("column")
    public AnalyticsOperationColumn getColumn() {
        return column;
    }

    /**
     * @return This is the alias for column name returned. Defaults to <code>${operation}${column}</code>.
     */
    @JsonProperty("alias")
    public Optional<String> getAlias() {
        return alias;
    }

    @java.lang.Override
    public boolean equals(Object other) {
        if (this == other) return true;
        return other instanceof AnalyticsOperation && equalTo((AnalyticsOperation) other);
    }

    @JsonAnyGetter
    public Map<String, Object> getAdditionalProperties() {
        return this.additionalProperties;
    }

    private boolean equalTo(AnalyticsOperation other) {
        return operation.equals(other.operation) && column.equals(other.column) && alias.equals(other.alias);
    }

    @java.lang.Override
    public int hashCode() {
        return Objects.hash(this.operation, this.column, this.alias);
    }

    @java.lang.Override
    public String toString() {
        return ObjectMappers.stringify(this);
    }

    public static OperationStage builder() {
        return new Builder();
    }

    public interface OperationStage {
        /**
         * <p>This is the aggregation operation you want to perform.</p>
         */
        ColumnStage operation(@NotNull AnalyticsOperationOperation operation);

        Builder from(AnalyticsOperation other);
    }

    public interface ColumnStage {
        /**
         * <p>This is the columns you want to perform the aggregation operation on.</p>
         */
        _FinalStage column(@NotNull AnalyticsOperationColumn column);
    }

    public interface _FinalStage {
        AnalyticsOperation build();

        /**
         * <p>This is the alias for column name returned. Defaults to <code>${operation}${column}</code>.</p>
         */
        _FinalStage alias(Optional<String> alias);

        _FinalStage alias(String alias);
    }

    @JsonIgnoreProperties(ignoreUnknown = true)
    public static final class Builder implements OperationStage, ColumnStage, _FinalStage {
        private AnalyticsOperationOperation operation;

        private AnalyticsOperationColumn column;

        private Optional<String> alias = Optional.empty();

        @JsonAnySetter
        private Map<String, Object> additionalProperties = new HashMap<>();

        private Builder() {}

        @java.lang.Override
        public Builder from(AnalyticsOperation other) {
            operation(other.getOperation());
            column(other.getColumn());
            alias(other.getAlias());
            return this;
        }

        /**
         * <p>This is the aggregation operation you want to perform.</p>
         * <p>This is the aggregation operation you want to perform.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        @JsonSetter("operation")
        public ColumnStage operation(@NotNull AnalyticsOperationOperation operation) {
            this.operation = Objects.requireNonNull(operation, "operation must not be null");
            return this;
        }

        /**
         * <p>This is the columns you want to perform the aggregation operation on.</p>
         * <p>This is the columns you want to perform the aggregation operation on.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        @JsonSetter("column")
        public _FinalStage column(@NotNull AnalyticsOperationColumn column) {
            this.column = Objects.requireNonNull(column, "column must not be null");
            return this;
        }

        /**
         * <p>This is the alias for column name returned. Defaults to <code>${operation}${column}</code>.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        public _FinalStage alias(String alias) {
            this.alias = Optional.ofNullable(alias);
            return this;
        }

        /**
         * <p>This is the alias for column name returned. Defaults to <code>${operation}${column}</code>.</p>
         */
        @java.lang.Override
        @JsonSetter(value = "alias", nulls = Nulls.SKIP)
        public _FinalStage alias(Optional<String> alias) {
            this.alias = alias;
            return this;
        }

        @java.lang.Override
        public AnalyticsOperation build() {
            return new AnalyticsOperation(operation, column, alias, additionalProperties);
        }
    }
}
