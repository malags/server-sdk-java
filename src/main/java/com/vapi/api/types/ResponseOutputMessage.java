/**
 * This file was auto-generated by Fern from our API Definition.
 */
package com.vapi.api.types;

import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.annotation.Nulls;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.vapi.api.core.ObjectMappers;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import org.jetbrains.annotations.NotNull;

@JsonInclude(JsonInclude.Include.NON_ABSENT)
@JsonDeserialize(builder = ResponseOutputMessage.Builder.class)
public final class ResponseOutputMessage {
    private final String id;

    private final List<ResponseOutputText> content;

    private final ResponseOutputMessageStatus status;

    private final Map<String, Object> additionalProperties;

    private ResponseOutputMessage(
            String id,
            List<ResponseOutputText> content,
            ResponseOutputMessageStatus status,
            Map<String, Object> additionalProperties) {
        this.id = id;
        this.content = content;
        this.status = status;
        this.additionalProperties = additionalProperties;
    }

    /**
     * @return The unique ID of the output message
     */
    @JsonProperty("id")
    public String getId() {
        return id;
    }

    /**
     * @return Content of the output message
     */
    @JsonProperty("content")
    public List<ResponseOutputText> getContent() {
        return content;
    }

    /**
     * @return The role of the output message
     */
    @JsonProperty("role")
    public String getRole() {
        return "assistant";
    }

    /**
     * @return The status of the message
     */
    @JsonProperty("status")
    public ResponseOutputMessageStatus getStatus() {
        return status;
    }

    /**
     * @return The type of the output message
     */
    @JsonProperty("type")
    public String getType() {
        return "message";
    }

    @java.lang.Override
    public boolean equals(Object other) {
        if (this == other) return true;
        return other instanceof ResponseOutputMessage && equalTo((ResponseOutputMessage) other);
    }

    @JsonAnyGetter
    public Map<String, Object> getAdditionalProperties() {
        return this.additionalProperties;
    }

    private boolean equalTo(ResponseOutputMessage other) {
        return id.equals(other.id) && content.equals(other.content) && status.equals(other.status);
    }

    @java.lang.Override
    public int hashCode() {
        return Objects.hash(this.id, this.content, this.status);
    }

    @java.lang.Override
    public String toString() {
        return ObjectMappers.stringify(this);
    }

    public static IdStage builder() {
        return new Builder();
    }

    public interface IdStage {
        /**
         * <p>The unique ID of the output message</p>
         */
        StatusStage id(@NotNull String id);

        Builder from(ResponseOutputMessage other);
    }

    public interface StatusStage {
        /**
         * <p>The status of the message</p>
         */
        _FinalStage status(@NotNull ResponseOutputMessageStatus status);
    }

    public interface _FinalStage {
        ResponseOutputMessage build();

        /**
         * <p>Content of the output message</p>
         */
        _FinalStage content(List<ResponseOutputText> content);

        _FinalStage addContent(ResponseOutputText content);

        _FinalStage addAllContent(List<ResponseOutputText> content);
    }

    @JsonIgnoreProperties(ignoreUnknown = true)
    public static final class Builder implements IdStage, StatusStage, _FinalStage {
        private String id;

        private ResponseOutputMessageStatus status;

        private List<ResponseOutputText> content = new ArrayList<>();

        @JsonAnySetter
        private Map<String, Object> additionalProperties = new HashMap<>();

        private Builder() {}

        @java.lang.Override
        public Builder from(ResponseOutputMessage other) {
            id(other.getId());
            content(other.getContent());
            status(other.getStatus());
            return this;
        }

        /**
         * <p>The unique ID of the output message</p>
         * <p>The unique ID of the output message</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        @JsonSetter("id")
        public StatusStage id(@NotNull String id) {
            this.id = Objects.requireNonNull(id, "id must not be null");
            return this;
        }

        /**
         * <p>The status of the message</p>
         * <p>The status of the message</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        @JsonSetter("status")
        public _FinalStage status(@NotNull ResponseOutputMessageStatus status) {
            this.status = Objects.requireNonNull(status, "status must not be null");
            return this;
        }

        /**
         * <p>Content of the output message</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        public _FinalStage addAllContent(List<ResponseOutputText> content) {
            this.content.addAll(content);
            return this;
        }

        /**
         * <p>Content of the output message</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        public _FinalStage addContent(ResponseOutputText content) {
            this.content.add(content);
            return this;
        }

        /**
         * <p>Content of the output message</p>
         */
        @java.lang.Override
        @JsonSetter(value = "content", nulls = Nulls.SKIP)
        public _FinalStage content(List<ResponseOutputText> content) {
            this.content.clear();
            this.content.addAll(content);
            return this;
        }

        @java.lang.Override
        public ResponseOutputMessage build() {
            return new ResponseOutputMessage(id, content, status, additionalProperties);
        }
    }
}
