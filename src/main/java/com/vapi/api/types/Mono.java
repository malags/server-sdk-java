/**
 * This file was auto-generated by Fern from our API Definition.
 */
package com.vapi.api.types;

import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.annotation.Nulls;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.vapi.api.core.ObjectMappers;
import java.util.HashMap;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;

@JsonInclude(JsonInclude.Include.NON_ABSENT)
@JsonDeserialize(builder = Mono.Builder.class)
public final class Mono {
    private final Optional<String> combinedUrl;

    private final Optional<String> assistantUrl;

    private final Optional<String> customerUrl;

    private final Map<String, Object> additionalProperties;

    private Mono(
            Optional<String> combinedUrl,
            Optional<String> assistantUrl,
            Optional<String> customerUrl,
            Map<String, Object> additionalProperties) {
        this.combinedUrl = combinedUrl;
        this.assistantUrl = assistantUrl;
        this.customerUrl = customerUrl;
        this.additionalProperties = additionalProperties;
    }

    /**
     * @return This is the combined recording url for the call. To enable, set <code>assistant.artifactPlan.recordingEnabled</code>.
     */
    @JsonProperty("combinedUrl")
    public Optional<String> getCombinedUrl() {
        return combinedUrl;
    }

    /**
     * @return This is the mono recording url for the assistant. To enable, set <code>assistant.artifactPlan.recordingEnabled</code>.
     */
    @JsonProperty("assistantUrl")
    public Optional<String> getAssistantUrl() {
        return assistantUrl;
    }

    /**
     * @return This is the mono recording url for the customer. To enable, set <code>assistant.artifactPlan.recordingEnabled</code>.
     */
    @JsonProperty("customerUrl")
    public Optional<String> getCustomerUrl() {
        return customerUrl;
    }

    @java.lang.Override
    public boolean equals(Object other) {
        if (this == other) return true;
        return other instanceof Mono && equalTo((Mono) other);
    }

    @JsonAnyGetter
    public Map<String, Object> getAdditionalProperties() {
        return this.additionalProperties;
    }

    private boolean equalTo(Mono other) {
        return combinedUrl.equals(other.combinedUrl)
                && assistantUrl.equals(other.assistantUrl)
                && customerUrl.equals(other.customerUrl);
    }

    @java.lang.Override
    public int hashCode() {
        return Objects.hash(this.combinedUrl, this.assistantUrl, this.customerUrl);
    }

    @java.lang.Override
    public String toString() {
        return ObjectMappers.stringify(this);
    }

    public static Builder builder() {
        return new Builder();
    }

    @JsonIgnoreProperties(ignoreUnknown = true)
    public static final class Builder {
        private Optional<String> combinedUrl = Optional.empty();

        private Optional<String> assistantUrl = Optional.empty();

        private Optional<String> customerUrl = Optional.empty();

        @JsonAnySetter
        private Map<String, Object> additionalProperties = new HashMap<>();

        private Builder() {}

        public Builder from(Mono other) {
            combinedUrl(other.getCombinedUrl());
            assistantUrl(other.getAssistantUrl());
            customerUrl(other.getCustomerUrl());
            return this;
        }

        /**
         * <p>This is the combined recording url for the call. To enable, set <code>assistant.artifactPlan.recordingEnabled</code>.</p>
         */
        @JsonSetter(value = "combinedUrl", nulls = Nulls.SKIP)
        public Builder combinedUrl(Optional<String> combinedUrl) {
            this.combinedUrl = combinedUrl;
            return this;
        }

        public Builder combinedUrl(String combinedUrl) {
            this.combinedUrl = Optional.ofNullable(combinedUrl);
            return this;
        }

        /**
         * <p>This is the mono recording url for the assistant. To enable, set <code>assistant.artifactPlan.recordingEnabled</code>.</p>
         */
        @JsonSetter(value = "assistantUrl", nulls = Nulls.SKIP)
        public Builder assistantUrl(Optional<String> assistantUrl) {
            this.assistantUrl = assistantUrl;
            return this;
        }

        public Builder assistantUrl(String assistantUrl) {
            this.assistantUrl = Optional.ofNullable(assistantUrl);
            return this;
        }

        /**
         * <p>This is the mono recording url for the customer. To enable, set <code>assistant.artifactPlan.recordingEnabled</code>.</p>
         */
        @JsonSetter(value = "customerUrl", nulls = Nulls.SKIP)
        public Builder customerUrl(Optional<String> customerUrl) {
            this.customerUrl = customerUrl;
            return this;
        }

        public Builder customerUrl(String customerUrl) {
            this.customerUrl = Optional.ofNullable(customerUrl);
            return this;
        }

        public Mono build() {
            return new Mono(combinedUrl, assistantUrl, customerUrl, additionalProperties);
        }
    }
}
