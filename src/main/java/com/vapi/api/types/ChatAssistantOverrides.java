/**
 * This file was auto-generated by Fern from our API Definition.
 */
package com.vapi.api.types;

import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.annotation.Nulls;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.vapi.api.core.ObjectMappers;
import java.util.HashMap;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;

@JsonInclude(JsonInclude.Include.NON_ABSENT)
@JsonDeserialize(builder = ChatAssistantOverrides.Builder.class)
public final class ChatAssistantOverrides {
    private final Optional<Map<String, Object>> variableValues;

    private final Map<String, Object> additionalProperties;

    private ChatAssistantOverrides(
            Optional<Map<String, Object>> variableValues, Map<String, Object> additionalProperties) {
        this.variableValues = variableValues;
        this.additionalProperties = additionalProperties;
    }

    /**
     * @return Variable values for template substitution
     */
    @JsonProperty("variableValues")
    public Optional<Map<String, Object>> getVariableValues() {
        return variableValues;
    }

    @java.lang.Override
    public boolean equals(Object other) {
        if (this == other) return true;
        return other instanceof ChatAssistantOverrides && equalTo((ChatAssistantOverrides) other);
    }

    @JsonAnyGetter
    public Map<String, Object> getAdditionalProperties() {
        return this.additionalProperties;
    }

    private boolean equalTo(ChatAssistantOverrides other) {
        return variableValues.equals(other.variableValues);
    }

    @java.lang.Override
    public int hashCode() {
        return Objects.hash(this.variableValues);
    }

    @java.lang.Override
    public String toString() {
        return ObjectMappers.stringify(this);
    }

    public static Builder builder() {
        return new Builder();
    }

    @JsonIgnoreProperties(ignoreUnknown = true)
    public static final class Builder {
        private Optional<Map<String, Object>> variableValues = Optional.empty();

        @JsonAnySetter
        private Map<String, Object> additionalProperties = new HashMap<>();

        private Builder() {}

        public Builder from(ChatAssistantOverrides other) {
            variableValues(other.getVariableValues());
            return this;
        }

        /**
         * <p>Variable values for template substitution</p>
         */
        @JsonSetter(value = "variableValues", nulls = Nulls.SKIP)
        public Builder variableValues(Optional<Map<String, Object>> variableValues) {
            this.variableValues = variableValues;
            return this;
        }

        public Builder variableValues(Map<String, Object> variableValues) {
            this.variableValues = Optional.ofNullable(variableValues);
            return this;
        }

        public ChatAssistantOverrides build() {
            return new ChatAssistantOverrides(variableValues, additionalProperties);
        }
    }
}
