/**
 * This file was auto-generated by Fern from our API Definition.
 */
package com.vapi.api.types;

import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.vapi.api.core.ObjectMappers;
import java.util.HashMap;
import java.util.Map;
import java.util.Objects;
import org.jetbrains.annotations.NotNull;

@JsonInclude(JsonInclude.Include.NON_ABSENT)
@JsonDeserialize(builder = ServerMessageResponseVoiceRequest.Builder.class)
public final class ServerMessageResponseVoiceRequest {
    private final String data;

    private final Map<String, Object> additionalProperties;

    private ServerMessageResponseVoiceRequest(String data, Map<String, Object> additionalProperties) {
        this.data = data;
        this.additionalProperties = additionalProperties;
    }

    /**
     * @return DO NOT respond to a <code>voice-request</code> webhook with this schema of { data }. This schema just exists to document what the response should look like. Follow these instructions:
     * <p>Here is what the request will look like:</p>
     * <p>POST https://{assistant.voice.server.url}
     * Content-Type: application/json</p>
     * <p>{
     * &quot;messsage&quot;: {
     * &quot;type&quot;: &quot;voice-request&quot;,
     * &quot;text&quot;: &quot;Hello, world!&quot;,
     * &quot;sampleRate&quot;: 24000,
     * ...other metadata about the call...
     * }
     * }</p>
     * <p>The expected response is 1-channel 16-bit raw PCM audio at the sample rate specified in the request. Here is how the response will be piped to the transport:</p>
     * <pre><code>response.on('data', (chunk: Buffer) =&gt; {
     *   outputStream.write(chunk);
     * });
     * </code></pre>
     */
    @JsonProperty("data")
    public String getData() {
        return data;
    }

    @java.lang.Override
    public boolean equals(Object other) {
        if (this == other) return true;
        return other instanceof ServerMessageResponseVoiceRequest && equalTo((ServerMessageResponseVoiceRequest) other);
    }

    @JsonAnyGetter
    public Map<String, Object> getAdditionalProperties() {
        return this.additionalProperties;
    }

    private boolean equalTo(ServerMessageResponseVoiceRequest other) {
        return data.equals(other.data);
    }

    @java.lang.Override
    public int hashCode() {
        return Objects.hash(this.data);
    }

    @java.lang.Override
    public String toString() {
        return ObjectMappers.stringify(this);
    }

    public static DataStage builder() {
        return new Builder();
    }

    public interface DataStage {
        /**
         * <p>DO NOT respond to a <code>voice-request</code> webhook with this schema of { data }. This schema just exists to document what the response should look like. Follow these instructions:</p>
         * <p>Here is what the request will look like:</p>
         * <p>POST https://{assistant.voice.server.url}
         * Content-Type: application/json</p>
         * <p>{
         * &quot;messsage&quot;: {
         * &quot;type&quot;: &quot;voice-request&quot;,
         * &quot;text&quot;: &quot;Hello, world!&quot;,
         * &quot;sampleRate&quot;: 24000,
         * ...other metadata about the call...
         * }
         * }</p>
         * <p>The expected response is 1-channel 16-bit raw PCM audio at the sample rate specified in the request. Here is how the response will be piped to the transport:</p>
         * <pre><code>response.on('data', (chunk: Buffer) =&gt; {
         *   outputStream.write(chunk);
         * });
         * </code></pre>
         */
        _FinalStage data(@NotNull String data);

        Builder from(ServerMessageResponseVoiceRequest other);
    }

    public interface _FinalStage {
        ServerMessageResponseVoiceRequest build();
    }

    @JsonIgnoreProperties(ignoreUnknown = true)
    public static final class Builder implements DataStage, _FinalStage {
        private String data;

        @JsonAnySetter
        private Map<String, Object> additionalProperties = new HashMap<>();

        private Builder() {}

        @java.lang.Override
        public Builder from(ServerMessageResponseVoiceRequest other) {
            data(other.getData());
            return this;
        }

        /**
         * <p>DO NOT respond to a <code>voice-request</code> webhook with this schema of { data }. This schema just exists to document what the response should look like. Follow these instructions:</p>
         * <p>Here is what the request will look like:</p>
         * <p>POST https://{assistant.voice.server.url}
         * Content-Type: application/json</p>
         * <p>{
         * &quot;messsage&quot;: {
         * &quot;type&quot;: &quot;voice-request&quot;,
         * &quot;text&quot;: &quot;Hello, world!&quot;,
         * &quot;sampleRate&quot;: 24000,
         * ...other metadata about the call...
         * }
         * }</p>
         * <p>The expected response is 1-channel 16-bit raw PCM audio at the sample rate specified in the request. Here is how the response will be piped to the transport:</p>
         * <pre><code>response.on('data', (chunk: Buffer) =&gt; {
         *   outputStream.write(chunk);
         * });
         * </code></pre>
         * <p>DO NOT respond to a <code>voice-request</code> webhook with this schema of { data }. This schema just exists to document what the response should look like. Follow these instructions:</p>
         * <p>Here is what the request will look like:</p>
         * <p>POST https://{assistant.voice.server.url}
         * Content-Type: application/json</p>
         * <p>{
         * &quot;messsage&quot;: {
         * &quot;type&quot;: &quot;voice-request&quot;,
         * &quot;text&quot;: &quot;Hello, world!&quot;,
         * &quot;sampleRate&quot;: 24000,
         * ...other metadata about the call...
         * }
         * }</p>
         * <p>The expected response is 1-channel 16-bit raw PCM audio at the sample rate specified in the request. Here is how the response will be piped to the transport:</p>
         * <pre><code>response.on('data', (chunk: Buffer) =&gt; {
         *   outputStream.write(chunk);
         * });
         * </code></pre>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        @JsonSetter("data")
        public _FinalStage data(@NotNull String data) {
            this.data = Objects.requireNonNull(data, "data must not be null");
            return this;
        }

        @java.lang.Override
        public ServerMessageResponseVoiceRequest build() {
            return new ServerMessageResponseVoiceRequest(data, additionalProperties);
        }
    }
}
