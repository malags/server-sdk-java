/**
 * This file was auto-generated by Fern from our API Definition.
 */
package com.vapi.api.types;

import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.annotation.Nulls;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.vapi.api.core.ObjectMappers;
import java.util.HashMap;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;

@JsonInclude(JsonInclude.Include.NON_ABSENT)
@JsonDeserialize(builder = ArtifactPlan.Builder.class)
public final class ArtifactPlan {
    private final Optional<Boolean> recordingEnabled;

    private final Optional<ArtifactPlanRecordingFormat> recordingFormat;

    private final Optional<Boolean> videoRecordingEnabled;

    private final Optional<Boolean> pcapEnabled;

    private final Optional<String> pcapS3PathPrefix;

    private final Optional<TranscriptPlan> transcriptPlan;

    private final Optional<String> recordingPath;

    private final Map<String, Object> additionalProperties;

    private ArtifactPlan(
            Optional<Boolean> recordingEnabled,
            Optional<ArtifactPlanRecordingFormat> recordingFormat,
            Optional<Boolean> videoRecordingEnabled,
            Optional<Boolean> pcapEnabled,
            Optional<String> pcapS3PathPrefix,
            Optional<TranscriptPlan> transcriptPlan,
            Optional<String> recordingPath,
            Map<String, Object> additionalProperties) {
        this.recordingEnabled = recordingEnabled;
        this.recordingFormat = recordingFormat;
        this.videoRecordingEnabled = videoRecordingEnabled;
        this.pcapEnabled = pcapEnabled;
        this.pcapS3PathPrefix = pcapS3PathPrefix;
        this.transcriptPlan = transcriptPlan;
        this.recordingPath = recordingPath;
        this.additionalProperties = additionalProperties;
    }

    /**
     * @return This determines whether assistant's calls are recorded. Defaults to true.
     * <p>Usage:</p>
     * <ul>
     * <li>If you don't want to record the calls, set this to false.</li>
     * <li>If you want to record the calls when <code>assistant.hipaaEnabled</code> (deprecated) or <code>assistant.compliancePlan.hipaaEnabled</code> explicity set this to true and make sure to provide S3 or GCP credentials on the Provider Credentials page in the Dashboard.</li>
     * </ul>
     * <p>You can find the recording at <code>call.artifact.recordingUrl</code> and <code>call.artifact.stereoRecordingUrl</code> after the call is ended.</p>
     * <p>@default true</p>
     */
    @JsonProperty("recordingEnabled")
    public Optional<Boolean> getRecordingEnabled() {
        return recordingEnabled;
    }

    /**
     * @return This determines the format of the recording. Defaults to <code>wav;l16</code>.
     * <p>@default 'wav;l16'</p>
     */
    @JsonProperty("recordingFormat")
    public Optional<ArtifactPlanRecordingFormat> getRecordingFormat() {
        return recordingFormat;
    }

    /**
     * @return This determines whether the video is recorded during the call. Defaults to false. Only relevant for <code>webCall</code> type.
     * <p>You can find the video recording at <code>call.artifact.videoRecordingUrl</code> after the call is ended.</p>
     * <p>@default false</p>
     */
    @JsonProperty("videoRecordingEnabled")
    public Optional<Boolean> getVideoRecordingEnabled() {
        return videoRecordingEnabled;
    }

    /**
     * @return This determines whether the SIP packet capture is enabled. Defaults to true. Only relevant for <code>phone</code> type calls where phone number's provider is <code>vapi</code> or <code>byo-phone-number</code>.
     * <p>You can find the packet capture at <code>call.artifact.pcapUrl</code> after the call is ended.</p>
     * <p>@default true</p>
     */
    @JsonProperty("pcapEnabled")
    public Optional<Boolean> getPcapEnabled() {
        return pcapEnabled;
    }

    /**
     * @return This is the path where the SIP packet capture will be uploaded. This is only used if you have provided S3 or GCP credentials on the Provider Credentials page in the Dashboard.
     * <p>If credential.s3PathPrefix or credential.bucketPlan.path is set, this will append to it.</p>
     * <p>Usage:</p>
     * <ul>
     * <li>If you want to upload the packet capture to a specific path, set this to the path. Example: <code>/my-assistant-captures</code>.</li>
     * <li>If you want to upload the packet capture to the root of the bucket, set this to <code>/</code>.</li>
     * </ul>
     * <p>@default '/'</p>
     */
    @JsonProperty("pcapS3PathPrefix")
    public Optional<String> getPcapS3PathPrefix() {
        return pcapS3PathPrefix;
    }

    /**
     * @return This is the plan for <code>call.artifact.transcript</code>. To disable, set <code>transcriptPlan.enabled</code> to false.
     */
    @JsonProperty("transcriptPlan")
    public Optional<TranscriptPlan> getTranscriptPlan() {
        return transcriptPlan;
    }

    /**
     * @return This is the path where the recording will be uploaded. This is only used if you have provided S3 or GCP credentials on the Provider Credentials page in the Dashboard.
     * <p>If credential.s3PathPrefix or credential.bucketPlan.path is set, this will append to it.</p>
     * <p>Usage:</p>
     * <ul>
     * <li>If you want to upload the recording to a specific path, set this to the path. Example: <code>/my-assistant-recordings</code>.</li>
     * <li>If you want to upload the recording to the root of the bucket, set this to <code>/</code>.</li>
     * </ul>
     * <p>@default '/'</p>
     */
    @JsonProperty("recordingPath")
    public Optional<String> getRecordingPath() {
        return recordingPath;
    }

    @java.lang.Override
    public boolean equals(Object other) {
        if (this == other) return true;
        return other instanceof ArtifactPlan && equalTo((ArtifactPlan) other);
    }

    @JsonAnyGetter
    public Map<String, Object> getAdditionalProperties() {
        return this.additionalProperties;
    }

    private boolean equalTo(ArtifactPlan other) {
        return recordingEnabled.equals(other.recordingEnabled)
                && recordingFormat.equals(other.recordingFormat)
                && videoRecordingEnabled.equals(other.videoRecordingEnabled)
                && pcapEnabled.equals(other.pcapEnabled)
                && pcapS3PathPrefix.equals(other.pcapS3PathPrefix)
                && transcriptPlan.equals(other.transcriptPlan)
                && recordingPath.equals(other.recordingPath);
    }

    @java.lang.Override
    public int hashCode() {
        return Objects.hash(
                this.recordingEnabled,
                this.recordingFormat,
                this.videoRecordingEnabled,
                this.pcapEnabled,
                this.pcapS3PathPrefix,
                this.transcriptPlan,
                this.recordingPath);
    }

    @java.lang.Override
    public String toString() {
        return ObjectMappers.stringify(this);
    }

    public static Builder builder() {
        return new Builder();
    }

    @JsonIgnoreProperties(ignoreUnknown = true)
    public static final class Builder {
        private Optional<Boolean> recordingEnabled = Optional.empty();

        private Optional<ArtifactPlanRecordingFormat> recordingFormat = Optional.empty();

        private Optional<Boolean> videoRecordingEnabled = Optional.empty();

        private Optional<Boolean> pcapEnabled = Optional.empty();

        private Optional<String> pcapS3PathPrefix = Optional.empty();

        private Optional<TranscriptPlan> transcriptPlan = Optional.empty();

        private Optional<String> recordingPath = Optional.empty();

        @JsonAnySetter
        private Map<String, Object> additionalProperties = new HashMap<>();

        private Builder() {}

        public Builder from(ArtifactPlan other) {
            recordingEnabled(other.getRecordingEnabled());
            recordingFormat(other.getRecordingFormat());
            videoRecordingEnabled(other.getVideoRecordingEnabled());
            pcapEnabled(other.getPcapEnabled());
            pcapS3PathPrefix(other.getPcapS3PathPrefix());
            transcriptPlan(other.getTranscriptPlan());
            recordingPath(other.getRecordingPath());
            return this;
        }

        /**
         * <p>This determines whether assistant's calls are recorded. Defaults to true.</p>
         * <p>Usage:</p>
         * <ul>
         * <li>If you don't want to record the calls, set this to false.</li>
         * <li>If you want to record the calls when <code>assistant.hipaaEnabled</code> (deprecated) or <code>assistant.compliancePlan.hipaaEnabled</code> explicity set this to true and make sure to provide S3 or GCP credentials on the Provider Credentials page in the Dashboard.</li>
         * </ul>
         * <p>You can find the recording at <code>call.artifact.recordingUrl</code> and <code>call.artifact.stereoRecordingUrl</code> after the call is ended.</p>
         * <p>@default true</p>
         */
        @JsonSetter(value = "recordingEnabled", nulls = Nulls.SKIP)
        public Builder recordingEnabled(Optional<Boolean> recordingEnabled) {
            this.recordingEnabled = recordingEnabled;
            return this;
        }

        public Builder recordingEnabled(Boolean recordingEnabled) {
            this.recordingEnabled = Optional.ofNullable(recordingEnabled);
            return this;
        }

        /**
         * <p>This determines the format of the recording. Defaults to <code>wav;l16</code>.</p>
         * <p>@default 'wav;l16'</p>
         */
        @JsonSetter(value = "recordingFormat", nulls = Nulls.SKIP)
        public Builder recordingFormat(Optional<ArtifactPlanRecordingFormat> recordingFormat) {
            this.recordingFormat = recordingFormat;
            return this;
        }

        public Builder recordingFormat(ArtifactPlanRecordingFormat recordingFormat) {
            this.recordingFormat = Optional.ofNullable(recordingFormat);
            return this;
        }

        /**
         * <p>This determines whether the video is recorded during the call. Defaults to false. Only relevant for <code>webCall</code> type.</p>
         * <p>You can find the video recording at <code>call.artifact.videoRecordingUrl</code> after the call is ended.</p>
         * <p>@default false</p>
         */
        @JsonSetter(value = "videoRecordingEnabled", nulls = Nulls.SKIP)
        public Builder videoRecordingEnabled(Optional<Boolean> videoRecordingEnabled) {
            this.videoRecordingEnabled = videoRecordingEnabled;
            return this;
        }

        public Builder videoRecordingEnabled(Boolean videoRecordingEnabled) {
            this.videoRecordingEnabled = Optional.ofNullable(videoRecordingEnabled);
            return this;
        }

        /**
         * <p>This determines whether the SIP packet capture is enabled. Defaults to true. Only relevant for <code>phone</code> type calls where phone number's provider is <code>vapi</code> or <code>byo-phone-number</code>.</p>
         * <p>You can find the packet capture at <code>call.artifact.pcapUrl</code> after the call is ended.</p>
         * <p>@default true</p>
         */
        @JsonSetter(value = "pcapEnabled", nulls = Nulls.SKIP)
        public Builder pcapEnabled(Optional<Boolean> pcapEnabled) {
            this.pcapEnabled = pcapEnabled;
            return this;
        }

        public Builder pcapEnabled(Boolean pcapEnabled) {
            this.pcapEnabled = Optional.ofNullable(pcapEnabled);
            return this;
        }

        /**
         * <p>This is the path where the SIP packet capture will be uploaded. This is only used if you have provided S3 or GCP credentials on the Provider Credentials page in the Dashboard.</p>
         * <p>If credential.s3PathPrefix or credential.bucketPlan.path is set, this will append to it.</p>
         * <p>Usage:</p>
         * <ul>
         * <li>If you want to upload the packet capture to a specific path, set this to the path. Example: <code>/my-assistant-captures</code>.</li>
         * <li>If you want to upload the packet capture to the root of the bucket, set this to <code>/</code>.</li>
         * </ul>
         * <p>@default '/'</p>
         */
        @JsonSetter(value = "pcapS3PathPrefix", nulls = Nulls.SKIP)
        public Builder pcapS3PathPrefix(Optional<String> pcapS3PathPrefix) {
            this.pcapS3PathPrefix = pcapS3PathPrefix;
            return this;
        }

        public Builder pcapS3PathPrefix(String pcapS3PathPrefix) {
            this.pcapS3PathPrefix = Optional.ofNullable(pcapS3PathPrefix);
            return this;
        }

        /**
         * <p>This is the plan for <code>call.artifact.transcript</code>. To disable, set <code>transcriptPlan.enabled</code> to false.</p>
         */
        @JsonSetter(value = "transcriptPlan", nulls = Nulls.SKIP)
        public Builder transcriptPlan(Optional<TranscriptPlan> transcriptPlan) {
            this.transcriptPlan = transcriptPlan;
            return this;
        }

        public Builder transcriptPlan(TranscriptPlan transcriptPlan) {
            this.transcriptPlan = Optional.ofNullable(transcriptPlan);
            return this;
        }

        /**
         * <p>This is the path where the recording will be uploaded. This is only used if you have provided S3 or GCP credentials on the Provider Credentials page in the Dashboard.</p>
         * <p>If credential.s3PathPrefix or credential.bucketPlan.path is set, this will append to it.</p>
         * <p>Usage:</p>
         * <ul>
         * <li>If you want to upload the recording to a specific path, set this to the path. Example: <code>/my-assistant-recordings</code>.</li>
         * <li>If you want to upload the recording to the root of the bucket, set this to <code>/</code>.</li>
         * </ul>
         * <p>@default '/'</p>
         */
        @JsonSetter(value = "recordingPath", nulls = Nulls.SKIP)
        public Builder recordingPath(Optional<String> recordingPath) {
            this.recordingPath = recordingPath;
            return this;
        }

        public Builder recordingPath(String recordingPath) {
            this.recordingPath = Optional.ofNullable(recordingPath);
            return this;
        }

        public ArtifactPlan build() {
            return new ArtifactPlan(
                    recordingEnabled,
                    recordingFormat,
                    videoRecordingEnabled,
                    pcapEnabled,
                    pcapS3PathPrefix,
                    transcriptPlan,
                    recordingPath,
                    additionalProperties);
        }
    }
}
