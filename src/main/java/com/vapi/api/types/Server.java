/**
 * This file was auto-generated by Fern from our API Definition.
 */
package com.vapi.api.types;

import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.annotation.Nulls;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.vapi.api.core.ObjectMappers;
import java.util.HashMap;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;

@JsonInclude(JsonInclude.Include.NON_ABSENT)
@JsonDeserialize(builder = Server.Builder.class)
public final class Server {
    private final Optional<Double> timeoutSeconds;

    private final Optional<String> url;

    private final Optional<Map<String, Object>> headers;

    private final Optional<BackoffPlan> backoffPlan;

    private final Map<String, Object> additionalProperties;

    private Server(
            Optional<Double> timeoutSeconds,
            Optional<String> url,
            Optional<Map<String, Object>> headers,
            Optional<BackoffPlan> backoffPlan,
            Map<String, Object> additionalProperties) {
        this.timeoutSeconds = timeoutSeconds;
        this.url = url;
        this.headers = headers;
        this.backoffPlan = backoffPlan;
        this.additionalProperties = additionalProperties;
    }

    /**
     * @return This is the timeout in seconds for the request. Defaults to 20 seconds.
     * <p>@default 20</p>
     */
    @JsonProperty("timeoutSeconds")
    public Optional<Double> getTimeoutSeconds() {
        return timeoutSeconds;
    }

    /**
     * @return This is where the request will be sent.
     */
    @JsonProperty("url")
    public Optional<String> getUrl() {
        return url;
    }

    /**
     * @return These are the headers to include in the request.
     * <p>Each key-value pair represents a header name and its value.</p>
     */
    @JsonProperty("headers")
    public Optional<Map<String, Object>> getHeaders() {
        return headers;
    }

    /**
     * @return This is the backoff plan if the request fails. Defaults to undefined (the request will not be retried).
     * <p>@default undefined (the request will not be retried)</p>
     */
    @JsonProperty("backoffPlan")
    public Optional<BackoffPlan> getBackoffPlan() {
        return backoffPlan;
    }

    @java.lang.Override
    public boolean equals(Object other) {
        if (this == other) return true;
        return other instanceof Server && equalTo((Server) other);
    }

    @JsonAnyGetter
    public Map<String, Object> getAdditionalProperties() {
        return this.additionalProperties;
    }

    private boolean equalTo(Server other) {
        return timeoutSeconds.equals(other.timeoutSeconds)
                && url.equals(other.url)
                && headers.equals(other.headers)
                && backoffPlan.equals(other.backoffPlan);
    }

    @java.lang.Override
    public int hashCode() {
        return Objects.hash(this.timeoutSeconds, this.url, this.headers, this.backoffPlan);
    }

    @java.lang.Override
    public String toString() {
        return ObjectMappers.stringify(this);
    }

    public static Builder builder() {
        return new Builder();
    }

    @JsonIgnoreProperties(ignoreUnknown = true)
    public static final class Builder {
        private Optional<Double> timeoutSeconds = Optional.empty();

        private Optional<String> url = Optional.empty();

        private Optional<Map<String, Object>> headers = Optional.empty();

        private Optional<BackoffPlan> backoffPlan = Optional.empty();

        @JsonAnySetter
        private Map<String, Object> additionalProperties = new HashMap<>();

        private Builder() {}

        public Builder from(Server other) {
            timeoutSeconds(other.getTimeoutSeconds());
            url(other.getUrl());
            headers(other.getHeaders());
            backoffPlan(other.getBackoffPlan());
            return this;
        }

        /**
         * <p>This is the timeout in seconds for the request. Defaults to 20 seconds.</p>
         * <p>@default 20</p>
         */
        @JsonSetter(value = "timeoutSeconds", nulls = Nulls.SKIP)
        public Builder timeoutSeconds(Optional<Double> timeoutSeconds) {
            this.timeoutSeconds = timeoutSeconds;
            return this;
        }

        public Builder timeoutSeconds(Double timeoutSeconds) {
            this.timeoutSeconds = Optional.ofNullable(timeoutSeconds);
            return this;
        }

        /**
         * <p>This is where the request will be sent.</p>
         */
        @JsonSetter(value = "url", nulls = Nulls.SKIP)
        public Builder url(Optional<String> url) {
            this.url = url;
            return this;
        }

        public Builder url(String url) {
            this.url = Optional.ofNullable(url);
            return this;
        }

        /**
         * <p>These are the headers to include in the request.</p>
         * <p>Each key-value pair represents a header name and its value.</p>
         */
        @JsonSetter(value = "headers", nulls = Nulls.SKIP)
        public Builder headers(Optional<Map<String, Object>> headers) {
            this.headers = headers;
            return this;
        }

        public Builder headers(Map<String, Object> headers) {
            this.headers = Optional.ofNullable(headers);
            return this;
        }

        /**
         * <p>This is the backoff plan if the request fails. Defaults to undefined (the request will not be retried).</p>
         * <p>@default undefined (the request will not be retried)</p>
         */
        @JsonSetter(value = "backoffPlan", nulls = Nulls.SKIP)
        public Builder backoffPlan(Optional<BackoffPlan> backoffPlan) {
            this.backoffPlan = backoffPlan;
            return this;
        }

        public Builder backoffPlan(BackoffPlan backoffPlan) {
            this.backoffPlan = Optional.ofNullable(backoffPlan);
            return this;
        }

        public Server build() {
            return new Server(timeoutSeconds, url, headers, backoffPlan, additionalProperties);
        }
    }
}
