/**
 * This file was auto-generated by Fern from our API Definition.
 */
package com.vapi.api.types;

import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.annotation.Nulls;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.vapi.api.core.ObjectMappers;
import java.util.HashMap;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import org.jetbrains.annotations.NotNull;

@JsonInclude(JsonInclude.Include.NON_ABSENT)
@JsonDeserialize(builder = ToolCallResult.Builder.class)
public final class ToolCallResult {
    private final Optional<ToolCallResultMessage> message;

    private final String name;

    private final String toolCallId;

    private final Optional<String> result;

    private final Optional<String> error;

    private final Optional<Map<String, Object>> metadata;

    private final Map<String, Object> additionalProperties;

    private ToolCallResult(
            Optional<ToolCallResultMessage> message,
            String name,
            String toolCallId,
            Optional<String> result,
            Optional<String> error,
            Optional<Map<String, Object>> metadata,
            Map<String, Object> additionalProperties) {
        this.message = message;
        this.name = name;
        this.toolCallId = toolCallId;
        this.result = result;
        this.error = error;
        this.metadata = metadata;
        this.additionalProperties = additionalProperties;
    }

    /**
     * @return This is the message that will be spoken to the user.
     * <p>If this is not returned, assistant will speak:</p>
     * <ol>
     * <li>a <code>request-complete</code> or <code>request-failed</code> message from <code>tool.messages</code>, if it exists</li>
     * <li>a response generated by the model, if not</li>
     * </ol>
     */
    @JsonProperty("message")
    public Optional<ToolCallResultMessage> getMessage() {
        return message;
    }

    /**
     * @return This is the name of the function the model called.
     */
    @JsonProperty("name")
    public String getName() {
        return name;
    }

    /**
     * @return This is the unique identifier for the tool call.
     */
    @JsonProperty("toolCallId")
    public String getToolCallId() {
        return toolCallId;
    }

    /**
     * @return This is the result if the tool call was successful. This is added to the conversation history.
     * <p>Further, if this is returned, assistant will speak:</p>
     * <ol>
     * <li>the <code>message</code>, if it exists and is of type <code>request-complete</code></li>
     * <li>a <code>request-complete</code> message from <code>tool.messages</code>, if it exists</li>
     * <li>a response generated by the model, if neither exist</li>
     * </ol>
     */
    @JsonProperty("result")
    public Optional<String> getResult() {
        return result;
    }

    /**
     * @return This is the error if the tool call was not successful. This is added to the conversation history.
     * <p>Further, if this is returned, assistant will speak:</p>
     * <ol>
     * <li>the <code>message</code>, if it exists and is of type <code>request-failed</code></li>
     * <li>a <code>request-failed</code> message from <code>tool.messages</code>, if it exists</li>
     * <li>a response generated by the model, if neither exist</li>
     * </ol>
     */
    @JsonProperty("error")
    public Optional<String> getError() {
        return error;
    }

    /**
     * @return This is optional metadata for the tool call result to be sent to the client.
     */
    @JsonProperty("metadata")
    public Optional<Map<String, Object>> getMetadata() {
        return metadata;
    }

    @java.lang.Override
    public boolean equals(Object other) {
        if (this == other) return true;
        return other instanceof ToolCallResult && equalTo((ToolCallResult) other);
    }

    @JsonAnyGetter
    public Map<String, Object> getAdditionalProperties() {
        return this.additionalProperties;
    }

    private boolean equalTo(ToolCallResult other) {
        return message.equals(other.message)
                && name.equals(other.name)
                && toolCallId.equals(other.toolCallId)
                && result.equals(other.result)
                && error.equals(other.error)
                && metadata.equals(other.metadata);
    }

    @java.lang.Override
    public int hashCode() {
        return Objects.hash(this.message, this.name, this.toolCallId, this.result, this.error, this.metadata);
    }

    @java.lang.Override
    public String toString() {
        return ObjectMappers.stringify(this);
    }

    public static NameStage builder() {
        return new Builder();
    }

    public interface NameStage {
        /**
         * <p>This is the name of the function the model called.</p>
         */
        ToolCallIdStage name(@NotNull String name);

        Builder from(ToolCallResult other);
    }

    public interface ToolCallIdStage {
        /**
         * <p>This is the unique identifier for the tool call.</p>
         */
        _FinalStage toolCallId(@NotNull String toolCallId);
    }

    public interface _FinalStage {
        ToolCallResult build();

        /**
         * <p>This is the message that will be spoken to the user.</p>
         * <p>If this is not returned, assistant will speak:</p>
         * <ol>
         * <li>a <code>request-complete</code> or <code>request-failed</code> message from <code>tool.messages</code>, if it exists</li>
         * <li>a response generated by the model, if not</li>
         * </ol>
         */
        _FinalStage message(Optional<ToolCallResultMessage> message);

        _FinalStage message(ToolCallResultMessage message);

        /**
         * <p>This is the result if the tool call was successful. This is added to the conversation history.</p>
         * <p>Further, if this is returned, assistant will speak:</p>
         * <ol>
         * <li>the <code>message</code>, if it exists and is of type <code>request-complete</code></li>
         * <li>a <code>request-complete</code> message from <code>tool.messages</code>, if it exists</li>
         * <li>a response generated by the model, if neither exist</li>
         * </ol>
         */
        _FinalStage result(Optional<String> result);

        _FinalStage result(String result);

        /**
         * <p>This is the error if the tool call was not successful. This is added to the conversation history.</p>
         * <p>Further, if this is returned, assistant will speak:</p>
         * <ol>
         * <li>the <code>message</code>, if it exists and is of type <code>request-failed</code></li>
         * <li>a <code>request-failed</code> message from <code>tool.messages</code>, if it exists</li>
         * <li>a response generated by the model, if neither exist</li>
         * </ol>
         */
        _FinalStage error(Optional<String> error);

        _FinalStage error(String error);

        /**
         * <p>This is optional metadata for the tool call result to be sent to the client.</p>
         */
        _FinalStage metadata(Optional<Map<String, Object>> metadata);

        _FinalStage metadata(Map<String, Object> metadata);
    }

    @JsonIgnoreProperties(ignoreUnknown = true)
    public static final class Builder implements NameStage, ToolCallIdStage, _FinalStage {
        private String name;

        private String toolCallId;

        private Optional<Map<String, Object>> metadata = Optional.empty();

        private Optional<String> error = Optional.empty();

        private Optional<String> result = Optional.empty();

        private Optional<ToolCallResultMessage> message = Optional.empty();

        @JsonAnySetter
        private Map<String, Object> additionalProperties = new HashMap<>();

        private Builder() {}

        @java.lang.Override
        public Builder from(ToolCallResult other) {
            message(other.getMessage());
            name(other.getName());
            toolCallId(other.getToolCallId());
            result(other.getResult());
            error(other.getError());
            metadata(other.getMetadata());
            return this;
        }

        /**
         * <p>This is the name of the function the model called.</p>
         * <p>This is the name of the function the model called.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        @JsonSetter("name")
        public ToolCallIdStage name(@NotNull String name) {
            this.name = Objects.requireNonNull(name, "name must not be null");
            return this;
        }

        /**
         * <p>This is the unique identifier for the tool call.</p>
         * <p>This is the unique identifier for the tool call.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        @JsonSetter("toolCallId")
        public _FinalStage toolCallId(@NotNull String toolCallId) {
            this.toolCallId = Objects.requireNonNull(toolCallId, "toolCallId must not be null");
            return this;
        }

        /**
         * <p>This is optional metadata for the tool call result to be sent to the client.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        public _FinalStage metadata(Map<String, Object> metadata) {
            this.metadata = Optional.ofNullable(metadata);
            return this;
        }

        /**
         * <p>This is optional metadata for the tool call result to be sent to the client.</p>
         */
        @java.lang.Override
        @JsonSetter(value = "metadata", nulls = Nulls.SKIP)
        public _FinalStage metadata(Optional<Map<String, Object>> metadata) {
            this.metadata = metadata;
            return this;
        }

        /**
         * <p>This is the error if the tool call was not successful. This is added to the conversation history.</p>
         * <p>Further, if this is returned, assistant will speak:</p>
         * <ol>
         * <li>the <code>message</code>, if it exists and is of type <code>request-failed</code></li>
         * <li>a <code>request-failed</code> message from <code>tool.messages</code>, if it exists</li>
         * <li>a response generated by the model, if neither exist</li>
         * </ol>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        public _FinalStage error(String error) {
            this.error = Optional.ofNullable(error);
            return this;
        }

        /**
         * <p>This is the error if the tool call was not successful. This is added to the conversation history.</p>
         * <p>Further, if this is returned, assistant will speak:</p>
         * <ol>
         * <li>the <code>message</code>, if it exists and is of type <code>request-failed</code></li>
         * <li>a <code>request-failed</code> message from <code>tool.messages</code>, if it exists</li>
         * <li>a response generated by the model, if neither exist</li>
         * </ol>
         */
        @java.lang.Override
        @JsonSetter(value = "error", nulls = Nulls.SKIP)
        public _FinalStage error(Optional<String> error) {
            this.error = error;
            return this;
        }

        /**
         * <p>This is the result if the tool call was successful. This is added to the conversation history.</p>
         * <p>Further, if this is returned, assistant will speak:</p>
         * <ol>
         * <li>the <code>message</code>, if it exists and is of type <code>request-complete</code></li>
         * <li>a <code>request-complete</code> message from <code>tool.messages</code>, if it exists</li>
         * <li>a response generated by the model, if neither exist</li>
         * </ol>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        public _FinalStage result(String result) {
            this.result = Optional.ofNullable(result);
            return this;
        }

        /**
         * <p>This is the result if the tool call was successful. This is added to the conversation history.</p>
         * <p>Further, if this is returned, assistant will speak:</p>
         * <ol>
         * <li>the <code>message</code>, if it exists and is of type <code>request-complete</code></li>
         * <li>a <code>request-complete</code> message from <code>tool.messages</code>, if it exists</li>
         * <li>a response generated by the model, if neither exist</li>
         * </ol>
         */
        @java.lang.Override
        @JsonSetter(value = "result", nulls = Nulls.SKIP)
        public _FinalStage result(Optional<String> result) {
            this.result = result;
            return this;
        }

        /**
         * <p>This is the message that will be spoken to the user.</p>
         * <p>If this is not returned, assistant will speak:</p>
         * <ol>
         * <li>a <code>request-complete</code> or <code>request-failed</code> message from <code>tool.messages</code>, if it exists</li>
         * <li>a response generated by the model, if not</li>
         * </ol>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        public _FinalStage message(ToolCallResultMessage message) {
            this.message = Optional.ofNullable(message);
            return this;
        }

        /**
         * <p>This is the message that will be spoken to the user.</p>
         * <p>If this is not returned, assistant will speak:</p>
         * <ol>
         * <li>a <code>request-complete</code> or <code>request-failed</code> message from <code>tool.messages</code>, if it exists</li>
         * <li>a response generated by the model, if not</li>
         * </ol>
         */
        @java.lang.Override
        @JsonSetter(value = "message", nulls = Nulls.SKIP)
        public _FinalStage message(Optional<ToolCallResultMessage> message) {
            this.message = message;
            return this;
        }

        @java.lang.Override
        public ToolCallResult build() {
            return new ToolCallResult(message, name, toolCallId, result, error, metadata, additionalProperties);
        }
    }
}
