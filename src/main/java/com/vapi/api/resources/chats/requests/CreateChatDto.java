/**
 * This file was auto-generated by Fern from our API Definition.
 */
package com.vapi.api.resources.chats.requests;

import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.annotation.Nulls;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.vapi.api.core.ObjectMappers;
import com.vapi.api.resources.chats.types.CreateChatDtoInput;
import com.vapi.api.types.AssistantOverrides;
import com.vapi.api.types.CreateAssistantDto;
import java.util.HashMap;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import org.jetbrains.annotations.NotNull;

@JsonInclude(JsonInclude.Include.NON_ABSENT)
@JsonDeserialize(builder = CreateChatDto.Builder.class)
public final class CreateChatDto {
    private final Optional<String> assistantId;

    private final Optional<CreateAssistantDto> assistant;

    private final Optional<AssistantOverrides> assistantOverrides;

    private final Optional<String> name;

    private final Optional<String> sessionId;

    private final CreateChatDtoInput input;

    private final Optional<Boolean> stream;

    private final Optional<String> previousChatId;

    private final Map<String, Object> additionalProperties;

    private CreateChatDto(
            Optional<String> assistantId,
            Optional<CreateAssistantDto> assistant,
            Optional<AssistantOverrides> assistantOverrides,
            Optional<String> name,
            Optional<String> sessionId,
            CreateChatDtoInput input,
            Optional<Boolean> stream,
            Optional<String> previousChatId,
            Map<String, Object> additionalProperties) {
        this.assistantId = assistantId;
        this.assistant = assistant;
        this.assistantOverrides = assistantOverrides;
        this.name = name;
        this.sessionId = sessionId;
        this.input = input;
        this.stream = stream;
        this.previousChatId = previousChatId;
        this.additionalProperties = additionalProperties;
    }

    /**
     * @return This is the assistant that will be used for the chat. To use an existing assistant, use <code>assistantId</code> instead.
     */
    @JsonProperty("assistantId")
    public Optional<String> getAssistantId() {
        return assistantId;
    }

    /**
     * @return This is the assistant that will be used for the chat. To use an existing assistant, use <code>assistantId</code> instead.
     */
    @JsonProperty("assistant")
    public Optional<CreateAssistantDto> getAssistant() {
        return assistant;
    }

    /**
     * @return These are the variable values that will be used to replace template variables in the assistant messages.
     * Only variable substitution is supported in chat contexts - other assistant properties cannot be overridden.
     */
    @JsonProperty("assistantOverrides")
    public Optional<AssistantOverrides> getAssistantOverrides() {
        return assistantOverrides;
    }

    /**
     * @return This is the name of the chat. This is just for your own reference.
     */
    @JsonProperty("name")
    public Optional<String> getName() {
        return name;
    }

    /**
     * @return This is the ID of the session that will be used for the chat.
     * Mutually exclusive with previousChatId.
     */
    @JsonProperty("sessionId")
    public Optional<String> getSessionId() {
        return sessionId;
    }

    /**
     * @return This is the input text for the chat.
     * Can be a string or an array of chat messages.
     * This field is REQUIRED for chat creation.
     */
    @JsonProperty("input")
    public CreateChatDtoInput getInput() {
        return input;
    }

    /**
     * @return This is a flag that determines whether the response should be streamed.
     * When true, the response will be sent as chunks of text.
     */
    @JsonProperty("stream")
    public Optional<Boolean> getStream() {
        return stream;
    }

    /**
     * @return This is the ID of the chat that will be used as context for the new chat.
     * The messages from the previous chat will be used as context.
     * Mutually exclusive with sessionId.
     */
    @JsonProperty("previousChatId")
    public Optional<String> getPreviousChatId() {
        return previousChatId;
    }

    @java.lang.Override
    public boolean equals(Object other) {
        if (this == other) return true;
        return other instanceof CreateChatDto && equalTo((CreateChatDto) other);
    }

    @JsonAnyGetter
    public Map<String, Object> getAdditionalProperties() {
        return this.additionalProperties;
    }

    private boolean equalTo(CreateChatDto other) {
        return assistantId.equals(other.assistantId)
                && assistant.equals(other.assistant)
                && assistantOverrides.equals(other.assistantOverrides)
                && name.equals(other.name)
                && sessionId.equals(other.sessionId)
                && input.equals(other.input)
                && stream.equals(other.stream)
                && previousChatId.equals(other.previousChatId);
    }

    @java.lang.Override
    public int hashCode() {
        return Objects.hash(
                this.assistantId,
                this.assistant,
                this.assistantOverrides,
                this.name,
                this.sessionId,
                this.input,
                this.stream,
                this.previousChatId);
    }

    @java.lang.Override
    public String toString() {
        return ObjectMappers.stringify(this);
    }

    public static InputStage builder() {
        return new Builder();
    }

    public interface InputStage {
        /**
         * <p>This is the input text for the chat.
         * Can be a string or an array of chat messages.
         * This field is REQUIRED for chat creation.</p>
         */
        _FinalStage input(@NotNull CreateChatDtoInput input);

        Builder from(CreateChatDto other);
    }

    public interface _FinalStage {
        CreateChatDto build();

        /**
         * <p>This is the assistant that will be used for the chat. To use an existing assistant, use <code>assistantId</code> instead.</p>
         */
        _FinalStage assistantId(Optional<String> assistantId);

        _FinalStage assistantId(String assistantId);

        /**
         * <p>This is the assistant that will be used for the chat. To use an existing assistant, use <code>assistantId</code> instead.</p>
         */
        _FinalStage assistant(Optional<CreateAssistantDto> assistant);

        _FinalStage assistant(CreateAssistantDto assistant);

        /**
         * <p>These are the variable values that will be used to replace template variables in the assistant messages.
         * Only variable substitution is supported in chat contexts - other assistant properties cannot be overridden.</p>
         */
        _FinalStage assistantOverrides(Optional<AssistantOverrides> assistantOverrides);

        _FinalStage assistantOverrides(AssistantOverrides assistantOverrides);

        /**
         * <p>This is the name of the chat. This is just for your own reference.</p>
         */
        _FinalStage name(Optional<String> name);

        _FinalStage name(String name);

        /**
         * <p>This is the ID of the session that will be used for the chat.
         * Mutually exclusive with previousChatId.</p>
         */
        _FinalStage sessionId(Optional<String> sessionId);

        _FinalStage sessionId(String sessionId);

        /**
         * <p>This is a flag that determines whether the response should be streamed.
         * When true, the response will be sent as chunks of text.</p>
         */
        _FinalStage stream(Optional<Boolean> stream);

        _FinalStage stream(Boolean stream);

        /**
         * <p>This is the ID of the chat that will be used as context for the new chat.
         * The messages from the previous chat will be used as context.
         * Mutually exclusive with sessionId.</p>
         */
        _FinalStage previousChatId(Optional<String> previousChatId);

        _FinalStage previousChatId(String previousChatId);
    }

    @JsonIgnoreProperties(ignoreUnknown = true)
    public static final class Builder implements InputStage, _FinalStage {
        private CreateChatDtoInput input;

        private Optional<String> previousChatId = Optional.empty();

        private Optional<Boolean> stream = Optional.empty();

        private Optional<String> sessionId = Optional.empty();

        private Optional<String> name = Optional.empty();

        private Optional<AssistantOverrides> assistantOverrides = Optional.empty();

        private Optional<CreateAssistantDto> assistant = Optional.empty();

        private Optional<String> assistantId = Optional.empty();

        @JsonAnySetter
        private Map<String, Object> additionalProperties = new HashMap<>();

        private Builder() {}

        @java.lang.Override
        public Builder from(CreateChatDto other) {
            assistantId(other.getAssistantId());
            assistant(other.getAssistant());
            assistantOverrides(other.getAssistantOverrides());
            name(other.getName());
            sessionId(other.getSessionId());
            input(other.getInput());
            stream(other.getStream());
            previousChatId(other.getPreviousChatId());
            return this;
        }

        /**
         * <p>This is the input text for the chat.
         * Can be a string or an array of chat messages.
         * This field is REQUIRED for chat creation.</p>
         * <p>This is the input text for the chat.
         * Can be a string or an array of chat messages.
         * This field is REQUIRED for chat creation.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        @JsonSetter("input")
        public _FinalStage input(@NotNull CreateChatDtoInput input) {
            this.input = Objects.requireNonNull(input, "input must not be null");
            return this;
        }

        /**
         * <p>This is the ID of the chat that will be used as context for the new chat.
         * The messages from the previous chat will be used as context.
         * Mutually exclusive with sessionId.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        public _FinalStage previousChatId(String previousChatId) {
            this.previousChatId = Optional.ofNullable(previousChatId);
            return this;
        }

        /**
         * <p>This is the ID of the chat that will be used as context for the new chat.
         * The messages from the previous chat will be used as context.
         * Mutually exclusive with sessionId.</p>
         */
        @java.lang.Override
        @JsonSetter(value = "previousChatId", nulls = Nulls.SKIP)
        public _FinalStage previousChatId(Optional<String> previousChatId) {
            this.previousChatId = previousChatId;
            return this;
        }

        /**
         * <p>This is a flag that determines whether the response should be streamed.
         * When true, the response will be sent as chunks of text.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        public _FinalStage stream(Boolean stream) {
            this.stream = Optional.ofNullable(stream);
            return this;
        }

        /**
         * <p>This is a flag that determines whether the response should be streamed.
         * When true, the response will be sent as chunks of text.</p>
         */
        @java.lang.Override
        @JsonSetter(value = "stream", nulls = Nulls.SKIP)
        public _FinalStage stream(Optional<Boolean> stream) {
            this.stream = stream;
            return this;
        }

        /**
         * <p>This is the ID of the session that will be used for the chat.
         * Mutually exclusive with previousChatId.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        public _FinalStage sessionId(String sessionId) {
            this.sessionId = Optional.ofNullable(sessionId);
            return this;
        }

        /**
         * <p>This is the ID of the session that will be used for the chat.
         * Mutually exclusive with previousChatId.</p>
         */
        @java.lang.Override
        @JsonSetter(value = "sessionId", nulls = Nulls.SKIP)
        public _FinalStage sessionId(Optional<String> sessionId) {
            this.sessionId = sessionId;
            return this;
        }

        /**
         * <p>This is the name of the chat. This is just for your own reference.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        public _FinalStage name(String name) {
            this.name = Optional.ofNullable(name);
            return this;
        }

        /**
         * <p>This is the name of the chat. This is just for your own reference.</p>
         */
        @java.lang.Override
        @JsonSetter(value = "name", nulls = Nulls.SKIP)
        public _FinalStage name(Optional<String> name) {
            this.name = name;
            return this;
        }

        /**
         * <p>These are the variable values that will be used to replace template variables in the assistant messages.
         * Only variable substitution is supported in chat contexts - other assistant properties cannot be overridden.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        public _FinalStage assistantOverrides(AssistantOverrides assistantOverrides) {
            this.assistantOverrides = Optional.ofNullable(assistantOverrides);
            return this;
        }

        /**
         * <p>These are the variable values that will be used to replace template variables in the assistant messages.
         * Only variable substitution is supported in chat contexts - other assistant properties cannot be overridden.</p>
         */
        @java.lang.Override
        @JsonSetter(value = "assistantOverrides", nulls = Nulls.SKIP)
        public _FinalStage assistantOverrides(Optional<AssistantOverrides> assistantOverrides) {
            this.assistantOverrides = assistantOverrides;
            return this;
        }

        /**
         * <p>This is the assistant that will be used for the chat. To use an existing assistant, use <code>assistantId</code> instead.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        public _FinalStage assistant(CreateAssistantDto assistant) {
            this.assistant = Optional.ofNullable(assistant);
            return this;
        }

        /**
         * <p>This is the assistant that will be used for the chat. To use an existing assistant, use <code>assistantId</code> instead.</p>
         */
        @java.lang.Override
        @JsonSetter(value = "assistant", nulls = Nulls.SKIP)
        public _FinalStage assistant(Optional<CreateAssistantDto> assistant) {
            this.assistant = assistant;
            return this;
        }

        /**
         * <p>This is the assistant that will be used for the chat. To use an existing assistant, use <code>assistantId</code> instead.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        public _FinalStage assistantId(String assistantId) {
            this.assistantId = Optional.ofNullable(assistantId);
            return this;
        }

        /**
         * <p>This is the assistant that will be used for the chat. To use an existing assistant, use <code>assistantId</code> instead.</p>
         */
        @java.lang.Override
        @JsonSetter(value = "assistantId", nulls = Nulls.SKIP)
        public _FinalStage assistantId(Optional<String> assistantId) {
            this.assistantId = assistantId;
            return this;
        }

        @java.lang.Override
        public CreateChatDto build() {
            return new CreateChatDto(
                    assistantId,
                    assistant,
                    assistantOverrides,
                    name,
                    sessionId,
                    input,
                    stream,
                    previousChatId,
                    additionalProperties);
        }
    }
}
