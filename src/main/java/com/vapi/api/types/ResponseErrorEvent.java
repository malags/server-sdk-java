/**
 * This file was auto-generated by Fern from our API Definition.
 */
package com.vapi.api.types;

import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.annotation.Nulls;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.vapi.api.core.Nullable;
import com.vapi.api.core.NullableNonemptyFilter;
import com.vapi.api.core.ObjectMappers;
import java.util.HashMap;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import org.jetbrains.annotations.NotNull;

@JsonInclude(JsonInclude.Include.NON_ABSENT)
@JsonDeserialize(builder = ResponseErrorEvent.Builder.class)
public final class ResponseErrorEvent {
    private final String code;

    private final String message;

    private final Optional<String> param;

    private final double sequenceNumber;

    private final Map<String, Object> additionalProperties;

    private ResponseErrorEvent(
            String code,
            String message,
            Optional<String> param,
            double sequenceNumber,
            Map<String, Object> additionalProperties) {
        this.code = code;
        this.message = message;
        this.param = param;
        this.sequenceNumber = sequenceNumber;
        this.additionalProperties = additionalProperties;
    }

    /**
     * @return Event type
     */
    @JsonProperty("type")
    public String getType() {
        return "error";
    }

    /**
     * @return Error code
     */
    @JsonProperty("code")
    public String getCode() {
        return code;
    }

    /**
     * @return Error message
     */
    @JsonProperty("message")
    public String getMessage() {
        return message;
    }

    /**
     * @return Parameter that caused the error
     */
    @JsonIgnore
    public Optional<String> getParam() {
        if (param == null) {
            return Optional.empty();
        }
        return param;
    }

    /**
     * @return Sequence number of the event
     */
    @JsonProperty("sequence_number")
    public double getSequenceNumber() {
        return sequenceNumber;
    }

    @JsonInclude(value = JsonInclude.Include.CUSTOM, valueFilter = NullableNonemptyFilter.class)
    @JsonProperty("param")
    private Optional<String> _getParam() {
        return param;
    }

    @java.lang.Override
    public boolean equals(Object other) {
        if (this == other) return true;
        return other instanceof ResponseErrorEvent && equalTo((ResponseErrorEvent) other);
    }

    @JsonAnyGetter
    public Map<String, Object> getAdditionalProperties() {
        return this.additionalProperties;
    }

    private boolean equalTo(ResponseErrorEvent other) {
        return code.equals(other.code)
                && message.equals(other.message)
                && param.equals(other.param)
                && sequenceNumber == other.sequenceNumber;
    }

    @java.lang.Override
    public int hashCode() {
        return Objects.hash(this.code, this.message, this.param, this.sequenceNumber);
    }

    @java.lang.Override
    public String toString() {
        return ObjectMappers.stringify(this);
    }

    public static CodeStage builder() {
        return new Builder();
    }

    public interface CodeStage {
        /**
         * <p>Error code</p>
         */
        MessageStage code(@NotNull String code);

        Builder from(ResponseErrorEvent other);
    }

    public interface MessageStage {
        /**
         * <p>Error message</p>
         */
        SequenceNumberStage message(@NotNull String message);
    }

    public interface SequenceNumberStage {
        /**
         * <p>Sequence number of the event</p>
         */
        _FinalStage sequenceNumber(double sequenceNumber);
    }

    public interface _FinalStage {
        ResponseErrorEvent build();

        /**
         * <p>Parameter that caused the error</p>
         */
        _FinalStage param(Optional<String> param);

        _FinalStage param(String param);

        _FinalStage param(Nullable<String> param);
    }

    @JsonIgnoreProperties(ignoreUnknown = true)
    public static final class Builder implements CodeStage, MessageStage, SequenceNumberStage, _FinalStage {
        private String code;

        private String message;

        private double sequenceNumber;

        private Optional<String> param = Optional.empty();

        @JsonAnySetter
        private Map<String, Object> additionalProperties = new HashMap<>();

        private Builder() {}

        @java.lang.Override
        public Builder from(ResponseErrorEvent other) {
            code(other.getCode());
            message(other.getMessage());
            param(other.getParam());
            sequenceNumber(other.getSequenceNumber());
            return this;
        }

        /**
         * <p>Error code</p>
         * <p>Error code</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        @JsonSetter("code")
        public MessageStage code(@NotNull String code) {
            this.code = Objects.requireNonNull(code, "code must not be null");
            return this;
        }

        /**
         * <p>Error message</p>
         * <p>Error message</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        @JsonSetter("message")
        public SequenceNumberStage message(@NotNull String message) {
            this.message = Objects.requireNonNull(message, "message must not be null");
            return this;
        }

        /**
         * <p>Sequence number of the event</p>
         * <p>Sequence number of the event</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        @JsonSetter("sequence_number")
        public _FinalStage sequenceNumber(double sequenceNumber) {
            this.sequenceNumber = sequenceNumber;
            return this;
        }

        /**
         * <p>Parameter that caused the error</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        public _FinalStage param(Nullable<String> param) {
            if (param.isNull()) {
                this.param = null;
            } else if (param.isEmpty()) {
                this.param = Optional.empty();
            } else {
                this.param = Optional.of(param.get());
            }
            return this;
        }

        /**
         * <p>Parameter that caused the error</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        public _FinalStage param(String param) {
            this.param = Optional.ofNullable(param);
            return this;
        }

        /**
         * <p>Parameter that caused the error</p>
         */
        @java.lang.Override
        @JsonSetter(value = "param", nulls = Nulls.SKIP)
        public _FinalStage param(Optional<String> param) {
            this.param = param;
            return this;
        }

        @java.lang.Override
        public ResponseErrorEvent build() {
            return new ResponseErrorEvent(code, message, param, sequenceNumber, additionalProperties);
        }
    }
}
