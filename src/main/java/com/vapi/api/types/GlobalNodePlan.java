/**
 * This file was auto-generated by Fern from our API Definition.
 */
package com.vapi.api.types;

import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.annotation.Nulls;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.vapi.api.core.ObjectMappers;
import java.util.HashMap;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;

@JsonInclude(JsonInclude.Include.NON_ABSENT)
@JsonDeserialize(builder = GlobalNodePlan.Builder.class)
public final class GlobalNodePlan {
    private final Optional<Boolean> enabled;

    private final Optional<String> enterCondition;

    private final Map<String, Object> additionalProperties;

    private GlobalNodePlan(
            Optional<Boolean> enabled, Optional<String> enterCondition, Map<String, Object> additionalProperties) {
        this.enabled = enabled;
        this.enterCondition = enterCondition;
        this.additionalProperties = additionalProperties;
    }

    /**
     * @return This is the flag to determine if this node is a global node
     * <p>@default false</p>
     */
    @JsonProperty("enabled")
    public Optional<Boolean> getEnabled() {
        return enabled;
    }

    /**
     * @return This is the condition that will be checked to determine if the global node should be executed.
     * <p>@default ''</p>
     */
    @JsonProperty("enterCondition")
    public Optional<String> getEnterCondition() {
        return enterCondition;
    }

    @java.lang.Override
    public boolean equals(Object other) {
        if (this == other) return true;
        return other instanceof GlobalNodePlan && equalTo((GlobalNodePlan) other);
    }

    @JsonAnyGetter
    public Map<String, Object> getAdditionalProperties() {
        return this.additionalProperties;
    }

    private boolean equalTo(GlobalNodePlan other) {
        return enabled.equals(other.enabled) && enterCondition.equals(other.enterCondition);
    }

    @java.lang.Override
    public int hashCode() {
        return Objects.hash(this.enabled, this.enterCondition);
    }

    @java.lang.Override
    public String toString() {
        return ObjectMappers.stringify(this);
    }

    public static Builder builder() {
        return new Builder();
    }

    @JsonIgnoreProperties(ignoreUnknown = true)
    public static final class Builder {
        private Optional<Boolean> enabled = Optional.empty();

        private Optional<String> enterCondition = Optional.empty();

        @JsonAnySetter
        private Map<String, Object> additionalProperties = new HashMap<>();

        private Builder() {}

        public Builder from(GlobalNodePlan other) {
            enabled(other.getEnabled());
            enterCondition(other.getEnterCondition());
            return this;
        }

        /**
         * <p>This is the flag to determine if this node is a global node</p>
         * <p>@default false</p>
         */
        @JsonSetter(value = "enabled", nulls = Nulls.SKIP)
        public Builder enabled(Optional<Boolean> enabled) {
            this.enabled = enabled;
            return this;
        }

        public Builder enabled(Boolean enabled) {
            this.enabled = Optional.ofNullable(enabled);
            return this;
        }

        /**
         * <p>This is the condition that will be checked to determine if the global node should be executed.</p>
         * <p>@default ''</p>
         */
        @JsonSetter(value = "enterCondition", nulls = Nulls.SKIP)
        public Builder enterCondition(Optional<String> enterCondition) {
            this.enterCondition = enterCondition;
            return this;
        }

        public Builder enterCondition(String enterCondition) {
            this.enterCondition = Optional.ofNullable(enterCondition);
            return this;
        }

        public GlobalNodePlan build() {
            return new GlobalNodePlan(enabled, enterCondition, additionalProperties);
        }
    }
}
