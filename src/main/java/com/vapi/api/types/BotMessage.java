/**
 * This file was auto-generated by Fern from our API Definition.
 */
package com.vapi.api.types;

import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.annotation.Nulls;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.vapi.api.core.ObjectMappers;
import java.util.HashMap;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import org.jetbrains.annotations.NotNull;

@JsonInclude(JsonInclude.Include.NON_ABSENT)
@JsonDeserialize(builder = BotMessage.Builder.class)
public final class BotMessage {
    private final String role;

    private final String message;

    private final double time;

    private final double endTime;

    private final double secondsFromStart;

    private final Optional<String> source;

    private final Optional<Double> duration;

    private final Map<String, Object> additionalProperties;

    private BotMessage(
            String role,
            String message,
            double time,
            double endTime,
            double secondsFromStart,
            Optional<String> source,
            Optional<Double> duration,
            Map<String, Object> additionalProperties) {
        this.role = role;
        this.message = message;
        this.time = time;
        this.endTime = endTime;
        this.secondsFromStart = secondsFromStart;
        this.source = source;
        this.duration = duration;
        this.additionalProperties = additionalProperties;
    }

    /**
     * @return The role of the bot in the conversation.
     */
    @JsonProperty("role")
    public String getRole() {
        return role;
    }

    /**
     * @return The message content from the bot.
     */
    @JsonProperty("message")
    public String getMessage() {
        return message;
    }

    /**
     * @return The timestamp when the message was sent.
     */
    @JsonProperty("time")
    public double getTime() {
        return time;
    }

    /**
     * @return The timestamp when the message ended.
     */
    @JsonProperty("endTime")
    public double getEndTime() {
        return endTime;
    }

    /**
     * @return The number of seconds from the start of the conversation.
     */
    @JsonProperty("secondsFromStart")
    public double getSecondsFromStart() {
        return secondsFromStart;
    }

    /**
     * @return The source of the message.
     */
    @JsonProperty("source")
    public Optional<String> getSource() {
        return source;
    }

    /**
     * @return The duration of the message in seconds.
     */
    @JsonProperty("duration")
    public Optional<Double> getDuration() {
        return duration;
    }

    @java.lang.Override
    public boolean equals(Object other) {
        if (this == other) return true;
        return other instanceof BotMessage && equalTo((BotMessage) other);
    }

    @JsonAnyGetter
    public Map<String, Object> getAdditionalProperties() {
        return this.additionalProperties;
    }

    private boolean equalTo(BotMessage other) {
        return role.equals(other.role)
                && message.equals(other.message)
                && time == other.time
                && endTime == other.endTime
                && secondsFromStart == other.secondsFromStart
                && source.equals(other.source)
                && duration.equals(other.duration);
    }

    @java.lang.Override
    public int hashCode() {
        return Objects.hash(
                this.role, this.message, this.time, this.endTime, this.secondsFromStart, this.source, this.duration);
    }

    @java.lang.Override
    public String toString() {
        return ObjectMappers.stringify(this);
    }

    public static RoleStage builder() {
        return new Builder();
    }

    public interface RoleStage {
        /**
         * <p>The role of the bot in the conversation.</p>
         */
        MessageStage role(@NotNull String role);

        Builder from(BotMessage other);
    }

    public interface MessageStage {
        /**
         * <p>The message content from the bot.</p>
         */
        TimeStage message(@NotNull String message);
    }

    public interface TimeStage {
        /**
         * <p>The timestamp when the message was sent.</p>
         */
        EndTimeStage time(double time);
    }

    public interface EndTimeStage {
        /**
         * <p>The timestamp when the message ended.</p>
         */
        SecondsFromStartStage endTime(double endTime);
    }

    public interface SecondsFromStartStage {
        /**
         * <p>The number of seconds from the start of the conversation.</p>
         */
        _FinalStage secondsFromStart(double secondsFromStart);
    }

    public interface _FinalStage {
        BotMessage build();

        /**
         * <p>The source of the message.</p>
         */
        _FinalStage source(Optional<String> source);

        _FinalStage source(String source);

        /**
         * <p>The duration of the message in seconds.</p>
         */
        _FinalStage duration(Optional<Double> duration);

        _FinalStage duration(Double duration);
    }

    @JsonIgnoreProperties(ignoreUnknown = true)
    public static final class Builder
            implements RoleStage, MessageStage, TimeStage, EndTimeStage, SecondsFromStartStage, _FinalStage {
        private String role;

        private String message;

        private double time;

        private double endTime;

        private double secondsFromStart;

        private Optional<Double> duration = Optional.empty();

        private Optional<String> source = Optional.empty();

        @JsonAnySetter
        private Map<String, Object> additionalProperties = new HashMap<>();

        private Builder() {}

        @java.lang.Override
        public Builder from(BotMessage other) {
            role(other.getRole());
            message(other.getMessage());
            time(other.getTime());
            endTime(other.getEndTime());
            secondsFromStart(other.getSecondsFromStart());
            source(other.getSource());
            duration(other.getDuration());
            return this;
        }

        /**
         * <p>The role of the bot in the conversation.</p>
         * <p>The role of the bot in the conversation.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        @JsonSetter("role")
        public MessageStage role(@NotNull String role) {
            this.role = Objects.requireNonNull(role, "role must not be null");
            return this;
        }

        /**
         * <p>The message content from the bot.</p>
         * <p>The message content from the bot.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        @JsonSetter("message")
        public TimeStage message(@NotNull String message) {
            this.message = Objects.requireNonNull(message, "message must not be null");
            return this;
        }

        /**
         * <p>The timestamp when the message was sent.</p>
         * <p>The timestamp when the message was sent.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        @JsonSetter("time")
        public EndTimeStage time(double time) {
            this.time = time;
            return this;
        }

        /**
         * <p>The timestamp when the message ended.</p>
         * <p>The timestamp when the message ended.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        @JsonSetter("endTime")
        public SecondsFromStartStage endTime(double endTime) {
            this.endTime = endTime;
            return this;
        }

        /**
         * <p>The number of seconds from the start of the conversation.</p>
         * <p>The number of seconds from the start of the conversation.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        @JsonSetter("secondsFromStart")
        public _FinalStage secondsFromStart(double secondsFromStart) {
            this.secondsFromStart = secondsFromStart;
            return this;
        }

        /**
         * <p>The duration of the message in seconds.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        public _FinalStage duration(Double duration) {
            this.duration = Optional.ofNullable(duration);
            return this;
        }

        /**
         * <p>The duration of the message in seconds.</p>
         */
        @java.lang.Override
        @JsonSetter(value = "duration", nulls = Nulls.SKIP)
        public _FinalStage duration(Optional<Double> duration) {
            this.duration = duration;
            return this;
        }

        /**
         * <p>The source of the message.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        public _FinalStage source(String source) {
            this.source = Optional.ofNullable(source);
            return this;
        }

        /**
         * <p>The source of the message.</p>
         */
        @java.lang.Override
        @JsonSetter(value = "source", nulls = Nulls.SKIP)
        public _FinalStage source(Optional<String> source) {
            this.source = source;
            return this;
        }

        @java.lang.Override
        public BotMessage build() {
            return new BotMessage(
                    role, message, time, endTime, secondsFromStart, source, duration, additionalProperties);
        }
    }
}
