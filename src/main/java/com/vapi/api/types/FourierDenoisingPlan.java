/**
 * This file was auto-generated by Fern from our API Definition.
 */
package com.vapi.api.types;

import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.annotation.Nulls;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.vapi.api.core.ObjectMappers;
import java.util.HashMap;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;

@JsonInclude(JsonInclude.Include.NON_ABSENT)
@JsonDeserialize(builder = FourierDenoisingPlan.Builder.class)
public final class FourierDenoisingPlan {
    private final Optional<Boolean> enabled;

    private final Optional<Boolean> mediaDetectionEnabled;

    private final Optional<Double> staticThreshold;

    private final Optional<Double> baselineOffsetDb;

    private final Optional<Double> windowSizeMs;

    private final Optional<Double> baselinePercentile;

    private final Map<String, Object> additionalProperties;

    private FourierDenoisingPlan(
            Optional<Boolean> enabled,
            Optional<Boolean> mediaDetectionEnabled,
            Optional<Double> staticThreshold,
            Optional<Double> baselineOffsetDb,
            Optional<Double> windowSizeMs,
            Optional<Double> baselinePercentile,
            Map<String, Object> additionalProperties) {
        this.enabled = enabled;
        this.mediaDetectionEnabled = mediaDetectionEnabled;
        this.staticThreshold = staticThreshold;
        this.baselineOffsetDb = baselineOffsetDb;
        this.windowSizeMs = windowSizeMs;
        this.baselinePercentile = baselinePercentile;
        this.additionalProperties = additionalProperties;
    }

    /**
     * @return Whether Fourier denoising is enabled. Note that this is experimental and may not work as expected.
     */
    @JsonProperty("enabled")
    public Optional<Boolean> getEnabled() {
        return enabled;
    }

    /**
     * @return Whether automatic media detection is enabled. When enabled, the filter will automatically
     * detect consistent background TV/music/radio and switch to more aggressive filtering settings.
     * Only applies when enabled is true.
     */
    @JsonProperty("mediaDetectionEnabled")
    public Optional<Boolean> getMediaDetectionEnabled() {
        return mediaDetectionEnabled;
    }

    /**
     * @return Static threshold in dB used as fallback when no baseline is established.
     */
    @JsonProperty("staticThreshold")
    public Optional<Double> getStaticThreshold() {
        return staticThreshold;
    }

    /**
     * @return How far below the rolling baseline to filter audio, in dB.
     * Lower values (e.g., -10) are more aggressive, higher values (e.g., -20) are more conservative.
     */
    @JsonProperty("baselineOffsetDb")
    public Optional<Double> getBaselineOffsetDb() {
        return baselineOffsetDb;
    }

    /**
     * @return Rolling window size in milliseconds for calculating the audio baseline.
     * Larger windows adapt more slowly but are more stable.
     */
    @JsonProperty("windowSizeMs")
    public Optional<Double> getWindowSizeMs() {
        return windowSizeMs;
    }

    /**
     * @return Percentile to use for baseline calculation (1-99).
     * Higher percentiles (e.g., 85) focus on louder speech, lower percentiles (e.g., 50) include quieter speech.
     */
    @JsonProperty("baselinePercentile")
    public Optional<Double> getBaselinePercentile() {
        return baselinePercentile;
    }

    @java.lang.Override
    public boolean equals(Object other) {
        if (this == other) return true;
        return other instanceof FourierDenoisingPlan && equalTo((FourierDenoisingPlan) other);
    }

    @JsonAnyGetter
    public Map<String, Object> getAdditionalProperties() {
        return this.additionalProperties;
    }

    private boolean equalTo(FourierDenoisingPlan other) {
        return enabled.equals(other.enabled)
                && mediaDetectionEnabled.equals(other.mediaDetectionEnabled)
                && staticThreshold.equals(other.staticThreshold)
                && baselineOffsetDb.equals(other.baselineOffsetDb)
                && windowSizeMs.equals(other.windowSizeMs)
                && baselinePercentile.equals(other.baselinePercentile);
    }

    @java.lang.Override
    public int hashCode() {
        return Objects.hash(
                this.enabled,
                this.mediaDetectionEnabled,
                this.staticThreshold,
                this.baselineOffsetDb,
                this.windowSizeMs,
                this.baselinePercentile);
    }

    @java.lang.Override
    public String toString() {
        return ObjectMappers.stringify(this);
    }

    public static Builder builder() {
        return new Builder();
    }

    @JsonIgnoreProperties(ignoreUnknown = true)
    public static final class Builder {
        private Optional<Boolean> enabled = Optional.empty();

        private Optional<Boolean> mediaDetectionEnabled = Optional.empty();

        private Optional<Double> staticThreshold = Optional.empty();

        private Optional<Double> baselineOffsetDb = Optional.empty();

        private Optional<Double> windowSizeMs = Optional.empty();

        private Optional<Double> baselinePercentile = Optional.empty();

        @JsonAnySetter
        private Map<String, Object> additionalProperties = new HashMap<>();

        private Builder() {}

        public Builder from(FourierDenoisingPlan other) {
            enabled(other.getEnabled());
            mediaDetectionEnabled(other.getMediaDetectionEnabled());
            staticThreshold(other.getStaticThreshold());
            baselineOffsetDb(other.getBaselineOffsetDb());
            windowSizeMs(other.getWindowSizeMs());
            baselinePercentile(other.getBaselinePercentile());
            return this;
        }

        /**
         * <p>Whether Fourier denoising is enabled. Note that this is experimental and may not work as expected.</p>
         */
        @JsonSetter(value = "enabled", nulls = Nulls.SKIP)
        public Builder enabled(Optional<Boolean> enabled) {
            this.enabled = enabled;
            return this;
        }

        public Builder enabled(Boolean enabled) {
            this.enabled = Optional.ofNullable(enabled);
            return this;
        }

        /**
         * <p>Whether automatic media detection is enabled. When enabled, the filter will automatically
         * detect consistent background TV/music/radio and switch to more aggressive filtering settings.
         * Only applies when enabled is true.</p>
         */
        @JsonSetter(value = "mediaDetectionEnabled", nulls = Nulls.SKIP)
        public Builder mediaDetectionEnabled(Optional<Boolean> mediaDetectionEnabled) {
            this.mediaDetectionEnabled = mediaDetectionEnabled;
            return this;
        }

        public Builder mediaDetectionEnabled(Boolean mediaDetectionEnabled) {
            this.mediaDetectionEnabled = Optional.ofNullable(mediaDetectionEnabled);
            return this;
        }

        /**
         * <p>Static threshold in dB used as fallback when no baseline is established.</p>
         */
        @JsonSetter(value = "staticThreshold", nulls = Nulls.SKIP)
        public Builder staticThreshold(Optional<Double> staticThreshold) {
            this.staticThreshold = staticThreshold;
            return this;
        }

        public Builder staticThreshold(Double staticThreshold) {
            this.staticThreshold = Optional.ofNullable(staticThreshold);
            return this;
        }

        /**
         * <p>How far below the rolling baseline to filter audio, in dB.
         * Lower values (e.g., -10) are more aggressive, higher values (e.g., -20) are more conservative.</p>
         */
        @JsonSetter(value = "baselineOffsetDb", nulls = Nulls.SKIP)
        public Builder baselineOffsetDb(Optional<Double> baselineOffsetDb) {
            this.baselineOffsetDb = baselineOffsetDb;
            return this;
        }

        public Builder baselineOffsetDb(Double baselineOffsetDb) {
            this.baselineOffsetDb = Optional.ofNullable(baselineOffsetDb);
            return this;
        }

        /**
         * <p>Rolling window size in milliseconds for calculating the audio baseline.
         * Larger windows adapt more slowly but are more stable.</p>
         */
        @JsonSetter(value = "windowSizeMs", nulls = Nulls.SKIP)
        public Builder windowSizeMs(Optional<Double> windowSizeMs) {
            this.windowSizeMs = windowSizeMs;
            return this;
        }

        public Builder windowSizeMs(Double windowSizeMs) {
            this.windowSizeMs = Optional.ofNullable(windowSizeMs);
            return this;
        }

        /**
         * <p>Percentile to use for baseline calculation (1-99).
         * Higher percentiles (e.g., 85) focus on louder speech, lower percentiles (e.g., 50) include quieter speech.</p>
         */
        @JsonSetter(value = "baselinePercentile", nulls = Nulls.SKIP)
        public Builder baselinePercentile(Optional<Double> baselinePercentile) {
            this.baselinePercentile = baselinePercentile;
            return this;
        }

        public Builder baselinePercentile(Double baselinePercentile) {
            this.baselinePercentile = Optional.ofNullable(baselinePercentile);
            return this;
        }

        public FourierDenoisingPlan build() {
            return new FourierDenoisingPlan(
                    enabled,
                    mediaDetectionEnabled,
                    staticThreshold,
                    baselineOffsetDb,
                    windowSizeMs,
                    baselinePercentile,
                    additionalProperties);
        }
    }
}
