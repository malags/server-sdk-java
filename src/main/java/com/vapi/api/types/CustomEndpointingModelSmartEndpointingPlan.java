/**
 * This file was auto-generated by Fern from our API Definition.
 */
package com.vapi.api.types;

import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.annotation.Nulls;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.vapi.api.core.ObjectMappers;
import java.util.HashMap;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import org.jetbrains.annotations.NotNull;

@JsonInclude(JsonInclude.Include.NON_ABSENT)
@JsonDeserialize(builder = CustomEndpointingModelSmartEndpointingPlan.Builder.class)
public final class CustomEndpointingModelSmartEndpointingPlan {
    private final CustomEndpointingModelSmartEndpointingPlanProvider provider;

    private final Optional<Server> server;

    private final Map<String, Object> additionalProperties;

    private CustomEndpointingModelSmartEndpointingPlan(
            CustomEndpointingModelSmartEndpointingPlanProvider provider,
            Optional<Server> server,
            Map<String, Object> additionalProperties) {
        this.provider = provider;
        this.server = server;
        this.additionalProperties = additionalProperties;
    }

    /**
     * @return This is the provider for the smart endpointing plan. Use <code>custom-endpointing-model</code> for custom endpointing providers that are not natively supported.
     */
    @JsonProperty("provider")
    public CustomEndpointingModelSmartEndpointingPlanProvider getProvider() {
        return provider;
    }

    /**
     * @return This is where the endpointing request will be sent. If not provided, will be sent to <code>assistant.server</code>. If that does not exist either, will be sent to <code>org.server</code>.
     * <p>Request Example:</p>
     * <p>POST https://{server.url}
     * Content-Type: application/json</p>
     * <p>{
     * &quot;message&quot;: {
     * &quot;type&quot;: &quot;call.endpointing.request&quot;,
     * &quot;messages&quot;: [
     * {
     * &quot;role&quot;: &quot;user&quot;,
     * &quot;message&quot;: &quot;Hello, how are you?&quot;,
     * &quot;time&quot;: 1234567890,
     * &quot;secondsFromStart&quot;: 0
     * }
     * ],
     * ...other metadata about the call...
     * }
     * }</p>
     * <p>Response Expected:
     * {
     * &quot;timeoutSeconds&quot;: 0.5
     * }</p>
     * <p>The timeout is the number of seconds to wait before considering the user's speech as finished. The endpointing timeout is automatically reset each time a new transcript is received (and another <code>call.endpointing.request</code> is sent).</p>
     */
    @JsonProperty("server")
    public Optional<Server> getServer() {
        return server;
    }

    @java.lang.Override
    public boolean equals(Object other) {
        if (this == other) return true;
        return other instanceof CustomEndpointingModelSmartEndpointingPlan
                && equalTo((CustomEndpointingModelSmartEndpointingPlan) other);
    }

    @JsonAnyGetter
    public Map<String, Object> getAdditionalProperties() {
        return this.additionalProperties;
    }

    private boolean equalTo(CustomEndpointingModelSmartEndpointingPlan other) {
        return provider.equals(other.provider) && server.equals(other.server);
    }

    @java.lang.Override
    public int hashCode() {
        return Objects.hash(this.provider, this.server);
    }

    @java.lang.Override
    public String toString() {
        return ObjectMappers.stringify(this);
    }

    public static ProviderStage builder() {
        return new Builder();
    }

    public interface ProviderStage {
        /**
         * <p>This is the provider for the smart endpointing plan. Use <code>custom-endpointing-model</code> for custom endpointing providers that are not natively supported.</p>
         */
        _FinalStage provider(@NotNull CustomEndpointingModelSmartEndpointingPlanProvider provider);

        Builder from(CustomEndpointingModelSmartEndpointingPlan other);
    }

    public interface _FinalStage {
        CustomEndpointingModelSmartEndpointingPlan build();

        /**
         * <p>This is where the endpointing request will be sent. If not provided, will be sent to <code>assistant.server</code>. If that does not exist either, will be sent to <code>org.server</code>.</p>
         * <p>Request Example:</p>
         * <p>POST https://{server.url}
         * Content-Type: application/json</p>
         * <p>{
         * &quot;message&quot;: {
         * &quot;type&quot;: &quot;call.endpointing.request&quot;,
         * &quot;messages&quot;: [
         * {
         * &quot;role&quot;: &quot;user&quot;,
         * &quot;message&quot;: &quot;Hello, how are you?&quot;,
         * &quot;time&quot;: 1234567890,
         * &quot;secondsFromStart&quot;: 0
         * }
         * ],
         * ...other metadata about the call...
         * }
         * }</p>
         * <p>Response Expected:
         * {
         * &quot;timeoutSeconds&quot;: 0.5
         * }</p>
         * <p>The timeout is the number of seconds to wait before considering the user's speech as finished. The endpointing timeout is automatically reset each time a new transcript is received (and another <code>call.endpointing.request</code> is sent).</p>
         */
        _FinalStage server(Optional<Server> server);

        _FinalStage server(Server server);
    }

    @JsonIgnoreProperties(ignoreUnknown = true)
    public static final class Builder implements ProviderStage, _FinalStage {
        private CustomEndpointingModelSmartEndpointingPlanProvider provider;

        private Optional<Server> server = Optional.empty();

        @JsonAnySetter
        private Map<String, Object> additionalProperties = new HashMap<>();

        private Builder() {}

        @java.lang.Override
        public Builder from(CustomEndpointingModelSmartEndpointingPlan other) {
            provider(other.getProvider());
            server(other.getServer());
            return this;
        }

        /**
         * <p>This is the provider for the smart endpointing plan. Use <code>custom-endpointing-model</code> for custom endpointing providers that are not natively supported.</p>
         * <p>This is the provider for the smart endpointing plan. Use <code>custom-endpointing-model</code> for custom endpointing providers that are not natively supported.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        @JsonSetter("provider")
        public _FinalStage provider(@NotNull CustomEndpointingModelSmartEndpointingPlanProvider provider) {
            this.provider = Objects.requireNonNull(provider, "provider must not be null");
            return this;
        }

        /**
         * <p>This is where the endpointing request will be sent. If not provided, will be sent to <code>assistant.server</code>. If that does not exist either, will be sent to <code>org.server</code>.</p>
         * <p>Request Example:</p>
         * <p>POST https://{server.url}
         * Content-Type: application/json</p>
         * <p>{
         * &quot;message&quot;: {
         * &quot;type&quot;: &quot;call.endpointing.request&quot;,
         * &quot;messages&quot;: [
         * {
         * &quot;role&quot;: &quot;user&quot;,
         * &quot;message&quot;: &quot;Hello, how are you?&quot;,
         * &quot;time&quot;: 1234567890,
         * &quot;secondsFromStart&quot;: 0
         * }
         * ],
         * ...other metadata about the call...
         * }
         * }</p>
         * <p>Response Expected:
         * {
         * &quot;timeoutSeconds&quot;: 0.5
         * }</p>
         * <p>The timeout is the number of seconds to wait before considering the user's speech as finished. The endpointing timeout is automatically reset each time a new transcript is received (and another <code>call.endpointing.request</code> is sent).</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        public _FinalStage server(Server server) {
            this.server = Optional.ofNullable(server);
            return this;
        }

        /**
         * <p>This is where the endpointing request will be sent. If not provided, will be sent to <code>assistant.server</code>. If that does not exist either, will be sent to <code>org.server</code>.</p>
         * <p>Request Example:</p>
         * <p>POST https://{server.url}
         * Content-Type: application/json</p>
         * <p>{
         * &quot;message&quot;: {
         * &quot;type&quot;: &quot;call.endpointing.request&quot;,
         * &quot;messages&quot;: [
         * {
         * &quot;role&quot;: &quot;user&quot;,
         * &quot;message&quot;: &quot;Hello, how are you?&quot;,
         * &quot;time&quot;: 1234567890,
         * &quot;secondsFromStart&quot;: 0
         * }
         * ],
         * ...other metadata about the call...
         * }
         * }</p>
         * <p>Response Expected:
         * {
         * &quot;timeoutSeconds&quot;: 0.5
         * }</p>
         * <p>The timeout is the number of seconds to wait before considering the user's speech as finished. The endpointing timeout is automatically reset each time a new transcript is received (and another <code>call.endpointing.request</code> is sent).</p>
         */
        @java.lang.Override
        @JsonSetter(value = "server", nulls = Nulls.SKIP)
        public _FinalStage server(Optional<Server> server) {
            this.server = server;
            return this;
        }

        @java.lang.Override
        public CustomEndpointingModelSmartEndpointingPlan build() {
            return new CustomEndpointingModelSmartEndpointingPlan(provider, server, additionalProperties);
        }
    }
}
