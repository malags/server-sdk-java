/**
 * This file was auto-generated by Fern from our API Definition.
 */
package com.vapi.api.types;

import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.annotation.Nulls;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.vapi.api.core.ObjectMappers;
import java.util.HashMap;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;

@JsonInclude(JsonInclude.Include.NON_ABSENT)
@JsonDeserialize(builder = GoogleRealtimeConfig.Builder.class)
public final class GoogleRealtimeConfig {
    private final Optional<Double> topP;

    private final Optional<Double> topK;

    private final Optional<Double> presencePenalty;

    private final Optional<Double> frequencyPenalty;

    private final Optional<GeminiMultimodalLiveSpeechConfig> speechConfig;

    private final Map<String, Object> additionalProperties;

    private GoogleRealtimeConfig(
            Optional<Double> topP,
            Optional<Double> topK,
            Optional<Double> presencePenalty,
            Optional<Double> frequencyPenalty,
            Optional<GeminiMultimodalLiveSpeechConfig> speechConfig,
            Map<String, Object> additionalProperties) {
        this.topP = topP;
        this.topK = topK;
        this.presencePenalty = presencePenalty;
        this.frequencyPenalty = frequencyPenalty;
        this.speechConfig = speechConfig;
        this.additionalProperties = additionalProperties;
    }

    /**
     * @return This is the nucleus sampling parameter that controls the cumulative probability of tokens considered during text generation.
     * Only applicable with the Gemini Flash 2.0 Multimodal Live API.
     */
    @JsonProperty("topP")
    public Optional<Double> getTopP() {
        return topP;
    }

    /**
     * @return This is the top-k sampling parameter that limits the number of highest probability tokens considered during text generation.
     * Only applicable with the Gemini Flash 2.0 Multimodal Live API.
     */
    @JsonProperty("topK")
    public Optional<Double> getTopK() {
        return topK;
    }

    /**
     * @return This is the presence penalty parameter that influences the model's likelihood to repeat information by penalizing tokens based on their presence in the text.
     * Only applicable with the Gemini Flash 2.0 Multimodal Live API.
     */
    @JsonProperty("presencePenalty")
    public Optional<Double> getPresencePenalty() {
        return presencePenalty;
    }

    /**
     * @return This is the frequency penalty parameter that influences the model's likelihood to repeat tokens by penalizing them based on their frequency in the text.
     * Only applicable with the Gemini Flash 2.0 Multimodal Live API.
     */
    @JsonProperty("frequencyPenalty")
    public Optional<Double> getFrequencyPenalty() {
        return frequencyPenalty;
    }

    /**
     * @return This is the speech configuration object that defines the voice settings to be used for the model's speech output.
     * Only applicable with the Gemini Flash 2.0 Multimodal Live API.
     */
    @JsonProperty("speechConfig")
    public Optional<GeminiMultimodalLiveSpeechConfig> getSpeechConfig() {
        return speechConfig;
    }

    @java.lang.Override
    public boolean equals(Object other) {
        if (this == other) return true;
        return other instanceof GoogleRealtimeConfig && equalTo((GoogleRealtimeConfig) other);
    }

    @JsonAnyGetter
    public Map<String, Object> getAdditionalProperties() {
        return this.additionalProperties;
    }

    private boolean equalTo(GoogleRealtimeConfig other) {
        return topP.equals(other.topP)
                && topK.equals(other.topK)
                && presencePenalty.equals(other.presencePenalty)
                && frequencyPenalty.equals(other.frequencyPenalty)
                && speechConfig.equals(other.speechConfig);
    }

    @java.lang.Override
    public int hashCode() {
        return Objects.hash(this.topP, this.topK, this.presencePenalty, this.frequencyPenalty, this.speechConfig);
    }

    @java.lang.Override
    public String toString() {
        return ObjectMappers.stringify(this);
    }

    public static Builder builder() {
        return new Builder();
    }

    @JsonIgnoreProperties(ignoreUnknown = true)
    public static final class Builder {
        private Optional<Double> topP = Optional.empty();

        private Optional<Double> topK = Optional.empty();

        private Optional<Double> presencePenalty = Optional.empty();

        private Optional<Double> frequencyPenalty = Optional.empty();

        private Optional<GeminiMultimodalLiveSpeechConfig> speechConfig = Optional.empty();

        @JsonAnySetter
        private Map<String, Object> additionalProperties = new HashMap<>();

        private Builder() {}

        public Builder from(GoogleRealtimeConfig other) {
            topP(other.getTopP());
            topK(other.getTopK());
            presencePenalty(other.getPresencePenalty());
            frequencyPenalty(other.getFrequencyPenalty());
            speechConfig(other.getSpeechConfig());
            return this;
        }

        /**
         * <p>This is the nucleus sampling parameter that controls the cumulative probability of tokens considered during text generation.
         * Only applicable with the Gemini Flash 2.0 Multimodal Live API.</p>
         */
        @JsonSetter(value = "topP", nulls = Nulls.SKIP)
        public Builder topP(Optional<Double> topP) {
            this.topP = topP;
            return this;
        }

        public Builder topP(Double topP) {
            this.topP = Optional.ofNullable(topP);
            return this;
        }

        /**
         * <p>This is the top-k sampling parameter that limits the number of highest probability tokens considered during text generation.
         * Only applicable with the Gemini Flash 2.0 Multimodal Live API.</p>
         */
        @JsonSetter(value = "topK", nulls = Nulls.SKIP)
        public Builder topK(Optional<Double> topK) {
            this.topK = topK;
            return this;
        }

        public Builder topK(Double topK) {
            this.topK = Optional.ofNullable(topK);
            return this;
        }

        /**
         * <p>This is the presence penalty parameter that influences the model's likelihood to repeat information by penalizing tokens based on their presence in the text.
         * Only applicable with the Gemini Flash 2.0 Multimodal Live API.</p>
         */
        @JsonSetter(value = "presencePenalty", nulls = Nulls.SKIP)
        public Builder presencePenalty(Optional<Double> presencePenalty) {
            this.presencePenalty = presencePenalty;
            return this;
        }

        public Builder presencePenalty(Double presencePenalty) {
            this.presencePenalty = Optional.ofNullable(presencePenalty);
            return this;
        }

        /**
         * <p>This is the frequency penalty parameter that influences the model's likelihood to repeat tokens by penalizing them based on their frequency in the text.
         * Only applicable with the Gemini Flash 2.0 Multimodal Live API.</p>
         */
        @JsonSetter(value = "frequencyPenalty", nulls = Nulls.SKIP)
        public Builder frequencyPenalty(Optional<Double> frequencyPenalty) {
            this.frequencyPenalty = frequencyPenalty;
            return this;
        }

        public Builder frequencyPenalty(Double frequencyPenalty) {
            this.frequencyPenalty = Optional.ofNullable(frequencyPenalty);
            return this;
        }

        /**
         * <p>This is the speech configuration object that defines the voice settings to be used for the model's speech output.
         * Only applicable with the Gemini Flash 2.0 Multimodal Live API.</p>
         */
        @JsonSetter(value = "speechConfig", nulls = Nulls.SKIP)
        public Builder speechConfig(Optional<GeminiMultimodalLiveSpeechConfig> speechConfig) {
            this.speechConfig = speechConfig;
            return this;
        }

        public Builder speechConfig(GeminiMultimodalLiveSpeechConfig speechConfig) {
            this.speechConfig = Optional.ofNullable(speechConfig);
            return this;
        }

        public GoogleRealtimeConfig build() {
            return new GoogleRealtimeConfig(
                    topP, topK, presencePenalty, frequencyPenalty, speechConfig, additionalProperties);
        }
    }
}
