/**
 * This file was auto-generated by Fern from our API Definition.
 */
package com.vapi.api.types;

import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.annotation.Nulls;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.vapi.api.core.ObjectMappers;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import org.jetbrains.annotations.NotNull;

@JsonInclude(JsonInclude.Include.NON_ABSENT)
@JsonDeserialize(builder = JsonSchema.Builder.class)
public final class JsonSchema {
    private final JsonSchemaType type;

    private final Optional<Map<String, Object>> items;

    private final Optional<Map<String, Object>> properties;

    private final Optional<String> description;

    private final Optional<String> pattern;

    private final Optional<JsonSchemaFormat> format;

    private final Optional<List<String>> required;

    private final Optional<List<String>> enum_;

    private final Optional<String> title;

    private final Map<String, Object> additionalProperties;

    private JsonSchema(
            JsonSchemaType type,
            Optional<Map<String, Object>> items,
            Optional<Map<String, Object>> properties,
            Optional<String> description,
            Optional<String> pattern,
            Optional<JsonSchemaFormat> format,
            Optional<List<String>> required,
            Optional<List<String>> enum_,
            Optional<String> title,
            Map<String, Object> additionalProperties) {
        this.type = type;
        this.items = items;
        this.properties = properties;
        this.description = description;
        this.pattern = pattern;
        this.format = format;
        this.required = required;
        this.enum_ = enum_;
        this.title = title;
        this.additionalProperties = additionalProperties;
    }

    /**
     * @return This is the type of output you'd like.
     * <p><code>string</code>, <code>number</code>, <code>integer</code>, <code>boolean</code> are the primitive types and should be obvious.</p>
     * <p><code>array</code> and <code>object</code> are more interesting and quite powerful. They allow you to define nested structures.</p>
     * <p>For <code>array</code>, you can define the schema of the items in the array using the <code>items</code> property.</p>
     * <p>For <code>object</code>, you can define the properties of the object using the <code>properties</code> property.</p>
     */
    @JsonProperty("type")
    public JsonSchemaType getType() {
        return type;
    }

    /**
     * @return This is required if the type is &quot;array&quot;. This is the schema of the items in the array.
     * <p>This is of type JsonSchema. However, Swagger doesn't support circular references.</p>
     */
    @JsonProperty("items")
    public Optional<Map<String, Object>> getItems() {
        return items;
    }

    /**
     * @return This is required if the type is &quot;object&quot;. This specifies the properties of the object.
     * <p>This is a map of string to JsonSchema. However, Swagger doesn't support circular references.</p>
     */
    @JsonProperty("properties")
    public Optional<Map<String, Object>> getProperties() {
        return properties;
    }

    /**
     * @return This is the description to help the model understand what it needs to output.
     */
    @JsonProperty("description")
    public Optional<String> getDescription() {
        return description;
    }

    /**
     * @return This is the pattern of the string. This is a regex that will be used to validate the data in question. To use a common format, use the <code>format</code> property instead.
     * <p>OpenAI documentation: https://platform.openai.com/docs/guides/structured-outputs#supported-properties</p>
     */
    @JsonProperty("pattern")
    public Optional<String> getPattern() {
        return pattern;
    }

    /**
     * @return This is the format of the string. To pass a regex, use the <code>pattern</code> property instead.
     * <p>OpenAI documentation: https://platform.openai.com/docs/guides/structured-outputs?api-mode=chat&amp;type-restrictions=string-restrictions</p>
     */
    @JsonProperty("format")
    public Optional<JsonSchemaFormat> getFormat() {
        return format;
    }

    /**
     * @return This is a list of properties that are required.
     * <p>This only makes sense if the type is &quot;object&quot;.</p>
     */
    @JsonProperty("required")
    public Optional<List<String>> getRequired() {
        return required;
    }

    /**
     * @return This array specifies the allowed values that can be used to restrict the output of the model.
     */
    @JsonProperty("enum")
    public Optional<List<String>> getEnum() {
        return enum_;
    }

    /**
     * @return This is the title of the schema.
     */
    @JsonProperty("title")
    public Optional<String> getTitle() {
        return title;
    }

    @java.lang.Override
    public boolean equals(Object other) {
        if (this == other) return true;
        return other instanceof JsonSchema && equalTo((JsonSchema) other);
    }

    @JsonAnyGetter
    public Map<String, Object> getAdditionalProperties() {
        return this.additionalProperties;
    }

    private boolean equalTo(JsonSchema other) {
        return type.equals(other.type)
                && items.equals(other.items)
                && properties.equals(other.properties)
                && description.equals(other.description)
                && pattern.equals(other.pattern)
                && format.equals(other.format)
                && required.equals(other.required)
                && enum_.equals(other.enum_)
                && title.equals(other.title);
    }

    @java.lang.Override
    public int hashCode() {
        return Objects.hash(
                this.type,
                this.items,
                this.properties,
                this.description,
                this.pattern,
                this.format,
                this.required,
                this.enum_,
                this.title);
    }

    @java.lang.Override
    public String toString() {
        return ObjectMappers.stringify(this);
    }

    public static TypeStage builder() {
        return new Builder();
    }

    public interface TypeStage {
        /**
         * <p>This is the type of output you'd like.</p>
         * <p><code>string</code>, <code>number</code>, <code>integer</code>, <code>boolean</code> are the primitive types and should be obvious.</p>
         * <p><code>array</code> and <code>object</code> are more interesting and quite powerful. They allow you to define nested structures.</p>
         * <p>For <code>array</code>, you can define the schema of the items in the array using the <code>items</code> property.</p>
         * <p>For <code>object</code>, you can define the properties of the object using the <code>properties</code> property.</p>
         */
        _FinalStage type(@NotNull JsonSchemaType type);

        Builder from(JsonSchema other);
    }

    public interface _FinalStage {
        JsonSchema build();

        /**
         * <p>This is required if the type is &quot;array&quot;. This is the schema of the items in the array.</p>
         * <p>This is of type JsonSchema. However, Swagger doesn't support circular references.</p>
         */
        _FinalStage items(Optional<Map<String, Object>> items);

        _FinalStage items(Map<String, Object> items);

        /**
         * <p>This is required if the type is &quot;object&quot;. This specifies the properties of the object.</p>
         * <p>This is a map of string to JsonSchema. However, Swagger doesn't support circular references.</p>
         */
        _FinalStage properties(Optional<Map<String, Object>> properties);

        _FinalStage properties(Map<String, Object> properties);

        /**
         * <p>This is the description to help the model understand what it needs to output.</p>
         */
        _FinalStage description(Optional<String> description);

        _FinalStage description(String description);

        /**
         * <p>This is the pattern of the string. This is a regex that will be used to validate the data in question. To use a common format, use the <code>format</code> property instead.</p>
         * <p>OpenAI documentation: https://platform.openai.com/docs/guides/structured-outputs#supported-properties</p>
         */
        _FinalStage pattern(Optional<String> pattern);

        _FinalStage pattern(String pattern);

        /**
         * <p>This is the format of the string. To pass a regex, use the <code>pattern</code> property instead.</p>
         * <p>OpenAI documentation: https://platform.openai.com/docs/guides/structured-outputs?api-mode=chat&amp;type-restrictions=string-restrictions</p>
         */
        _FinalStage format(Optional<JsonSchemaFormat> format);

        _FinalStage format(JsonSchemaFormat format);

        /**
         * <p>This is a list of properties that are required.</p>
         * <p>This only makes sense if the type is &quot;object&quot;.</p>
         */
        _FinalStage required(Optional<List<String>> required);

        _FinalStage required(List<String> required);

        /**
         * <p>This array specifies the allowed values that can be used to restrict the output of the model.</p>
         */
        _FinalStage enum_(Optional<List<String>> enum_);

        _FinalStage enum_(List<String> enum_);

        /**
         * <p>This is the title of the schema.</p>
         */
        _FinalStage title(Optional<String> title);

        _FinalStage title(String title);
    }

    @JsonIgnoreProperties(ignoreUnknown = true)
    public static final class Builder implements TypeStage, _FinalStage {
        private JsonSchemaType type;

        private Optional<String> title = Optional.empty();

        private Optional<List<String>> enum_ = Optional.empty();

        private Optional<List<String>> required = Optional.empty();

        private Optional<JsonSchemaFormat> format = Optional.empty();

        private Optional<String> pattern = Optional.empty();

        private Optional<String> description = Optional.empty();

        private Optional<Map<String, Object>> properties = Optional.empty();

        private Optional<Map<String, Object>> items = Optional.empty();

        @JsonAnySetter
        private Map<String, Object> additionalProperties = new HashMap<>();

        private Builder() {}

        @java.lang.Override
        public Builder from(JsonSchema other) {
            type(other.getType());
            items(other.getItems());
            properties(other.getProperties());
            description(other.getDescription());
            pattern(other.getPattern());
            format(other.getFormat());
            required(other.getRequired());
            enum_(other.getEnum());
            title(other.getTitle());
            return this;
        }

        /**
         * <p>This is the type of output you'd like.</p>
         * <p><code>string</code>, <code>number</code>, <code>integer</code>, <code>boolean</code> are the primitive types and should be obvious.</p>
         * <p><code>array</code> and <code>object</code> are more interesting and quite powerful. They allow you to define nested structures.</p>
         * <p>For <code>array</code>, you can define the schema of the items in the array using the <code>items</code> property.</p>
         * <p>For <code>object</code>, you can define the properties of the object using the <code>properties</code> property.</p>
         * <p>This is the type of output you'd like.</p>
         * <p><code>string</code>, <code>number</code>, <code>integer</code>, <code>boolean</code> are the primitive types and should be obvious.</p>
         * <p><code>array</code> and <code>object</code> are more interesting and quite powerful. They allow you to define nested structures.</p>
         * <p>For <code>array</code>, you can define the schema of the items in the array using the <code>items</code> property.</p>
         * <p>For <code>object</code>, you can define the properties of the object using the <code>properties</code> property.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        @JsonSetter("type")
        public _FinalStage type(@NotNull JsonSchemaType type) {
            this.type = Objects.requireNonNull(type, "type must not be null");
            return this;
        }

        /**
         * <p>This is the title of the schema.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        public _FinalStage title(String title) {
            this.title = Optional.ofNullable(title);
            return this;
        }

        /**
         * <p>This is the title of the schema.</p>
         */
        @java.lang.Override
        @JsonSetter(value = "title", nulls = Nulls.SKIP)
        public _FinalStage title(Optional<String> title) {
            this.title = title;
            return this;
        }

        /**
         * <p>This array specifies the allowed values that can be used to restrict the output of the model.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        public _FinalStage enum_(List<String> enum_) {
            this.enum_ = Optional.ofNullable(enum_);
            return this;
        }

        /**
         * <p>This array specifies the allowed values that can be used to restrict the output of the model.</p>
         */
        @java.lang.Override
        @JsonSetter(value = "enum", nulls = Nulls.SKIP)
        public _FinalStage enum_(Optional<List<String>> enum_) {
            this.enum_ = enum_;
            return this;
        }

        /**
         * <p>This is a list of properties that are required.</p>
         * <p>This only makes sense if the type is &quot;object&quot;.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        public _FinalStage required(List<String> required) {
            this.required = Optional.ofNullable(required);
            return this;
        }

        /**
         * <p>This is a list of properties that are required.</p>
         * <p>This only makes sense if the type is &quot;object&quot;.</p>
         */
        @java.lang.Override
        @JsonSetter(value = "required", nulls = Nulls.SKIP)
        public _FinalStage required(Optional<List<String>> required) {
            this.required = required;
            return this;
        }

        /**
         * <p>This is the format of the string. To pass a regex, use the <code>pattern</code> property instead.</p>
         * <p>OpenAI documentation: https://platform.openai.com/docs/guides/structured-outputs?api-mode=chat&amp;type-restrictions=string-restrictions</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        public _FinalStage format(JsonSchemaFormat format) {
            this.format = Optional.ofNullable(format);
            return this;
        }

        /**
         * <p>This is the format of the string. To pass a regex, use the <code>pattern</code> property instead.</p>
         * <p>OpenAI documentation: https://platform.openai.com/docs/guides/structured-outputs?api-mode=chat&amp;type-restrictions=string-restrictions</p>
         */
        @java.lang.Override
        @JsonSetter(value = "format", nulls = Nulls.SKIP)
        public _FinalStage format(Optional<JsonSchemaFormat> format) {
            this.format = format;
            return this;
        }

        /**
         * <p>This is the pattern of the string. This is a regex that will be used to validate the data in question. To use a common format, use the <code>format</code> property instead.</p>
         * <p>OpenAI documentation: https://platform.openai.com/docs/guides/structured-outputs#supported-properties</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        public _FinalStage pattern(String pattern) {
            this.pattern = Optional.ofNullable(pattern);
            return this;
        }

        /**
         * <p>This is the pattern of the string. This is a regex that will be used to validate the data in question. To use a common format, use the <code>format</code> property instead.</p>
         * <p>OpenAI documentation: https://platform.openai.com/docs/guides/structured-outputs#supported-properties</p>
         */
        @java.lang.Override
        @JsonSetter(value = "pattern", nulls = Nulls.SKIP)
        public _FinalStage pattern(Optional<String> pattern) {
            this.pattern = pattern;
            return this;
        }

        /**
         * <p>This is the description to help the model understand what it needs to output.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        public _FinalStage description(String description) {
            this.description = Optional.ofNullable(description);
            return this;
        }

        /**
         * <p>This is the description to help the model understand what it needs to output.</p>
         */
        @java.lang.Override
        @JsonSetter(value = "description", nulls = Nulls.SKIP)
        public _FinalStage description(Optional<String> description) {
            this.description = description;
            return this;
        }

        /**
         * <p>This is required if the type is &quot;object&quot;. This specifies the properties of the object.</p>
         * <p>This is a map of string to JsonSchema. However, Swagger doesn't support circular references.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        public _FinalStage properties(Map<String, Object> properties) {
            this.properties = Optional.ofNullable(properties);
            return this;
        }

        /**
         * <p>This is required if the type is &quot;object&quot;. This specifies the properties of the object.</p>
         * <p>This is a map of string to JsonSchema. However, Swagger doesn't support circular references.</p>
         */
        @java.lang.Override
        @JsonSetter(value = "properties", nulls = Nulls.SKIP)
        public _FinalStage properties(Optional<Map<String, Object>> properties) {
            this.properties = properties;
            return this;
        }

        /**
         * <p>This is required if the type is &quot;array&quot;. This is the schema of the items in the array.</p>
         * <p>This is of type JsonSchema. However, Swagger doesn't support circular references.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        public _FinalStage items(Map<String, Object> items) {
            this.items = Optional.ofNullable(items);
            return this;
        }

        /**
         * <p>This is required if the type is &quot;array&quot;. This is the schema of the items in the array.</p>
         * <p>This is of type JsonSchema. However, Swagger doesn't support circular references.</p>
         */
        @java.lang.Override
        @JsonSetter(value = "items", nulls = Nulls.SKIP)
        public _FinalStage items(Optional<Map<String, Object>> items) {
            this.items = items;
            return this;
        }

        @java.lang.Override
        public JsonSchema build() {
            return new JsonSchema(
                    type,
                    items,
                    properties,
                    description,
                    pattern,
                    format,
                    required,
                    enum_,
                    title,
                    additionalProperties);
        }
    }
}
