/**
 * This file was auto-generated by Fern from our API Definition.
 */
package com.vapi.api.types;

import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.annotation.Nulls;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.vapi.api.core.ObjectMappers;
import java.time.OffsetDateTime;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import org.jetbrains.annotations.NotNull;

@JsonInclude(JsonInclude.Include.NON_ABSENT)
@JsonDeserialize(builder = Call.Builder.class)
public final class Call {
    private final Optional<CallType> type;

    private final Optional<List<CallCostsItem>> costs;

    private final Optional<List<CallMessagesItem>> messages;

    private final Optional<CallPhoneCallProvider> phoneCallProvider;

    private final Optional<CallPhoneCallTransport> phoneCallTransport;

    private final Optional<CallStatus> status;

    private final Optional<CallEndedReason> endedReason;

    private final Optional<CallDestination> destination;

    private final String id;

    private final String orgId;

    private final OffsetDateTime createdAt;

    private final OffsetDateTime updatedAt;

    private final Optional<OffsetDateTime> startedAt;

    private final Optional<OffsetDateTime> endedAt;

    private final Optional<Double> cost;

    private final Optional<CostBreakdown> costBreakdown;

    private final Optional<ArtifactPlan> artifactPlan;

    private final Optional<Analysis> analysis;

    private final Optional<Monitor> monitor;

    private final Optional<Artifact> artifact;

    private final Optional<String> phoneCallProviderId;

    private final Optional<String> campaignId;

    private final Optional<String> assistantId;

    private final Optional<CreateAssistantDto> assistant;

    private final Optional<AssistantOverrides> assistantOverrides;

    private final Optional<String> squadId;

    private final Optional<CreateSquadDto> squad;

    private final Optional<String> workflowId;

    private final Optional<CreateWorkflowDto> workflow;

    private final Optional<WorkflowOverrides> workflowOverrides;

    private final Optional<String> phoneNumberId;

    private final Optional<ImportTwilioPhoneNumberDto> phoneNumber;

    private final Optional<String> customerId;

    private final Optional<CreateCustomerDto> customer;

    private final Optional<String> name;

    private final Optional<SchedulePlan> schedulePlan;

    private final Optional<Map<String, Object>> transport;

    private final Map<String, Object> additionalProperties;

    private Call(
            Optional<CallType> type,
            Optional<List<CallCostsItem>> costs,
            Optional<List<CallMessagesItem>> messages,
            Optional<CallPhoneCallProvider> phoneCallProvider,
            Optional<CallPhoneCallTransport> phoneCallTransport,
            Optional<CallStatus> status,
            Optional<CallEndedReason> endedReason,
            Optional<CallDestination> destination,
            String id,
            String orgId,
            OffsetDateTime createdAt,
            OffsetDateTime updatedAt,
            Optional<OffsetDateTime> startedAt,
            Optional<OffsetDateTime> endedAt,
            Optional<Double> cost,
            Optional<CostBreakdown> costBreakdown,
            Optional<ArtifactPlan> artifactPlan,
            Optional<Analysis> analysis,
            Optional<Monitor> monitor,
            Optional<Artifact> artifact,
            Optional<String> phoneCallProviderId,
            Optional<String> campaignId,
            Optional<String> assistantId,
            Optional<CreateAssistantDto> assistant,
            Optional<AssistantOverrides> assistantOverrides,
            Optional<String> squadId,
            Optional<CreateSquadDto> squad,
            Optional<String> workflowId,
            Optional<CreateWorkflowDto> workflow,
            Optional<WorkflowOverrides> workflowOverrides,
            Optional<String> phoneNumberId,
            Optional<ImportTwilioPhoneNumberDto> phoneNumber,
            Optional<String> customerId,
            Optional<CreateCustomerDto> customer,
            Optional<String> name,
            Optional<SchedulePlan> schedulePlan,
            Optional<Map<String, Object>> transport,
            Map<String, Object> additionalProperties) {
        this.type = type;
        this.costs = costs;
        this.messages = messages;
        this.phoneCallProvider = phoneCallProvider;
        this.phoneCallTransport = phoneCallTransport;
        this.status = status;
        this.endedReason = endedReason;
        this.destination = destination;
        this.id = id;
        this.orgId = orgId;
        this.createdAt = createdAt;
        this.updatedAt = updatedAt;
        this.startedAt = startedAt;
        this.endedAt = endedAt;
        this.cost = cost;
        this.costBreakdown = costBreakdown;
        this.artifactPlan = artifactPlan;
        this.analysis = analysis;
        this.monitor = monitor;
        this.artifact = artifact;
        this.phoneCallProviderId = phoneCallProviderId;
        this.campaignId = campaignId;
        this.assistantId = assistantId;
        this.assistant = assistant;
        this.assistantOverrides = assistantOverrides;
        this.squadId = squadId;
        this.squad = squad;
        this.workflowId = workflowId;
        this.workflow = workflow;
        this.workflowOverrides = workflowOverrides;
        this.phoneNumberId = phoneNumberId;
        this.phoneNumber = phoneNumber;
        this.customerId = customerId;
        this.customer = customer;
        this.name = name;
        this.schedulePlan = schedulePlan;
        this.transport = transport;
        this.additionalProperties = additionalProperties;
    }

    /**
     * @return This is the type of call.
     */
    @JsonProperty("type")
    public Optional<CallType> getType() {
        return type;
    }

    /**
     * @return These are the costs of individual components of the call in USD.
     */
    @JsonProperty("costs")
    public Optional<List<CallCostsItem>> getCosts() {
        return costs;
    }

    @JsonProperty("messages")
    public Optional<List<CallMessagesItem>> getMessages() {
        return messages;
    }

    /**
     * @return This is the provider of the call.
     * <p>Only relevant for <code>outboundPhoneCall</code> and <code>inboundPhoneCall</code> type.</p>
     */
    @JsonProperty("phoneCallProvider")
    public Optional<CallPhoneCallProvider> getPhoneCallProvider() {
        return phoneCallProvider;
    }

    /**
     * @return This is the transport of the phone call.
     * <p>Only relevant for <code>outboundPhoneCall</code> and <code>inboundPhoneCall</code> type.</p>
     */
    @JsonProperty("phoneCallTransport")
    public Optional<CallPhoneCallTransport> getPhoneCallTransport() {
        return phoneCallTransport;
    }

    /**
     * @return This is the status of the call.
     */
    @JsonProperty("status")
    public Optional<CallStatus> getStatus() {
        return status;
    }

    /**
     * @return This is the explanation for how the call ended.
     */
    @JsonProperty("endedReason")
    public Optional<CallEndedReason> getEndedReason() {
        return endedReason;
    }

    /**
     * @return This is the destination where the call ended up being transferred to. If the call was not transferred, this will be empty.
     */
    @JsonProperty("destination")
    public Optional<CallDestination> getDestination() {
        return destination;
    }

    /**
     * @return This is the unique identifier for the call.
     */
    @JsonProperty("id")
    public String getId() {
        return id;
    }

    /**
     * @return This is the unique identifier for the org that this call belongs to.
     */
    @JsonProperty("orgId")
    public String getOrgId() {
        return orgId;
    }

    /**
     * @return This is the ISO 8601 date-time string of when the call was created.
     */
    @JsonProperty("createdAt")
    public OffsetDateTime getCreatedAt() {
        return createdAt;
    }

    /**
     * @return This is the ISO 8601 date-time string of when the call was last updated.
     */
    @JsonProperty("updatedAt")
    public OffsetDateTime getUpdatedAt() {
        return updatedAt;
    }

    /**
     * @return This is the ISO 8601 date-time string of when the call was started.
     */
    @JsonProperty("startedAt")
    public Optional<OffsetDateTime> getStartedAt() {
        return startedAt;
    }

    /**
     * @return This is the ISO 8601 date-time string of when the call was ended.
     */
    @JsonProperty("endedAt")
    public Optional<OffsetDateTime> getEndedAt() {
        return endedAt;
    }

    /**
     * @return This is the cost of the call in USD.
     */
    @JsonProperty("cost")
    public Optional<Double> getCost() {
        return cost;
    }

    /**
     * @return This is the cost of the call in USD.
     */
    @JsonProperty("costBreakdown")
    public Optional<CostBreakdown> getCostBreakdown() {
        return costBreakdown;
    }

    /**
     * @return This is a copy of assistant artifact plan. This isn't actually stored on the call but rather just returned in POST /call/web to enable artifact creation client side.
     */
    @JsonProperty("artifactPlan")
    public Optional<ArtifactPlan> getArtifactPlan() {
        return artifactPlan;
    }

    /**
     * @return This is the analysis of the call. Configure in <code>assistant.analysisPlan</code>.
     */
    @JsonProperty("analysis")
    public Optional<Analysis> getAnalysis() {
        return analysis;
    }

    /**
     * @return This is to real-time monitor the call. Configure in <code>assistant.monitorPlan</code>.
     */
    @JsonProperty("monitor")
    public Optional<Monitor> getMonitor() {
        return monitor;
    }

    /**
     * @return These are the artifacts created from the call. Configure in <code>assistant.artifactPlan</code>.
     */
    @JsonProperty("artifact")
    public Optional<Artifact> getArtifact() {
        return artifact;
    }

    /**
     * @return The ID of the call as provided by the phone number service. callSid in Twilio. conversationUuid in Vonage. callControlId in Telnyx.
     * <p>Only relevant for <code>outboundPhoneCall</code> and <code>inboundPhoneCall</code> type.</p>
     */
    @JsonProperty("phoneCallProviderId")
    public Optional<String> getPhoneCallProviderId() {
        return phoneCallProviderId;
    }

    /**
     * @return This is the campaign ID that the call belongs to.
     */
    @JsonProperty("campaignId")
    public Optional<String> getCampaignId() {
        return campaignId;
    }

    /**
     * @return This is the assistant ID that will be used for the call. To use a transient assistant, use <code>assistant</code> instead.
     * <p>To start a call with:</p>
     * <ul>
     * <li>Assistant, use <code>assistantId</code> or <code>assistant</code></li>
     * <li>Squad, use <code>squadId</code> or <code>squad</code></li>
     * <li>Workflow, use <code>workflowId</code> or <code>workflow</code></li>
     * </ul>
     */
    @JsonProperty("assistantId")
    public Optional<String> getAssistantId() {
        return assistantId;
    }

    /**
     * @return This is the assistant that will be used for the call. To use an existing assistant, use <code>assistantId</code> instead.
     * <p>To start a call with:</p>
     * <ul>
     * <li>Assistant, use <code>assistant</code></li>
     * <li>Squad, use <code>squad</code></li>
     * <li>Workflow, use <code>workflow</code></li>
     * </ul>
     */
    @JsonProperty("assistant")
    public Optional<CreateAssistantDto> getAssistant() {
        return assistant;
    }

    /**
     * @return These are the overrides for the <code>assistant</code> or <code>assistantId</code>'s settings and template variables.
     */
    @JsonProperty("assistantOverrides")
    public Optional<AssistantOverrides> getAssistantOverrides() {
        return assistantOverrides;
    }

    /**
     * @return This is the squad that will be used for the call. To use a transient squad, use <code>squad</code> instead.
     * <p>To start a call with:</p>
     * <ul>
     * <li>Assistant, use <code>assistant</code> or <code>assistantId</code></li>
     * <li>Squad, use <code>squad</code> or <code>squadId</code></li>
     * <li>Workflow, use <code>workflow</code> or <code>workflowId</code></li>
     * </ul>
     */
    @JsonProperty("squadId")
    public Optional<String> getSquadId() {
        return squadId;
    }

    /**
     * @return This is a squad that will be used for the call. To use an existing squad, use <code>squadId</code> instead.
     * <p>To start a call with:</p>
     * <ul>
     * <li>Assistant, use <code>assistant</code> or <code>assistantId</code></li>
     * <li>Squad, use <code>squad</code> or <code>squadId</code></li>
     * <li>Workflow, use <code>workflow</code> or <code>workflowId</code></li>
     * </ul>
     */
    @JsonProperty("squad")
    public Optional<CreateSquadDto> getSquad() {
        return squad;
    }

    /**
     * @return This is the workflow that will be used for the call. To use a transient workflow, use <code>workflow</code> instead.
     * <p>To start a call with:</p>
     * <ul>
     * <li>Assistant, use <code>assistant</code> or <code>assistantId</code></li>
     * <li>Squad, use <code>squad</code> or <code>squadId</code></li>
     * <li>Workflow, use <code>workflow</code> or <code>workflowId</code></li>
     * </ul>
     */
    @JsonProperty("workflowId")
    public Optional<String> getWorkflowId() {
        return workflowId;
    }

    /**
     * @return This is a workflow that will be used for the call. To use an existing workflow, use <code>workflowId</code> instead.
     * <p>To start a call with:</p>
     * <ul>
     * <li>Assistant, use <code>assistant</code> or <code>assistantId</code></li>
     * <li>Squad, use <code>squad</code> or <code>squadId</code></li>
     * <li>Workflow, use <code>workflow</code> or <code>workflowId</code></li>
     * </ul>
     */
    @JsonProperty("workflow")
    public Optional<CreateWorkflowDto> getWorkflow() {
        return workflow;
    }

    /**
     * @return These are the overrides for the <code>workflow</code> or <code>workflowId</code>'s settings and template variables.
     */
    @JsonProperty("workflowOverrides")
    public Optional<WorkflowOverrides> getWorkflowOverrides() {
        return workflowOverrides;
    }

    /**
     * @return This is the phone number that will be used for the call. To use a transient number, use <code>phoneNumber</code> instead.
     * <p>Only relevant for <code>outboundPhoneCall</code> and <code>inboundPhoneCall</code> type.</p>
     */
    @JsonProperty("phoneNumberId")
    public Optional<String> getPhoneNumberId() {
        return phoneNumberId;
    }

    /**
     * @return This is the phone number that will be used for the call. To use an existing number, use <code>phoneNumberId</code> instead.
     * <p>Only relevant for <code>outboundPhoneCall</code> and <code>inboundPhoneCall</code> type.</p>
     */
    @JsonProperty("phoneNumber")
    public Optional<ImportTwilioPhoneNumberDto> getPhoneNumber() {
        return phoneNumber;
    }

    /**
     * @return This is the customer that will be called. To call a transient customer , use <code>customer</code> instead.
     * <p>Only relevant for <code>outboundPhoneCall</code> and <code>inboundPhoneCall</code> type.</p>
     */
    @JsonProperty("customerId")
    public Optional<String> getCustomerId() {
        return customerId;
    }

    /**
     * @return This is the customer that will be called. To call an existing customer, use <code>customerId</code> instead.
     * <p>Only relevant for <code>outboundPhoneCall</code> and <code>inboundPhoneCall</code> type.</p>
     */
    @JsonProperty("customer")
    public Optional<CreateCustomerDto> getCustomer() {
        return customer;
    }

    /**
     * @return This is the name of the call. This is just for your own reference.
     */
    @JsonProperty("name")
    public Optional<String> getName() {
        return name;
    }

    /**
     * @return This is the schedule plan of the call.
     */
    @JsonProperty("schedulePlan")
    public Optional<SchedulePlan> getSchedulePlan() {
        return schedulePlan;
    }

    /**
     * @return This is the transport of the call.
     */
    @JsonProperty("transport")
    public Optional<Map<String, Object>> getTransport() {
        return transport;
    }

    @java.lang.Override
    public boolean equals(Object other) {
        if (this == other) return true;
        return other instanceof Call && equalTo((Call) other);
    }

    @JsonAnyGetter
    public Map<String, Object> getAdditionalProperties() {
        return this.additionalProperties;
    }

    private boolean equalTo(Call other) {
        return type.equals(other.type)
                && costs.equals(other.costs)
                && messages.equals(other.messages)
                && phoneCallProvider.equals(other.phoneCallProvider)
                && phoneCallTransport.equals(other.phoneCallTransport)
                && status.equals(other.status)
                && endedReason.equals(other.endedReason)
                && destination.equals(other.destination)
                && id.equals(other.id)
                && orgId.equals(other.orgId)
                && createdAt.equals(other.createdAt)
                && updatedAt.equals(other.updatedAt)
                && startedAt.equals(other.startedAt)
                && endedAt.equals(other.endedAt)
                && cost.equals(other.cost)
                && costBreakdown.equals(other.costBreakdown)
                && artifactPlan.equals(other.artifactPlan)
                && analysis.equals(other.analysis)
                && monitor.equals(other.monitor)
                && artifact.equals(other.artifact)
                && phoneCallProviderId.equals(other.phoneCallProviderId)
                && campaignId.equals(other.campaignId)
                && assistantId.equals(other.assistantId)
                && assistant.equals(other.assistant)
                && assistantOverrides.equals(other.assistantOverrides)
                && squadId.equals(other.squadId)
                && squad.equals(other.squad)
                && workflowId.equals(other.workflowId)
                && workflow.equals(other.workflow)
                && workflowOverrides.equals(other.workflowOverrides)
                && phoneNumberId.equals(other.phoneNumberId)
                && phoneNumber.equals(other.phoneNumber)
                && customerId.equals(other.customerId)
                && customer.equals(other.customer)
                && name.equals(other.name)
                && schedulePlan.equals(other.schedulePlan)
                && transport.equals(other.transport);
    }

    @java.lang.Override
    public int hashCode() {
        return Objects.hash(
                this.type,
                this.costs,
                this.messages,
                this.phoneCallProvider,
                this.phoneCallTransport,
                this.status,
                this.endedReason,
                this.destination,
                this.id,
                this.orgId,
                this.createdAt,
                this.updatedAt,
                this.startedAt,
                this.endedAt,
                this.cost,
                this.costBreakdown,
                this.artifactPlan,
                this.analysis,
                this.monitor,
                this.artifact,
                this.phoneCallProviderId,
                this.campaignId,
                this.assistantId,
                this.assistant,
                this.assistantOverrides,
                this.squadId,
                this.squad,
                this.workflowId,
                this.workflow,
                this.workflowOverrides,
                this.phoneNumberId,
                this.phoneNumber,
                this.customerId,
                this.customer,
                this.name,
                this.schedulePlan,
                this.transport);
    }

    @java.lang.Override
    public String toString() {
        return ObjectMappers.stringify(this);
    }

    public static IdStage builder() {
        return new Builder();
    }

    public interface IdStage {
        /**
         * <p>This is the unique identifier for the call.</p>
         */
        OrgIdStage id(@NotNull String id);

        Builder from(Call other);
    }

    public interface OrgIdStage {
        /**
         * <p>This is the unique identifier for the org that this call belongs to.</p>
         */
        CreatedAtStage orgId(@NotNull String orgId);
    }

    public interface CreatedAtStage {
        /**
         * <p>This is the ISO 8601 date-time string of when the call was created.</p>
         */
        UpdatedAtStage createdAt(@NotNull OffsetDateTime createdAt);
    }

    public interface UpdatedAtStage {
        /**
         * <p>This is the ISO 8601 date-time string of when the call was last updated.</p>
         */
        _FinalStage updatedAt(@NotNull OffsetDateTime updatedAt);
    }

    public interface _FinalStage {
        Call build();

        /**
         * <p>This is the type of call.</p>
         */
        _FinalStage type(Optional<CallType> type);

        _FinalStage type(CallType type);

        /**
         * <p>These are the costs of individual components of the call in USD.</p>
         */
        _FinalStage costs(Optional<List<CallCostsItem>> costs);

        _FinalStage costs(List<CallCostsItem> costs);

        _FinalStage messages(Optional<List<CallMessagesItem>> messages);

        _FinalStage messages(List<CallMessagesItem> messages);

        /**
         * <p>This is the provider of the call.</p>
         * <p>Only relevant for <code>outboundPhoneCall</code> and <code>inboundPhoneCall</code> type.</p>
         */
        _FinalStage phoneCallProvider(Optional<CallPhoneCallProvider> phoneCallProvider);

        _FinalStage phoneCallProvider(CallPhoneCallProvider phoneCallProvider);

        /**
         * <p>This is the transport of the phone call.</p>
         * <p>Only relevant for <code>outboundPhoneCall</code> and <code>inboundPhoneCall</code> type.</p>
         */
        _FinalStage phoneCallTransport(Optional<CallPhoneCallTransport> phoneCallTransport);

        _FinalStage phoneCallTransport(CallPhoneCallTransport phoneCallTransport);

        /**
         * <p>This is the status of the call.</p>
         */
        _FinalStage status(Optional<CallStatus> status);

        _FinalStage status(CallStatus status);

        /**
         * <p>This is the explanation for how the call ended.</p>
         */
        _FinalStage endedReason(Optional<CallEndedReason> endedReason);

        _FinalStage endedReason(CallEndedReason endedReason);

        /**
         * <p>This is the destination where the call ended up being transferred to. If the call was not transferred, this will be empty.</p>
         */
        _FinalStage destination(Optional<CallDestination> destination);

        _FinalStage destination(CallDestination destination);

        /**
         * <p>This is the ISO 8601 date-time string of when the call was started.</p>
         */
        _FinalStage startedAt(Optional<OffsetDateTime> startedAt);

        _FinalStage startedAt(OffsetDateTime startedAt);

        /**
         * <p>This is the ISO 8601 date-time string of when the call was ended.</p>
         */
        _FinalStage endedAt(Optional<OffsetDateTime> endedAt);

        _FinalStage endedAt(OffsetDateTime endedAt);

        /**
         * <p>This is the cost of the call in USD.</p>
         */
        _FinalStage cost(Optional<Double> cost);

        _FinalStage cost(Double cost);

        /**
         * <p>This is the cost of the call in USD.</p>
         */
        _FinalStage costBreakdown(Optional<CostBreakdown> costBreakdown);

        _FinalStage costBreakdown(CostBreakdown costBreakdown);

        /**
         * <p>This is a copy of assistant artifact plan. This isn't actually stored on the call but rather just returned in POST /call/web to enable artifact creation client side.</p>
         */
        _FinalStage artifactPlan(Optional<ArtifactPlan> artifactPlan);

        _FinalStage artifactPlan(ArtifactPlan artifactPlan);

        /**
         * <p>This is the analysis of the call. Configure in <code>assistant.analysisPlan</code>.</p>
         */
        _FinalStage analysis(Optional<Analysis> analysis);

        _FinalStage analysis(Analysis analysis);

        /**
         * <p>This is to real-time monitor the call. Configure in <code>assistant.monitorPlan</code>.</p>
         */
        _FinalStage monitor(Optional<Monitor> monitor);

        _FinalStage monitor(Monitor monitor);

        /**
         * <p>These are the artifacts created from the call. Configure in <code>assistant.artifactPlan</code>.</p>
         */
        _FinalStage artifact(Optional<Artifact> artifact);

        _FinalStage artifact(Artifact artifact);

        /**
         * <p>The ID of the call as provided by the phone number service. callSid in Twilio. conversationUuid in Vonage. callControlId in Telnyx.</p>
         * <p>Only relevant for <code>outboundPhoneCall</code> and <code>inboundPhoneCall</code> type.</p>
         */
        _FinalStage phoneCallProviderId(Optional<String> phoneCallProviderId);

        _FinalStage phoneCallProviderId(String phoneCallProviderId);

        /**
         * <p>This is the campaign ID that the call belongs to.</p>
         */
        _FinalStage campaignId(Optional<String> campaignId);

        _FinalStage campaignId(String campaignId);

        /**
         * <p>This is the assistant ID that will be used for the call. To use a transient assistant, use <code>assistant</code> instead.</p>
         * <p>To start a call with:</p>
         * <ul>
         * <li>Assistant, use <code>assistantId</code> or <code>assistant</code></li>
         * <li>Squad, use <code>squadId</code> or <code>squad</code></li>
         * <li>Workflow, use <code>workflowId</code> or <code>workflow</code></li>
         * </ul>
         */
        _FinalStage assistantId(Optional<String> assistantId);

        _FinalStage assistantId(String assistantId);

        /**
         * <p>This is the assistant that will be used for the call. To use an existing assistant, use <code>assistantId</code> instead.</p>
         * <p>To start a call with:</p>
         * <ul>
         * <li>Assistant, use <code>assistant</code></li>
         * <li>Squad, use <code>squad</code></li>
         * <li>Workflow, use <code>workflow</code></li>
         * </ul>
         */
        _FinalStage assistant(Optional<CreateAssistantDto> assistant);

        _FinalStage assistant(CreateAssistantDto assistant);

        /**
         * <p>These are the overrides for the <code>assistant</code> or <code>assistantId</code>'s settings and template variables.</p>
         */
        _FinalStage assistantOverrides(Optional<AssistantOverrides> assistantOverrides);

        _FinalStage assistantOverrides(AssistantOverrides assistantOverrides);

        /**
         * <p>This is the squad that will be used for the call. To use a transient squad, use <code>squad</code> instead.</p>
         * <p>To start a call with:</p>
         * <ul>
         * <li>Assistant, use <code>assistant</code> or <code>assistantId</code></li>
         * <li>Squad, use <code>squad</code> or <code>squadId</code></li>
         * <li>Workflow, use <code>workflow</code> or <code>workflowId</code></li>
         * </ul>
         */
        _FinalStage squadId(Optional<String> squadId);

        _FinalStage squadId(String squadId);

        /**
         * <p>This is a squad that will be used for the call. To use an existing squad, use <code>squadId</code> instead.</p>
         * <p>To start a call with:</p>
         * <ul>
         * <li>Assistant, use <code>assistant</code> or <code>assistantId</code></li>
         * <li>Squad, use <code>squad</code> or <code>squadId</code></li>
         * <li>Workflow, use <code>workflow</code> or <code>workflowId</code></li>
         * </ul>
         */
        _FinalStage squad(Optional<CreateSquadDto> squad);

        _FinalStage squad(CreateSquadDto squad);

        /**
         * <p>This is the workflow that will be used for the call. To use a transient workflow, use <code>workflow</code> instead.</p>
         * <p>To start a call with:</p>
         * <ul>
         * <li>Assistant, use <code>assistant</code> or <code>assistantId</code></li>
         * <li>Squad, use <code>squad</code> or <code>squadId</code></li>
         * <li>Workflow, use <code>workflow</code> or <code>workflowId</code></li>
         * </ul>
         */
        _FinalStage workflowId(Optional<String> workflowId);

        _FinalStage workflowId(String workflowId);

        /**
         * <p>This is a workflow that will be used for the call. To use an existing workflow, use <code>workflowId</code> instead.</p>
         * <p>To start a call with:</p>
         * <ul>
         * <li>Assistant, use <code>assistant</code> or <code>assistantId</code></li>
         * <li>Squad, use <code>squad</code> or <code>squadId</code></li>
         * <li>Workflow, use <code>workflow</code> or <code>workflowId</code></li>
         * </ul>
         */
        _FinalStage workflow(Optional<CreateWorkflowDto> workflow);

        _FinalStage workflow(CreateWorkflowDto workflow);

        /**
         * <p>These are the overrides for the <code>workflow</code> or <code>workflowId</code>'s settings and template variables.</p>
         */
        _FinalStage workflowOverrides(Optional<WorkflowOverrides> workflowOverrides);

        _FinalStage workflowOverrides(WorkflowOverrides workflowOverrides);

        /**
         * <p>This is the phone number that will be used for the call. To use a transient number, use <code>phoneNumber</code> instead.</p>
         * <p>Only relevant for <code>outboundPhoneCall</code> and <code>inboundPhoneCall</code> type.</p>
         */
        _FinalStage phoneNumberId(Optional<String> phoneNumberId);

        _FinalStage phoneNumberId(String phoneNumberId);

        /**
         * <p>This is the phone number that will be used for the call. To use an existing number, use <code>phoneNumberId</code> instead.</p>
         * <p>Only relevant for <code>outboundPhoneCall</code> and <code>inboundPhoneCall</code> type.</p>
         */
        _FinalStage phoneNumber(Optional<ImportTwilioPhoneNumberDto> phoneNumber);

        _FinalStage phoneNumber(ImportTwilioPhoneNumberDto phoneNumber);

        /**
         * <p>This is the customer that will be called. To call a transient customer , use <code>customer</code> instead.</p>
         * <p>Only relevant for <code>outboundPhoneCall</code> and <code>inboundPhoneCall</code> type.</p>
         */
        _FinalStage customerId(Optional<String> customerId);

        _FinalStage customerId(String customerId);

        /**
         * <p>This is the customer that will be called. To call an existing customer, use <code>customerId</code> instead.</p>
         * <p>Only relevant for <code>outboundPhoneCall</code> and <code>inboundPhoneCall</code> type.</p>
         */
        _FinalStage customer(Optional<CreateCustomerDto> customer);

        _FinalStage customer(CreateCustomerDto customer);

        /**
         * <p>This is the name of the call. This is just for your own reference.</p>
         */
        _FinalStage name(Optional<String> name);

        _FinalStage name(String name);

        /**
         * <p>This is the schedule plan of the call.</p>
         */
        _FinalStage schedulePlan(Optional<SchedulePlan> schedulePlan);

        _FinalStage schedulePlan(SchedulePlan schedulePlan);

        /**
         * <p>This is the transport of the call.</p>
         */
        _FinalStage transport(Optional<Map<String, Object>> transport);

        _FinalStage transport(Map<String, Object> transport);
    }

    @JsonIgnoreProperties(ignoreUnknown = true)
    public static final class Builder implements IdStage, OrgIdStage, CreatedAtStage, UpdatedAtStage, _FinalStage {
        private String id;

        private String orgId;

        private OffsetDateTime createdAt;

        private OffsetDateTime updatedAt;

        private Optional<Map<String, Object>> transport = Optional.empty();

        private Optional<SchedulePlan> schedulePlan = Optional.empty();

        private Optional<String> name = Optional.empty();

        private Optional<CreateCustomerDto> customer = Optional.empty();

        private Optional<String> customerId = Optional.empty();

        private Optional<ImportTwilioPhoneNumberDto> phoneNumber = Optional.empty();

        private Optional<String> phoneNumberId = Optional.empty();

        private Optional<WorkflowOverrides> workflowOverrides = Optional.empty();

        private Optional<CreateWorkflowDto> workflow = Optional.empty();

        private Optional<String> workflowId = Optional.empty();

        private Optional<CreateSquadDto> squad = Optional.empty();

        private Optional<String> squadId = Optional.empty();

        private Optional<AssistantOverrides> assistantOverrides = Optional.empty();

        private Optional<CreateAssistantDto> assistant = Optional.empty();

        private Optional<String> assistantId = Optional.empty();

        private Optional<String> campaignId = Optional.empty();

        private Optional<String> phoneCallProviderId = Optional.empty();

        private Optional<Artifact> artifact = Optional.empty();

        private Optional<Monitor> monitor = Optional.empty();

        private Optional<Analysis> analysis = Optional.empty();

        private Optional<ArtifactPlan> artifactPlan = Optional.empty();

        private Optional<CostBreakdown> costBreakdown = Optional.empty();

        private Optional<Double> cost = Optional.empty();

        private Optional<OffsetDateTime> endedAt = Optional.empty();

        private Optional<OffsetDateTime> startedAt = Optional.empty();

        private Optional<CallDestination> destination = Optional.empty();

        private Optional<CallEndedReason> endedReason = Optional.empty();

        private Optional<CallStatus> status = Optional.empty();

        private Optional<CallPhoneCallTransport> phoneCallTransport = Optional.empty();

        private Optional<CallPhoneCallProvider> phoneCallProvider = Optional.empty();

        private Optional<List<CallMessagesItem>> messages = Optional.empty();

        private Optional<List<CallCostsItem>> costs = Optional.empty();

        private Optional<CallType> type = Optional.empty();

        @JsonAnySetter
        private Map<String, Object> additionalProperties = new HashMap<>();

        private Builder() {}

        @java.lang.Override
        public Builder from(Call other) {
            type(other.getType());
            costs(other.getCosts());
            messages(other.getMessages());
            phoneCallProvider(other.getPhoneCallProvider());
            phoneCallTransport(other.getPhoneCallTransport());
            status(other.getStatus());
            endedReason(other.getEndedReason());
            destination(other.getDestination());
            id(other.getId());
            orgId(other.getOrgId());
            createdAt(other.getCreatedAt());
            updatedAt(other.getUpdatedAt());
            startedAt(other.getStartedAt());
            endedAt(other.getEndedAt());
            cost(other.getCost());
            costBreakdown(other.getCostBreakdown());
            artifactPlan(other.getArtifactPlan());
            analysis(other.getAnalysis());
            monitor(other.getMonitor());
            artifact(other.getArtifact());
            phoneCallProviderId(other.getPhoneCallProviderId());
            campaignId(other.getCampaignId());
            assistantId(other.getAssistantId());
            assistant(other.getAssistant());
            assistantOverrides(other.getAssistantOverrides());
            squadId(other.getSquadId());
            squad(other.getSquad());
            workflowId(other.getWorkflowId());
            workflow(other.getWorkflow());
            workflowOverrides(other.getWorkflowOverrides());
            phoneNumberId(other.getPhoneNumberId());
            phoneNumber(other.getPhoneNumber());
            customerId(other.getCustomerId());
            customer(other.getCustomer());
            name(other.getName());
            schedulePlan(other.getSchedulePlan());
            transport(other.getTransport());
            return this;
        }

        /**
         * <p>This is the unique identifier for the call.</p>
         * <p>This is the unique identifier for the call.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        @JsonSetter("id")
        public OrgIdStage id(@NotNull String id) {
            this.id = Objects.requireNonNull(id, "id must not be null");
            return this;
        }

        /**
         * <p>This is the unique identifier for the org that this call belongs to.</p>
         * <p>This is the unique identifier for the org that this call belongs to.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        @JsonSetter("orgId")
        public CreatedAtStage orgId(@NotNull String orgId) {
            this.orgId = Objects.requireNonNull(orgId, "orgId must not be null");
            return this;
        }

        /**
         * <p>This is the ISO 8601 date-time string of when the call was created.</p>
         * <p>This is the ISO 8601 date-time string of when the call was created.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        @JsonSetter("createdAt")
        public UpdatedAtStage createdAt(@NotNull OffsetDateTime createdAt) {
            this.createdAt = Objects.requireNonNull(createdAt, "createdAt must not be null");
            return this;
        }

        /**
         * <p>This is the ISO 8601 date-time string of when the call was last updated.</p>
         * <p>This is the ISO 8601 date-time string of when the call was last updated.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        @JsonSetter("updatedAt")
        public _FinalStage updatedAt(@NotNull OffsetDateTime updatedAt) {
            this.updatedAt = Objects.requireNonNull(updatedAt, "updatedAt must not be null");
            return this;
        }

        /**
         * <p>This is the transport of the call.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        public _FinalStage transport(Map<String, Object> transport) {
            this.transport = Optional.ofNullable(transport);
            return this;
        }

        /**
         * <p>This is the transport of the call.</p>
         */
        @java.lang.Override
        @JsonSetter(value = "transport", nulls = Nulls.SKIP)
        public _FinalStage transport(Optional<Map<String, Object>> transport) {
            this.transport = transport;
            return this;
        }

        /**
         * <p>This is the schedule plan of the call.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        public _FinalStage schedulePlan(SchedulePlan schedulePlan) {
            this.schedulePlan = Optional.ofNullable(schedulePlan);
            return this;
        }

        /**
         * <p>This is the schedule plan of the call.</p>
         */
        @java.lang.Override
        @JsonSetter(value = "schedulePlan", nulls = Nulls.SKIP)
        public _FinalStage schedulePlan(Optional<SchedulePlan> schedulePlan) {
            this.schedulePlan = schedulePlan;
            return this;
        }

        /**
         * <p>This is the name of the call. This is just for your own reference.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        public _FinalStage name(String name) {
            this.name = Optional.ofNullable(name);
            return this;
        }

        /**
         * <p>This is the name of the call. This is just for your own reference.</p>
         */
        @java.lang.Override
        @JsonSetter(value = "name", nulls = Nulls.SKIP)
        public _FinalStage name(Optional<String> name) {
            this.name = name;
            return this;
        }

        /**
         * <p>This is the customer that will be called. To call an existing customer, use <code>customerId</code> instead.</p>
         * <p>Only relevant for <code>outboundPhoneCall</code> and <code>inboundPhoneCall</code> type.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        public _FinalStage customer(CreateCustomerDto customer) {
            this.customer = Optional.ofNullable(customer);
            return this;
        }

        /**
         * <p>This is the customer that will be called. To call an existing customer, use <code>customerId</code> instead.</p>
         * <p>Only relevant for <code>outboundPhoneCall</code> and <code>inboundPhoneCall</code> type.</p>
         */
        @java.lang.Override
        @JsonSetter(value = "customer", nulls = Nulls.SKIP)
        public _FinalStage customer(Optional<CreateCustomerDto> customer) {
            this.customer = customer;
            return this;
        }

        /**
         * <p>This is the customer that will be called. To call a transient customer , use <code>customer</code> instead.</p>
         * <p>Only relevant for <code>outboundPhoneCall</code> and <code>inboundPhoneCall</code> type.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        public _FinalStage customerId(String customerId) {
            this.customerId = Optional.ofNullable(customerId);
            return this;
        }

        /**
         * <p>This is the customer that will be called. To call a transient customer , use <code>customer</code> instead.</p>
         * <p>Only relevant for <code>outboundPhoneCall</code> and <code>inboundPhoneCall</code> type.</p>
         */
        @java.lang.Override
        @JsonSetter(value = "customerId", nulls = Nulls.SKIP)
        public _FinalStage customerId(Optional<String> customerId) {
            this.customerId = customerId;
            return this;
        }

        /**
         * <p>This is the phone number that will be used for the call. To use an existing number, use <code>phoneNumberId</code> instead.</p>
         * <p>Only relevant for <code>outboundPhoneCall</code> and <code>inboundPhoneCall</code> type.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        public _FinalStage phoneNumber(ImportTwilioPhoneNumberDto phoneNumber) {
            this.phoneNumber = Optional.ofNullable(phoneNumber);
            return this;
        }

        /**
         * <p>This is the phone number that will be used for the call. To use an existing number, use <code>phoneNumberId</code> instead.</p>
         * <p>Only relevant for <code>outboundPhoneCall</code> and <code>inboundPhoneCall</code> type.</p>
         */
        @java.lang.Override
        @JsonSetter(value = "phoneNumber", nulls = Nulls.SKIP)
        public _FinalStage phoneNumber(Optional<ImportTwilioPhoneNumberDto> phoneNumber) {
            this.phoneNumber = phoneNumber;
            return this;
        }

        /**
         * <p>This is the phone number that will be used for the call. To use a transient number, use <code>phoneNumber</code> instead.</p>
         * <p>Only relevant for <code>outboundPhoneCall</code> and <code>inboundPhoneCall</code> type.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        public _FinalStage phoneNumberId(String phoneNumberId) {
            this.phoneNumberId = Optional.ofNullable(phoneNumberId);
            return this;
        }

        /**
         * <p>This is the phone number that will be used for the call. To use a transient number, use <code>phoneNumber</code> instead.</p>
         * <p>Only relevant for <code>outboundPhoneCall</code> and <code>inboundPhoneCall</code> type.</p>
         */
        @java.lang.Override
        @JsonSetter(value = "phoneNumberId", nulls = Nulls.SKIP)
        public _FinalStage phoneNumberId(Optional<String> phoneNumberId) {
            this.phoneNumberId = phoneNumberId;
            return this;
        }

        /**
         * <p>These are the overrides for the <code>workflow</code> or <code>workflowId</code>'s settings and template variables.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        public _FinalStage workflowOverrides(WorkflowOverrides workflowOverrides) {
            this.workflowOverrides = Optional.ofNullable(workflowOverrides);
            return this;
        }

        /**
         * <p>These are the overrides for the <code>workflow</code> or <code>workflowId</code>'s settings and template variables.</p>
         */
        @java.lang.Override
        @JsonSetter(value = "workflowOverrides", nulls = Nulls.SKIP)
        public _FinalStage workflowOverrides(Optional<WorkflowOverrides> workflowOverrides) {
            this.workflowOverrides = workflowOverrides;
            return this;
        }

        /**
         * <p>This is a workflow that will be used for the call. To use an existing workflow, use <code>workflowId</code> instead.</p>
         * <p>To start a call with:</p>
         * <ul>
         * <li>Assistant, use <code>assistant</code> or <code>assistantId</code></li>
         * <li>Squad, use <code>squad</code> or <code>squadId</code></li>
         * <li>Workflow, use <code>workflow</code> or <code>workflowId</code></li>
         * </ul>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        public _FinalStage workflow(CreateWorkflowDto workflow) {
            this.workflow = Optional.ofNullable(workflow);
            return this;
        }

        /**
         * <p>This is a workflow that will be used for the call. To use an existing workflow, use <code>workflowId</code> instead.</p>
         * <p>To start a call with:</p>
         * <ul>
         * <li>Assistant, use <code>assistant</code> or <code>assistantId</code></li>
         * <li>Squad, use <code>squad</code> or <code>squadId</code></li>
         * <li>Workflow, use <code>workflow</code> or <code>workflowId</code></li>
         * </ul>
         */
        @java.lang.Override
        @JsonSetter(value = "workflow", nulls = Nulls.SKIP)
        public _FinalStage workflow(Optional<CreateWorkflowDto> workflow) {
            this.workflow = workflow;
            return this;
        }

        /**
         * <p>This is the workflow that will be used for the call. To use a transient workflow, use <code>workflow</code> instead.</p>
         * <p>To start a call with:</p>
         * <ul>
         * <li>Assistant, use <code>assistant</code> or <code>assistantId</code></li>
         * <li>Squad, use <code>squad</code> or <code>squadId</code></li>
         * <li>Workflow, use <code>workflow</code> or <code>workflowId</code></li>
         * </ul>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        public _FinalStage workflowId(String workflowId) {
            this.workflowId = Optional.ofNullable(workflowId);
            return this;
        }

        /**
         * <p>This is the workflow that will be used for the call. To use a transient workflow, use <code>workflow</code> instead.</p>
         * <p>To start a call with:</p>
         * <ul>
         * <li>Assistant, use <code>assistant</code> or <code>assistantId</code></li>
         * <li>Squad, use <code>squad</code> or <code>squadId</code></li>
         * <li>Workflow, use <code>workflow</code> or <code>workflowId</code></li>
         * </ul>
         */
        @java.lang.Override
        @JsonSetter(value = "workflowId", nulls = Nulls.SKIP)
        public _FinalStage workflowId(Optional<String> workflowId) {
            this.workflowId = workflowId;
            return this;
        }

        /**
         * <p>This is a squad that will be used for the call. To use an existing squad, use <code>squadId</code> instead.</p>
         * <p>To start a call with:</p>
         * <ul>
         * <li>Assistant, use <code>assistant</code> or <code>assistantId</code></li>
         * <li>Squad, use <code>squad</code> or <code>squadId</code></li>
         * <li>Workflow, use <code>workflow</code> or <code>workflowId</code></li>
         * </ul>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        public _FinalStage squad(CreateSquadDto squad) {
            this.squad = Optional.ofNullable(squad);
            return this;
        }

        /**
         * <p>This is a squad that will be used for the call. To use an existing squad, use <code>squadId</code> instead.</p>
         * <p>To start a call with:</p>
         * <ul>
         * <li>Assistant, use <code>assistant</code> or <code>assistantId</code></li>
         * <li>Squad, use <code>squad</code> or <code>squadId</code></li>
         * <li>Workflow, use <code>workflow</code> or <code>workflowId</code></li>
         * </ul>
         */
        @java.lang.Override
        @JsonSetter(value = "squad", nulls = Nulls.SKIP)
        public _FinalStage squad(Optional<CreateSquadDto> squad) {
            this.squad = squad;
            return this;
        }

        /**
         * <p>This is the squad that will be used for the call. To use a transient squad, use <code>squad</code> instead.</p>
         * <p>To start a call with:</p>
         * <ul>
         * <li>Assistant, use <code>assistant</code> or <code>assistantId</code></li>
         * <li>Squad, use <code>squad</code> or <code>squadId</code></li>
         * <li>Workflow, use <code>workflow</code> or <code>workflowId</code></li>
         * </ul>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        public _FinalStage squadId(String squadId) {
            this.squadId = Optional.ofNullable(squadId);
            return this;
        }

        /**
         * <p>This is the squad that will be used for the call. To use a transient squad, use <code>squad</code> instead.</p>
         * <p>To start a call with:</p>
         * <ul>
         * <li>Assistant, use <code>assistant</code> or <code>assistantId</code></li>
         * <li>Squad, use <code>squad</code> or <code>squadId</code></li>
         * <li>Workflow, use <code>workflow</code> or <code>workflowId</code></li>
         * </ul>
         */
        @java.lang.Override
        @JsonSetter(value = "squadId", nulls = Nulls.SKIP)
        public _FinalStage squadId(Optional<String> squadId) {
            this.squadId = squadId;
            return this;
        }

        /**
         * <p>These are the overrides for the <code>assistant</code> or <code>assistantId</code>'s settings and template variables.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        public _FinalStage assistantOverrides(AssistantOverrides assistantOverrides) {
            this.assistantOverrides = Optional.ofNullable(assistantOverrides);
            return this;
        }

        /**
         * <p>These are the overrides for the <code>assistant</code> or <code>assistantId</code>'s settings and template variables.</p>
         */
        @java.lang.Override
        @JsonSetter(value = "assistantOverrides", nulls = Nulls.SKIP)
        public _FinalStage assistantOverrides(Optional<AssistantOverrides> assistantOverrides) {
            this.assistantOverrides = assistantOverrides;
            return this;
        }

        /**
         * <p>This is the assistant that will be used for the call. To use an existing assistant, use <code>assistantId</code> instead.</p>
         * <p>To start a call with:</p>
         * <ul>
         * <li>Assistant, use <code>assistant</code></li>
         * <li>Squad, use <code>squad</code></li>
         * <li>Workflow, use <code>workflow</code></li>
         * </ul>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        public _FinalStage assistant(CreateAssistantDto assistant) {
            this.assistant = Optional.ofNullable(assistant);
            return this;
        }

        /**
         * <p>This is the assistant that will be used for the call. To use an existing assistant, use <code>assistantId</code> instead.</p>
         * <p>To start a call with:</p>
         * <ul>
         * <li>Assistant, use <code>assistant</code></li>
         * <li>Squad, use <code>squad</code></li>
         * <li>Workflow, use <code>workflow</code></li>
         * </ul>
         */
        @java.lang.Override
        @JsonSetter(value = "assistant", nulls = Nulls.SKIP)
        public _FinalStage assistant(Optional<CreateAssistantDto> assistant) {
            this.assistant = assistant;
            return this;
        }

        /**
         * <p>This is the assistant ID that will be used for the call. To use a transient assistant, use <code>assistant</code> instead.</p>
         * <p>To start a call with:</p>
         * <ul>
         * <li>Assistant, use <code>assistantId</code> or <code>assistant</code></li>
         * <li>Squad, use <code>squadId</code> or <code>squad</code></li>
         * <li>Workflow, use <code>workflowId</code> or <code>workflow</code></li>
         * </ul>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        public _FinalStage assistantId(String assistantId) {
            this.assistantId = Optional.ofNullable(assistantId);
            return this;
        }

        /**
         * <p>This is the assistant ID that will be used for the call. To use a transient assistant, use <code>assistant</code> instead.</p>
         * <p>To start a call with:</p>
         * <ul>
         * <li>Assistant, use <code>assistantId</code> or <code>assistant</code></li>
         * <li>Squad, use <code>squadId</code> or <code>squad</code></li>
         * <li>Workflow, use <code>workflowId</code> or <code>workflow</code></li>
         * </ul>
         */
        @java.lang.Override
        @JsonSetter(value = "assistantId", nulls = Nulls.SKIP)
        public _FinalStage assistantId(Optional<String> assistantId) {
            this.assistantId = assistantId;
            return this;
        }

        /**
         * <p>This is the campaign ID that the call belongs to.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        public _FinalStage campaignId(String campaignId) {
            this.campaignId = Optional.ofNullable(campaignId);
            return this;
        }

        /**
         * <p>This is the campaign ID that the call belongs to.</p>
         */
        @java.lang.Override
        @JsonSetter(value = "campaignId", nulls = Nulls.SKIP)
        public _FinalStage campaignId(Optional<String> campaignId) {
            this.campaignId = campaignId;
            return this;
        }

        /**
         * <p>The ID of the call as provided by the phone number service. callSid in Twilio. conversationUuid in Vonage. callControlId in Telnyx.</p>
         * <p>Only relevant for <code>outboundPhoneCall</code> and <code>inboundPhoneCall</code> type.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        public _FinalStage phoneCallProviderId(String phoneCallProviderId) {
            this.phoneCallProviderId = Optional.ofNullable(phoneCallProviderId);
            return this;
        }

        /**
         * <p>The ID of the call as provided by the phone number service. callSid in Twilio. conversationUuid in Vonage. callControlId in Telnyx.</p>
         * <p>Only relevant for <code>outboundPhoneCall</code> and <code>inboundPhoneCall</code> type.</p>
         */
        @java.lang.Override
        @JsonSetter(value = "phoneCallProviderId", nulls = Nulls.SKIP)
        public _FinalStage phoneCallProviderId(Optional<String> phoneCallProviderId) {
            this.phoneCallProviderId = phoneCallProviderId;
            return this;
        }

        /**
         * <p>These are the artifacts created from the call. Configure in <code>assistant.artifactPlan</code>.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        public _FinalStage artifact(Artifact artifact) {
            this.artifact = Optional.ofNullable(artifact);
            return this;
        }

        /**
         * <p>These are the artifacts created from the call. Configure in <code>assistant.artifactPlan</code>.</p>
         */
        @java.lang.Override
        @JsonSetter(value = "artifact", nulls = Nulls.SKIP)
        public _FinalStage artifact(Optional<Artifact> artifact) {
            this.artifact = artifact;
            return this;
        }

        /**
         * <p>This is to real-time monitor the call. Configure in <code>assistant.monitorPlan</code>.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        public _FinalStage monitor(Monitor monitor) {
            this.monitor = Optional.ofNullable(monitor);
            return this;
        }

        /**
         * <p>This is to real-time monitor the call. Configure in <code>assistant.monitorPlan</code>.</p>
         */
        @java.lang.Override
        @JsonSetter(value = "monitor", nulls = Nulls.SKIP)
        public _FinalStage monitor(Optional<Monitor> monitor) {
            this.monitor = monitor;
            return this;
        }

        /**
         * <p>This is the analysis of the call. Configure in <code>assistant.analysisPlan</code>.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        public _FinalStage analysis(Analysis analysis) {
            this.analysis = Optional.ofNullable(analysis);
            return this;
        }

        /**
         * <p>This is the analysis of the call. Configure in <code>assistant.analysisPlan</code>.</p>
         */
        @java.lang.Override
        @JsonSetter(value = "analysis", nulls = Nulls.SKIP)
        public _FinalStage analysis(Optional<Analysis> analysis) {
            this.analysis = analysis;
            return this;
        }

        /**
         * <p>This is a copy of assistant artifact plan. This isn't actually stored on the call but rather just returned in POST /call/web to enable artifact creation client side.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        public _FinalStage artifactPlan(ArtifactPlan artifactPlan) {
            this.artifactPlan = Optional.ofNullable(artifactPlan);
            return this;
        }

        /**
         * <p>This is a copy of assistant artifact plan. This isn't actually stored on the call but rather just returned in POST /call/web to enable artifact creation client side.</p>
         */
        @java.lang.Override
        @JsonSetter(value = "artifactPlan", nulls = Nulls.SKIP)
        public _FinalStage artifactPlan(Optional<ArtifactPlan> artifactPlan) {
            this.artifactPlan = artifactPlan;
            return this;
        }

        /**
         * <p>This is the cost of the call in USD.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        public _FinalStage costBreakdown(CostBreakdown costBreakdown) {
            this.costBreakdown = Optional.ofNullable(costBreakdown);
            return this;
        }

        /**
         * <p>This is the cost of the call in USD.</p>
         */
        @java.lang.Override
        @JsonSetter(value = "costBreakdown", nulls = Nulls.SKIP)
        public _FinalStage costBreakdown(Optional<CostBreakdown> costBreakdown) {
            this.costBreakdown = costBreakdown;
            return this;
        }

        /**
         * <p>This is the cost of the call in USD.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        public _FinalStage cost(Double cost) {
            this.cost = Optional.ofNullable(cost);
            return this;
        }

        /**
         * <p>This is the cost of the call in USD.</p>
         */
        @java.lang.Override
        @JsonSetter(value = "cost", nulls = Nulls.SKIP)
        public _FinalStage cost(Optional<Double> cost) {
            this.cost = cost;
            return this;
        }

        /**
         * <p>This is the ISO 8601 date-time string of when the call was ended.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        public _FinalStage endedAt(OffsetDateTime endedAt) {
            this.endedAt = Optional.ofNullable(endedAt);
            return this;
        }

        /**
         * <p>This is the ISO 8601 date-time string of when the call was ended.</p>
         */
        @java.lang.Override
        @JsonSetter(value = "endedAt", nulls = Nulls.SKIP)
        public _FinalStage endedAt(Optional<OffsetDateTime> endedAt) {
            this.endedAt = endedAt;
            return this;
        }

        /**
         * <p>This is the ISO 8601 date-time string of when the call was started.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        public _FinalStage startedAt(OffsetDateTime startedAt) {
            this.startedAt = Optional.ofNullable(startedAt);
            return this;
        }

        /**
         * <p>This is the ISO 8601 date-time string of when the call was started.</p>
         */
        @java.lang.Override
        @JsonSetter(value = "startedAt", nulls = Nulls.SKIP)
        public _FinalStage startedAt(Optional<OffsetDateTime> startedAt) {
            this.startedAt = startedAt;
            return this;
        }

        /**
         * <p>This is the destination where the call ended up being transferred to. If the call was not transferred, this will be empty.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        public _FinalStage destination(CallDestination destination) {
            this.destination = Optional.ofNullable(destination);
            return this;
        }

        /**
         * <p>This is the destination where the call ended up being transferred to. If the call was not transferred, this will be empty.</p>
         */
        @java.lang.Override
        @JsonSetter(value = "destination", nulls = Nulls.SKIP)
        public _FinalStage destination(Optional<CallDestination> destination) {
            this.destination = destination;
            return this;
        }

        /**
         * <p>This is the explanation for how the call ended.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        public _FinalStage endedReason(CallEndedReason endedReason) {
            this.endedReason = Optional.ofNullable(endedReason);
            return this;
        }

        /**
         * <p>This is the explanation for how the call ended.</p>
         */
        @java.lang.Override
        @JsonSetter(value = "endedReason", nulls = Nulls.SKIP)
        public _FinalStage endedReason(Optional<CallEndedReason> endedReason) {
            this.endedReason = endedReason;
            return this;
        }

        /**
         * <p>This is the status of the call.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        public _FinalStage status(CallStatus status) {
            this.status = Optional.ofNullable(status);
            return this;
        }

        /**
         * <p>This is the status of the call.</p>
         */
        @java.lang.Override
        @JsonSetter(value = "status", nulls = Nulls.SKIP)
        public _FinalStage status(Optional<CallStatus> status) {
            this.status = status;
            return this;
        }

        /**
         * <p>This is the transport of the phone call.</p>
         * <p>Only relevant for <code>outboundPhoneCall</code> and <code>inboundPhoneCall</code> type.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        public _FinalStage phoneCallTransport(CallPhoneCallTransport phoneCallTransport) {
            this.phoneCallTransport = Optional.ofNullable(phoneCallTransport);
            return this;
        }

        /**
         * <p>This is the transport of the phone call.</p>
         * <p>Only relevant for <code>outboundPhoneCall</code> and <code>inboundPhoneCall</code> type.</p>
         */
        @java.lang.Override
        @JsonSetter(value = "phoneCallTransport", nulls = Nulls.SKIP)
        public _FinalStage phoneCallTransport(Optional<CallPhoneCallTransport> phoneCallTransport) {
            this.phoneCallTransport = phoneCallTransport;
            return this;
        }

        /**
         * <p>This is the provider of the call.</p>
         * <p>Only relevant for <code>outboundPhoneCall</code> and <code>inboundPhoneCall</code> type.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        public _FinalStage phoneCallProvider(CallPhoneCallProvider phoneCallProvider) {
            this.phoneCallProvider = Optional.ofNullable(phoneCallProvider);
            return this;
        }

        /**
         * <p>This is the provider of the call.</p>
         * <p>Only relevant for <code>outboundPhoneCall</code> and <code>inboundPhoneCall</code> type.</p>
         */
        @java.lang.Override
        @JsonSetter(value = "phoneCallProvider", nulls = Nulls.SKIP)
        public _FinalStage phoneCallProvider(Optional<CallPhoneCallProvider> phoneCallProvider) {
            this.phoneCallProvider = phoneCallProvider;
            return this;
        }

        @java.lang.Override
        public _FinalStage messages(List<CallMessagesItem> messages) {
            this.messages = Optional.ofNullable(messages);
            return this;
        }

        @java.lang.Override
        @JsonSetter(value = "messages", nulls = Nulls.SKIP)
        public _FinalStage messages(Optional<List<CallMessagesItem>> messages) {
            this.messages = messages;
            return this;
        }

        /**
         * <p>These are the costs of individual components of the call in USD.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        public _FinalStage costs(List<CallCostsItem> costs) {
            this.costs = Optional.ofNullable(costs);
            return this;
        }

        /**
         * <p>These are the costs of individual components of the call in USD.</p>
         */
        @java.lang.Override
        @JsonSetter(value = "costs", nulls = Nulls.SKIP)
        public _FinalStage costs(Optional<List<CallCostsItem>> costs) {
            this.costs = costs;
            return this;
        }

        /**
         * <p>This is the type of call.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        public _FinalStage type(CallType type) {
            this.type = Optional.ofNullable(type);
            return this;
        }

        /**
         * <p>This is the type of call.</p>
         */
        @java.lang.Override
        @JsonSetter(value = "type", nulls = Nulls.SKIP)
        public _FinalStage type(Optional<CallType> type) {
            this.type = type;
            return this;
        }

        @java.lang.Override
        public Call build() {
            return new Call(
                    type,
                    costs,
                    messages,
                    phoneCallProvider,
                    phoneCallTransport,
                    status,
                    endedReason,
                    destination,
                    id,
                    orgId,
                    createdAt,
                    updatedAt,
                    startedAt,
                    endedAt,
                    cost,
                    costBreakdown,
                    artifactPlan,
                    analysis,
                    monitor,
                    artifact,
                    phoneCallProviderId,
                    campaignId,
                    assistantId,
                    assistant,
                    assistantOverrides,
                    squadId,
                    squad,
                    workflowId,
                    workflow,
                    workflowOverrides,
                    phoneNumberId,
                    phoneNumber,
                    customerId,
                    customer,
                    name,
                    schedulePlan,
                    transport,
                    additionalProperties);
        }
    }
}
