/**
 * This file was auto-generated by Fern from our API Definition.
 */
package com.vapi.api.types;

import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.annotation.Nulls;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.vapi.api.core.ObjectMappers;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;

@JsonInclude(JsonInclude.Include.NON_ABSENT)
@JsonDeserialize(builder = SummaryPlan.Builder.class)
public final class SummaryPlan {
    private final Optional<List<Map<String, Object>>> messages;

    private final Optional<Boolean> enabled;

    private final Optional<Double> timeoutSeconds;

    private final Map<String, Object> additionalProperties;

    private SummaryPlan(
            Optional<List<Map<String, Object>>> messages,
            Optional<Boolean> enabled,
            Optional<Double> timeoutSeconds,
            Map<String, Object> additionalProperties) {
        this.messages = messages;
        this.enabled = enabled;
        this.timeoutSeconds = timeoutSeconds;
        this.additionalProperties = additionalProperties;
    }

    /**
     * @return These are the messages used to generate the summary.
     * <p>@default: <code>[ { &quot;role&quot;: &quot;system&quot;, &quot;content&quot;: &quot;You are an expert note-taker. You will be given a transcript of a call. Summarize the call in 2-3 sentences. DO NOT return anything except the summary.&quot; }, { &quot;role&quot;: &quot;user&quot;, &quot;content&quot;: &quot;Here is the transcript:\n\n{{transcript}}\n\n. Here is the ended reason of the call:\n\n{{endedReason}}\n\n&quot; } ]</code></p>
     * <p>You can customize by providing any messages you want.</p>
     * <p>Here are the template variables available:</p>
     * <ul>
     * <li>{{transcript}}: The transcript of the call from <code>call.artifact.transcript</code></li>
     * <li>{{systemPrompt}}: The system prompt of the call from <code>assistant.model.messages[type=system].content</code></li>
     * <li>{{endedReason}}: The ended reason of the call from <code>call.endedReason</code></li>
     * </ul>
     */
    @JsonProperty("messages")
    public Optional<List<Map<String, Object>>> getMessages() {
        return messages;
    }

    /**
     * @return This determines whether a summary is generated and stored in <code>call.analysis.summary</code>. Defaults to true.
     * <p>Usage:</p>
     * <ul>
     * <li>If you want to disable the summary, set this to false.</li>
     * </ul>
     * <p>@default true</p>
     */
    @JsonProperty("enabled")
    public Optional<Boolean> getEnabled() {
        return enabled;
    }

    /**
     * @return This is how long the request is tried before giving up. When request times out, <code>call.analysis.summary</code> will be empty.
     * <p>Usage:</p>
     * <ul>
     * <li>To guarantee the summary is generated, set this value high. Note, this will delay the end of call report in cases where model is slow to respond.</li>
     * </ul>
     * <p>@default 5 seconds</p>
     */
    @JsonProperty("timeoutSeconds")
    public Optional<Double> getTimeoutSeconds() {
        return timeoutSeconds;
    }

    @java.lang.Override
    public boolean equals(Object other) {
        if (this == other) return true;
        return other instanceof SummaryPlan && equalTo((SummaryPlan) other);
    }

    @JsonAnyGetter
    public Map<String, Object> getAdditionalProperties() {
        return this.additionalProperties;
    }

    private boolean equalTo(SummaryPlan other) {
        return messages.equals(other.messages)
                && enabled.equals(other.enabled)
                && timeoutSeconds.equals(other.timeoutSeconds);
    }

    @java.lang.Override
    public int hashCode() {
        return Objects.hash(this.messages, this.enabled, this.timeoutSeconds);
    }

    @java.lang.Override
    public String toString() {
        return ObjectMappers.stringify(this);
    }

    public static Builder builder() {
        return new Builder();
    }

    @JsonIgnoreProperties(ignoreUnknown = true)
    public static final class Builder {
        private Optional<List<Map<String, Object>>> messages = Optional.empty();

        private Optional<Boolean> enabled = Optional.empty();

        private Optional<Double> timeoutSeconds = Optional.empty();

        @JsonAnySetter
        private Map<String, Object> additionalProperties = new HashMap<>();

        private Builder() {}

        public Builder from(SummaryPlan other) {
            messages(other.getMessages());
            enabled(other.getEnabled());
            timeoutSeconds(other.getTimeoutSeconds());
            return this;
        }

        /**
         * <p>These are the messages used to generate the summary.</p>
         * <p>@default: <code>[ { &quot;role&quot;: &quot;system&quot;, &quot;content&quot;: &quot;You are an expert note-taker. You will be given a transcript of a call. Summarize the call in 2-3 sentences. DO NOT return anything except the summary.&quot; }, { &quot;role&quot;: &quot;user&quot;, &quot;content&quot;: &quot;Here is the transcript:\n\n{{transcript}}\n\n. Here is the ended reason of the call:\n\n{{endedReason}}\n\n&quot; } ]</code></p>
         * <p>You can customize by providing any messages you want.</p>
         * <p>Here are the template variables available:</p>
         * <ul>
         * <li>{{transcript}}: The transcript of the call from <code>call.artifact.transcript</code></li>
         * <li>{{systemPrompt}}: The system prompt of the call from <code>assistant.model.messages[type=system].content</code></li>
         * <li>{{endedReason}}: The ended reason of the call from <code>call.endedReason</code></li>
         * </ul>
         */
        @JsonSetter(value = "messages", nulls = Nulls.SKIP)
        public Builder messages(Optional<List<Map<String, Object>>> messages) {
            this.messages = messages;
            return this;
        }

        public Builder messages(List<Map<String, Object>> messages) {
            this.messages = Optional.ofNullable(messages);
            return this;
        }

        /**
         * <p>This determines whether a summary is generated and stored in <code>call.analysis.summary</code>. Defaults to true.</p>
         * <p>Usage:</p>
         * <ul>
         * <li>If you want to disable the summary, set this to false.</li>
         * </ul>
         * <p>@default true</p>
         */
        @JsonSetter(value = "enabled", nulls = Nulls.SKIP)
        public Builder enabled(Optional<Boolean> enabled) {
            this.enabled = enabled;
            return this;
        }

        public Builder enabled(Boolean enabled) {
            this.enabled = Optional.ofNullable(enabled);
            return this;
        }

        /**
         * <p>This is how long the request is tried before giving up. When request times out, <code>call.analysis.summary</code> will be empty.</p>
         * <p>Usage:</p>
         * <ul>
         * <li>To guarantee the summary is generated, set this value high. Note, this will delay the end of call report in cases where model is slow to respond.</li>
         * </ul>
         * <p>@default 5 seconds</p>
         */
        @JsonSetter(value = "timeoutSeconds", nulls = Nulls.SKIP)
        public Builder timeoutSeconds(Optional<Double> timeoutSeconds) {
            this.timeoutSeconds = timeoutSeconds;
            return this;
        }

        public Builder timeoutSeconds(Double timeoutSeconds) {
            this.timeoutSeconds = Optional.ofNullable(timeoutSeconds);
            return this;
        }

        public SummaryPlan build() {
            return new SummaryPlan(messages, enabled, timeoutSeconds, additionalProperties);
        }
    }
}
