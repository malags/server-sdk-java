/**
 * This file was auto-generated by Fern from our API Definition.
 */
package com.vapi.api.types;

import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.annotation.Nulls;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.vapi.api.core.ObjectMappers;
import java.util.HashMap;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import org.jetbrains.annotations.NotNull;

@JsonInclude(JsonInclude.Include.NON_ABSENT)
@JsonDeserialize(builder = SupabaseBucketPlan.Builder.class)
public final class SupabaseBucketPlan {
    private final SupabaseBucketPlanRegion region;

    private final String url;

    private final String accessKeyId;

    private final String secretAccessKey;

    private final String name;

    private final Optional<String> path;

    private final Map<String, Object> additionalProperties;

    private SupabaseBucketPlan(
            SupabaseBucketPlanRegion region,
            String url,
            String accessKeyId,
            String secretAccessKey,
            String name,
            Optional<String> path,
            Map<String, Object> additionalProperties) {
        this.region = region;
        this.url = url;
        this.accessKeyId = accessKeyId;
        this.secretAccessKey = secretAccessKey;
        this.name = name;
        this.path = path;
        this.additionalProperties = additionalProperties;
    }

    /**
     * @return This is the S3 Region. It should look like us-east-1
     * It should be one of the supabase regions defined in the SUPABASE_REGION enum
     * Check https://supabase.com/docs/guides/platform/regions for up to date regions
     */
    @JsonProperty("region")
    public SupabaseBucketPlanRegion getRegion() {
        return region;
    }

    /**
     * @return This is the S3 compatible URL for Supabase S3
     * This should look like https://&lt;project-ID&gt;.supabase.co/storage/v1/s3
     */
    @JsonProperty("url")
    public String getUrl() {
        return url;
    }

    /**
     * @return This is the Supabase S3 Access Key ID.
     * The user creates this in the Supabase project Storage settings
     */
    @JsonProperty("accessKeyId")
    public String getAccessKeyId() {
        return accessKeyId;
    }

    /**
     * @return This is the Supabase S3 Secret Access Key.
     * The user creates this in the Supabase project Storage settings along with the access key id
     */
    @JsonProperty("secretAccessKey")
    public String getSecretAccessKey() {
        return secretAccessKey;
    }

    /**
     * @return This is the Supabase S3 Bucket Name.
     * The user must create this in Supabase under Storage &gt; Buckets
     * A bucket that does not exist will not be checked now, but file uploads will fail
     */
    @JsonProperty("name")
    public String getName() {
        return name;
    }

    /**
     * @return This is the Supabase S3 Bucket Folder Path.
     * The user can create this in Supabase under Storage &gt; Buckets
     * A path that does not exist will not be checked now, but file uploads will fail
     * A Path is like a folder in the bucket
     * Eg. If the bucket is called &quot;my-bucket&quot; and the path is &quot;my-folder&quot;, the full path is &quot;my-bucket/my-folder&quot;
     */
    @JsonProperty("path")
    public Optional<String> getPath() {
        return path;
    }

    @java.lang.Override
    public boolean equals(Object other) {
        if (this == other) return true;
        return other instanceof SupabaseBucketPlan && equalTo((SupabaseBucketPlan) other);
    }

    @JsonAnyGetter
    public Map<String, Object> getAdditionalProperties() {
        return this.additionalProperties;
    }

    private boolean equalTo(SupabaseBucketPlan other) {
        return region.equals(other.region)
                && url.equals(other.url)
                && accessKeyId.equals(other.accessKeyId)
                && secretAccessKey.equals(other.secretAccessKey)
                && name.equals(other.name)
                && path.equals(other.path);
    }

    @java.lang.Override
    public int hashCode() {
        return Objects.hash(this.region, this.url, this.accessKeyId, this.secretAccessKey, this.name, this.path);
    }

    @java.lang.Override
    public String toString() {
        return ObjectMappers.stringify(this);
    }

    public static RegionStage builder() {
        return new Builder();
    }

    public interface RegionStage {
        /**
         * <p>This is the S3 Region. It should look like us-east-1
         * It should be one of the supabase regions defined in the SUPABASE_REGION enum
         * Check https://supabase.com/docs/guides/platform/regions for up to date regions</p>
         */
        UrlStage region(@NotNull SupabaseBucketPlanRegion region);

        Builder from(SupabaseBucketPlan other);
    }

    public interface UrlStage {
        /**
         * <p>This is the S3 compatible URL for Supabase S3
         * This should look like https://&lt;project-ID&gt;.supabase.co/storage/v1/s3</p>
         */
        AccessKeyIdStage url(@NotNull String url);
    }

    public interface AccessKeyIdStage {
        /**
         * <p>This is the Supabase S3 Access Key ID.
         * The user creates this in the Supabase project Storage settings</p>
         */
        SecretAccessKeyStage accessKeyId(@NotNull String accessKeyId);
    }

    public interface SecretAccessKeyStage {
        /**
         * <p>This is the Supabase S3 Secret Access Key.
         * The user creates this in the Supabase project Storage settings along with the access key id</p>
         */
        NameStage secretAccessKey(@NotNull String secretAccessKey);
    }

    public interface NameStage {
        /**
         * <p>This is the Supabase S3 Bucket Name.
         * The user must create this in Supabase under Storage &gt; Buckets
         * A bucket that does not exist will not be checked now, but file uploads will fail</p>
         */
        _FinalStage name(@NotNull String name);
    }

    public interface _FinalStage {
        SupabaseBucketPlan build();

        /**
         * <p>This is the Supabase S3 Bucket Folder Path.
         * The user can create this in Supabase under Storage &gt; Buckets
         * A path that does not exist will not be checked now, but file uploads will fail
         * A Path is like a folder in the bucket
         * Eg. If the bucket is called &quot;my-bucket&quot; and the path is &quot;my-folder&quot;, the full path is &quot;my-bucket/my-folder&quot;</p>
         */
        _FinalStage path(Optional<String> path);

        _FinalStage path(String path);
    }

    @JsonIgnoreProperties(ignoreUnknown = true)
    public static final class Builder
            implements RegionStage, UrlStage, AccessKeyIdStage, SecretAccessKeyStage, NameStage, _FinalStage {
        private SupabaseBucketPlanRegion region;

        private String url;

        private String accessKeyId;

        private String secretAccessKey;

        private String name;

        private Optional<String> path = Optional.empty();

        @JsonAnySetter
        private Map<String, Object> additionalProperties = new HashMap<>();

        private Builder() {}

        @java.lang.Override
        public Builder from(SupabaseBucketPlan other) {
            region(other.getRegion());
            url(other.getUrl());
            accessKeyId(other.getAccessKeyId());
            secretAccessKey(other.getSecretAccessKey());
            name(other.getName());
            path(other.getPath());
            return this;
        }

        /**
         * <p>This is the S3 Region. It should look like us-east-1
         * It should be one of the supabase regions defined in the SUPABASE_REGION enum
         * Check https://supabase.com/docs/guides/platform/regions for up to date regions</p>
         * <p>This is the S3 Region. It should look like us-east-1
         * It should be one of the supabase regions defined in the SUPABASE_REGION enum
         * Check https://supabase.com/docs/guides/platform/regions for up to date regions</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        @JsonSetter("region")
        public UrlStage region(@NotNull SupabaseBucketPlanRegion region) {
            this.region = Objects.requireNonNull(region, "region must not be null");
            return this;
        }

        /**
         * <p>This is the S3 compatible URL for Supabase S3
         * This should look like https://&lt;project-ID&gt;.supabase.co/storage/v1/s3</p>
         * <p>This is the S3 compatible URL for Supabase S3
         * This should look like https://&lt;project-ID&gt;.supabase.co/storage/v1/s3</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        @JsonSetter("url")
        public AccessKeyIdStage url(@NotNull String url) {
            this.url = Objects.requireNonNull(url, "url must not be null");
            return this;
        }

        /**
         * <p>This is the Supabase S3 Access Key ID.
         * The user creates this in the Supabase project Storage settings</p>
         * <p>This is the Supabase S3 Access Key ID.
         * The user creates this in the Supabase project Storage settings</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        @JsonSetter("accessKeyId")
        public SecretAccessKeyStage accessKeyId(@NotNull String accessKeyId) {
            this.accessKeyId = Objects.requireNonNull(accessKeyId, "accessKeyId must not be null");
            return this;
        }

        /**
         * <p>This is the Supabase S3 Secret Access Key.
         * The user creates this in the Supabase project Storage settings along with the access key id</p>
         * <p>This is the Supabase S3 Secret Access Key.
         * The user creates this in the Supabase project Storage settings along with the access key id</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        @JsonSetter("secretAccessKey")
        public NameStage secretAccessKey(@NotNull String secretAccessKey) {
            this.secretAccessKey = Objects.requireNonNull(secretAccessKey, "secretAccessKey must not be null");
            return this;
        }

        /**
         * <p>This is the Supabase S3 Bucket Name.
         * The user must create this in Supabase under Storage &gt; Buckets
         * A bucket that does not exist will not be checked now, but file uploads will fail</p>
         * <p>This is the Supabase S3 Bucket Name.
         * The user must create this in Supabase under Storage &gt; Buckets
         * A bucket that does not exist will not be checked now, but file uploads will fail</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        @JsonSetter("name")
        public _FinalStage name(@NotNull String name) {
            this.name = Objects.requireNonNull(name, "name must not be null");
            return this;
        }

        /**
         * <p>This is the Supabase S3 Bucket Folder Path.
         * The user can create this in Supabase under Storage &gt; Buckets
         * A path that does not exist will not be checked now, but file uploads will fail
         * A Path is like a folder in the bucket
         * Eg. If the bucket is called &quot;my-bucket&quot; and the path is &quot;my-folder&quot;, the full path is &quot;my-bucket/my-folder&quot;</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        public _FinalStage path(String path) {
            this.path = Optional.ofNullable(path);
            return this;
        }

        /**
         * <p>This is the Supabase S3 Bucket Folder Path.
         * The user can create this in Supabase under Storage &gt; Buckets
         * A path that does not exist will not be checked now, but file uploads will fail
         * A Path is like a folder in the bucket
         * Eg. If the bucket is called &quot;my-bucket&quot; and the path is &quot;my-folder&quot;, the full path is &quot;my-bucket/my-folder&quot;</p>
         */
        @java.lang.Override
        @JsonSetter(value = "path", nulls = Nulls.SKIP)
        public _FinalStage path(Optional<String> path) {
            this.path = path;
            return this;
        }

        @java.lang.Override
        public SupabaseBucketPlan build() {
            return new SupabaseBucketPlan(region, url, accessKeyId, secretAccessKey, name, path, additionalProperties);
        }
    }
}
