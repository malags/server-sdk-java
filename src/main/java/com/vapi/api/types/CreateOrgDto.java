/**
 * This file was auto-generated by Fern from our API Definition.
 */
package com.vapi.api.types;

import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.annotation.Nulls;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.vapi.api.core.ObjectMappers;
import java.util.HashMap;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;

@JsonInclude(JsonInclude.Include.NON_ABSENT)
@JsonDeserialize(builder = CreateOrgDto.Builder.class)
public final class CreateOrgDto {
    private final Optional<Boolean> hipaaEnabled;

    private final Optional<String> subscriptionId;

    private final Optional<String> name;

    private final Optional<CreateOrgDtoChannel> channel;

    private final Optional<Double> billingLimit;

    private final Optional<Server> server;

    private final Optional<Double> concurrencyLimit;

    private final Optional<CompliancePlan> compliancePlan;

    private final Map<String, Object> additionalProperties;

    private CreateOrgDto(
            Optional<Boolean> hipaaEnabled,
            Optional<String> subscriptionId,
            Optional<String> name,
            Optional<CreateOrgDtoChannel> channel,
            Optional<Double> billingLimit,
            Optional<Server> server,
            Optional<Double> concurrencyLimit,
            Optional<CompliancePlan> compliancePlan,
            Map<String, Object> additionalProperties) {
        this.hipaaEnabled = hipaaEnabled;
        this.subscriptionId = subscriptionId;
        this.name = name;
        this.channel = channel;
        this.billingLimit = billingLimit;
        this.server = server;
        this.concurrencyLimit = concurrencyLimit;
        this.compliancePlan = compliancePlan;
        this.additionalProperties = additionalProperties;
    }

    /**
     * @return When this is enabled, no logs, recordings, or transcriptions will be stored. At the end of the call, you will still receive an end-of-call-report message to store on your server. Defaults to false.
     * When HIPAA is enabled, only OpenAI/Custom LLM or Azure Providers will be available for LLM and Voice respectively.
     * This is due to the compliance requirements of HIPAA. Other providers may not meet these requirements.
     */
    @JsonProperty("hipaaEnabled")
    public Optional<Boolean> getHipaaEnabled() {
        return hipaaEnabled;
    }

    /**
     * @return This is the ID of the subscription the org belongs to.
     */
    @JsonProperty("subscriptionId")
    public Optional<String> getSubscriptionId() {
        return subscriptionId;
    }

    /**
     * @return This is the name of the org. This is just for your own reference.
     */
    @JsonProperty("name")
    public Optional<String> getName() {
        return name;
    }

    /**
     * @return This is the channel of the org. There is the cluster the API traffic for the org will be directed.
     */
    @JsonProperty("channel")
    public Optional<CreateOrgDtoChannel> getChannel() {
        return channel;
    }

    /**
     * @return This is the monthly billing limit for the org. To go beyond $1000/mo, please contact us at support@vapi.ai.
     */
    @JsonProperty("billingLimit")
    public Optional<Double> getBillingLimit() {
        return billingLimit;
    }

    /**
     * @return This is where Vapi will send webhooks. You can find all webhooks available along with their shape in ServerMessage schema.
     * <p>The order of precedence is:</p>
     * <ol>
     * <li>assistant.server</li>
     * <li>phoneNumber.server</li>
     * <li>org.server</li>
     * </ol>
     */
    @JsonProperty("server")
    public Optional<Server> getServer() {
        return server;
    }

    /**
     * @return This is the concurrency limit for the org. This is the maximum number of calls that can be active at any given time. To go beyond 10, please contact us at support@vapi.ai.
     */
    @JsonProperty("concurrencyLimit")
    public Optional<Double> getConcurrencyLimit() {
        return concurrencyLimit;
    }

    /**
     * @return Stores the information about the compliance plan enforced at the organization level. Currently pciEnabled is supported through this field.
     * When this is enabled, any logs, recordings, or transcriptions will be shipped to the customer endpoints if provided else lost.
     * At the end of the call, you will receive an end-of-call-report message to store on your server, if webhook is provided.
     * Defaults to false.
     * When PCI is enabled, only PCI-compliant Providers will be available for LLM, Voice and transcribers.
     * This is due to the compliance requirements of PCI. Other providers may not meet these requirements.
     */
    @JsonProperty("compliancePlan")
    public Optional<CompliancePlan> getCompliancePlan() {
        return compliancePlan;
    }

    @java.lang.Override
    public boolean equals(Object other) {
        if (this == other) return true;
        return other instanceof CreateOrgDto && equalTo((CreateOrgDto) other);
    }

    @JsonAnyGetter
    public Map<String, Object> getAdditionalProperties() {
        return this.additionalProperties;
    }

    private boolean equalTo(CreateOrgDto other) {
        return hipaaEnabled.equals(other.hipaaEnabled)
                && subscriptionId.equals(other.subscriptionId)
                && name.equals(other.name)
                && channel.equals(other.channel)
                && billingLimit.equals(other.billingLimit)
                && server.equals(other.server)
                && concurrencyLimit.equals(other.concurrencyLimit)
                && compliancePlan.equals(other.compliancePlan);
    }

    @java.lang.Override
    public int hashCode() {
        return Objects.hash(
                this.hipaaEnabled,
                this.subscriptionId,
                this.name,
                this.channel,
                this.billingLimit,
                this.server,
                this.concurrencyLimit,
                this.compliancePlan);
    }

    @java.lang.Override
    public String toString() {
        return ObjectMappers.stringify(this);
    }

    public static Builder builder() {
        return new Builder();
    }

    @JsonIgnoreProperties(ignoreUnknown = true)
    public static final class Builder {
        private Optional<Boolean> hipaaEnabled = Optional.empty();

        private Optional<String> subscriptionId = Optional.empty();

        private Optional<String> name = Optional.empty();

        private Optional<CreateOrgDtoChannel> channel = Optional.empty();

        private Optional<Double> billingLimit = Optional.empty();

        private Optional<Server> server = Optional.empty();

        private Optional<Double> concurrencyLimit = Optional.empty();

        private Optional<CompliancePlan> compliancePlan = Optional.empty();

        @JsonAnySetter
        private Map<String, Object> additionalProperties = new HashMap<>();

        private Builder() {}

        public Builder from(CreateOrgDto other) {
            hipaaEnabled(other.getHipaaEnabled());
            subscriptionId(other.getSubscriptionId());
            name(other.getName());
            channel(other.getChannel());
            billingLimit(other.getBillingLimit());
            server(other.getServer());
            concurrencyLimit(other.getConcurrencyLimit());
            compliancePlan(other.getCompliancePlan());
            return this;
        }

        /**
         * <p>When this is enabled, no logs, recordings, or transcriptions will be stored. At the end of the call, you will still receive an end-of-call-report message to store on your server. Defaults to false.
         * When HIPAA is enabled, only OpenAI/Custom LLM or Azure Providers will be available for LLM and Voice respectively.
         * This is due to the compliance requirements of HIPAA. Other providers may not meet these requirements.</p>
         */
        @JsonSetter(value = "hipaaEnabled", nulls = Nulls.SKIP)
        public Builder hipaaEnabled(Optional<Boolean> hipaaEnabled) {
            this.hipaaEnabled = hipaaEnabled;
            return this;
        }

        public Builder hipaaEnabled(Boolean hipaaEnabled) {
            this.hipaaEnabled = Optional.ofNullable(hipaaEnabled);
            return this;
        }

        /**
         * <p>This is the ID of the subscription the org belongs to.</p>
         */
        @JsonSetter(value = "subscriptionId", nulls = Nulls.SKIP)
        public Builder subscriptionId(Optional<String> subscriptionId) {
            this.subscriptionId = subscriptionId;
            return this;
        }

        public Builder subscriptionId(String subscriptionId) {
            this.subscriptionId = Optional.ofNullable(subscriptionId);
            return this;
        }

        /**
         * <p>This is the name of the org. This is just for your own reference.</p>
         */
        @JsonSetter(value = "name", nulls = Nulls.SKIP)
        public Builder name(Optional<String> name) {
            this.name = name;
            return this;
        }

        public Builder name(String name) {
            this.name = Optional.ofNullable(name);
            return this;
        }

        /**
         * <p>This is the channel of the org. There is the cluster the API traffic for the org will be directed.</p>
         */
        @JsonSetter(value = "channel", nulls = Nulls.SKIP)
        public Builder channel(Optional<CreateOrgDtoChannel> channel) {
            this.channel = channel;
            return this;
        }

        public Builder channel(CreateOrgDtoChannel channel) {
            this.channel = Optional.ofNullable(channel);
            return this;
        }

        /**
         * <p>This is the monthly billing limit for the org. To go beyond $1000/mo, please contact us at support@vapi.ai.</p>
         */
        @JsonSetter(value = "billingLimit", nulls = Nulls.SKIP)
        public Builder billingLimit(Optional<Double> billingLimit) {
            this.billingLimit = billingLimit;
            return this;
        }

        public Builder billingLimit(Double billingLimit) {
            this.billingLimit = Optional.ofNullable(billingLimit);
            return this;
        }

        /**
         * <p>This is where Vapi will send webhooks. You can find all webhooks available along with their shape in ServerMessage schema.</p>
         * <p>The order of precedence is:</p>
         * <ol>
         * <li>assistant.server</li>
         * <li>phoneNumber.server</li>
         * <li>org.server</li>
         * </ol>
         */
        @JsonSetter(value = "server", nulls = Nulls.SKIP)
        public Builder server(Optional<Server> server) {
            this.server = server;
            return this;
        }

        public Builder server(Server server) {
            this.server = Optional.ofNullable(server);
            return this;
        }

        /**
         * <p>This is the concurrency limit for the org. This is the maximum number of calls that can be active at any given time. To go beyond 10, please contact us at support@vapi.ai.</p>
         */
        @JsonSetter(value = "concurrencyLimit", nulls = Nulls.SKIP)
        public Builder concurrencyLimit(Optional<Double> concurrencyLimit) {
            this.concurrencyLimit = concurrencyLimit;
            return this;
        }

        public Builder concurrencyLimit(Double concurrencyLimit) {
            this.concurrencyLimit = Optional.ofNullable(concurrencyLimit);
            return this;
        }

        /**
         * <p>Stores the information about the compliance plan enforced at the organization level. Currently pciEnabled is supported through this field.
         * When this is enabled, any logs, recordings, or transcriptions will be shipped to the customer endpoints if provided else lost.
         * At the end of the call, you will receive an end-of-call-report message to store on your server, if webhook is provided.
         * Defaults to false.
         * When PCI is enabled, only PCI-compliant Providers will be available for LLM, Voice and transcribers.
         * This is due to the compliance requirements of PCI. Other providers may not meet these requirements.</p>
         */
        @JsonSetter(value = "compliancePlan", nulls = Nulls.SKIP)
        public Builder compliancePlan(Optional<CompliancePlan> compliancePlan) {
            this.compliancePlan = compliancePlan;
            return this;
        }

        public Builder compliancePlan(CompliancePlan compliancePlan) {
            this.compliancePlan = Optional.ofNullable(compliancePlan);
            return this;
        }

        public CreateOrgDto build() {
            return new CreateOrgDto(
                    hipaaEnabled,
                    subscriptionId,
                    name,
                    channel,
                    billingLimit,
                    server,
                    concurrencyLimit,
                    compliancePlan,
                    additionalProperties);
        }
    }
}
