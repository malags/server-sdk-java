/**
 * This file was auto-generated by Fern from our API Definition.
 */
package com.vapi.api.types;

import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.annotation.Nulls;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.vapi.api.core.ObjectMappers;
import java.util.HashMap;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;

@JsonInclude(JsonInclude.Include.NON_ABSENT)
@JsonDeserialize(builder = KeypadInputPlan.Builder.class)
public final class KeypadInputPlan {
    private final Optional<Boolean> enabled;

    private final Optional<Double> timeoutSeconds;

    private final Optional<KeypadInputPlanDelimiters> delimiters;

    private final Map<String, Object> additionalProperties;

    private KeypadInputPlan(
            Optional<Boolean> enabled,
            Optional<Double> timeoutSeconds,
            Optional<KeypadInputPlanDelimiters> delimiters,
            Map<String, Object> additionalProperties) {
        this.enabled = enabled;
        this.timeoutSeconds = timeoutSeconds;
        this.delimiters = delimiters;
        this.additionalProperties = additionalProperties;
    }

    /**
     * @return This keeps track of whether the user has enabled keypad input.
     * By default, it is off.
     * <p>@default false</p>
     */
    @JsonProperty("enabled")
    public Optional<Boolean> getEnabled() {
        return enabled;
    }

    /**
     * @return This is the time in seconds to wait before processing the input.
     * If the input is not received within this time, the input will be ignored.
     * If set to &quot;off&quot;, the input will be processed when the user enters a delimiter or immediately if no delimiter is used.
     * <p>@default 2</p>
     */
    @JsonProperty("timeoutSeconds")
    public Optional<Double> getTimeoutSeconds() {
        return timeoutSeconds;
    }

    /**
     * @return This is the delimiter(s) that will be used to process the input.
     * Can be '#', '*', or an empty array.
     */
    @JsonProperty("delimiters")
    public Optional<KeypadInputPlanDelimiters> getDelimiters() {
        return delimiters;
    }

    @java.lang.Override
    public boolean equals(Object other) {
        if (this == other) return true;
        return other instanceof KeypadInputPlan && equalTo((KeypadInputPlan) other);
    }

    @JsonAnyGetter
    public Map<String, Object> getAdditionalProperties() {
        return this.additionalProperties;
    }

    private boolean equalTo(KeypadInputPlan other) {
        return enabled.equals(other.enabled)
                && timeoutSeconds.equals(other.timeoutSeconds)
                && delimiters.equals(other.delimiters);
    }

    @java.lang.Override
    public int hashCode() {
        return Objects.hash(this.enabled, this.timeoutSeconds, this.delimiters);
    }

    @java.lang.Override
    public String toString() {
        return ObjectMappers.stringify(this);
    }

    public static Builder builder() {
        return new Builder();
    }

    @JsonIgnoreProperties(ignoreUnknown = true)
    public static final class Builder {
        private Optional<Boolean> enabled = Optional.empty();

        private Optional<Double> timeoutSeconds = Optional.empty();

        private Optional<KeypadInputPlanDelimiters> delimiters = Optional.empty();

        @JsonAnySetter
        private Map<String, Object> additionalProperties = new HashMap<>();

        private Builder() {}

        public Builder from(KeypadInputPlan other) {
            enabled(other.getEnabled());
            timeoutSeconds(other.getTimeoutSeconds());
            delimiters(other.getDelimiters());
            return this;
        }

        /**
         * <p>This keeps track of whether the user has enabled keypad input.
         * By default, it is off.</p>
         * <p>@default false</p>
         */
        @JsonSetter(value = "enabled", nulls = Nulls.SKIP)
        public Builder enabled(Optional<Boolean> enabled) {
            this.enabled = enabled;
            return this;
        }

        public Builder enabled(Boolean enabled) {
            this.enabled = Optional.ofNullable(enabled);
            return this;
        }

        /**
         * <p>This is the time in seconds to wait before processing the input.
         * If the input is not received within this time, the input will be ignored.
         * If set to &quot;off&quot;, the input will be processed when the user enters a delimiter or immediately if no delimiter is used.</p>
         * <p>@default 2</p>
         */
        @JsonSetter(value = "timeoutSeconds", nulls = Nulls.SKIP)
        public Builder timeoutSeconds(Optional<Double> timeoutSeconds) {
            this.timeoutSeconds = timeoutSeconds;
            return this;
        }

        public Builder timeoutSeconds(Double timeoutSeconds) {
            this.timeoutSeconds = Optional.ofNullable(timeoutSeconds);
            return this;
        }

        /**
         * <p>This is the delimiter(s) that will be used to process the input.
         * Can be '#', '*', or an empty array.</p>
         */
        @JsonSetter(value = "delimiters", nulls = Nulls.SKIP)
        public Builder delimiters(Optional<KeypadInputPlanDelimiters> delimiters) {
            this.delimiters = delimiters;
            return this;
        }

        public Builder delimiters(KeypadInputPlanDelimiters delimiters) {
            this.delimiters = Optional.ofNullable(delimiters);
            return this;
        }

        public KeypadInputPlan build() {
            return new KeypadInputPlan(enabled, timeoutSeconds, delimiters, additionalProperties);
        }
    }
}
