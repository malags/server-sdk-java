/**
 * This file was auto-generated by Fern from our API Definition.
 */
package com.vapi.api.types;

import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.annotation.Nulls;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.vapi.api.core.ObjectMappers;
import java.util.HashMap;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import org.jetbrains.annotations.NotNull;

@JsonInclude(JsonInclude.Include.NON_ABSENT)
@JsonDeserialize(builder = Log.Builder.class)
public final class Log {
    private final String time;

    private final String orgId;

    private final LogType type;

    private final Optional<String> webhookType;

    private final Optional<LogResource> resource;

    private final Optional<Double> requestDurationSeconds;

    private final Optional<String> requestStartedAt;

    private final Optional<String> requestFinishedAt;

    private final Optional<Map<String, Object>> requestBody;

    private final Optional<LogRequestHttpMethod> requestHttpMethod;

    private final Optional<String> requestUrl;

    private final Optional<String> requestPath;

    private final Optional<String> requestQuery;

    private final Optional<Double> responseHttpCode;

    private final Optional<String> requestIpAddress;

    private final Optional<String> requestOrigin;

    private final Optional<Map<String, Object>> responseBody;

    private final Optional<Map<String, Object>> requestHeaders;

    private final Optional<Error> error;

    private final Optional<String> assistantId;

    private final Optional<String> phoneNumberId;

    private final Optional<String> customerId;

    private final Optional<String> squadId;

    private final Optional<String> callId;

    private final Map<String, Object> additionalProperties;

    private Log(
            String time,
            String orgId,
            LogType type,
            Optional<String> webhookType,
            Optional<LogResource> resource,
            Optional<Double> requestDurationSeconds,
            Optional<String> requestStartedAt,
            Optional<String> requestFinishedAt,
            Optional<Map<String, Object>> requestBody,
            Optional<LogRequestHttpMethod> requestHttpMethod,
            Optional<String> requestUrl,
            Optional<String> requestPath,
            Optional<String> requestQuery,
            Optional<Double> responseHttpCode,
            Optional<String> requestIpAddress,
            Optional<String> requestOrigin,
            Optional<Map<String, Object>> responseBody,
            Optional<Map<String, Object>> requestHeaders,
            Optional<Error> error,
            Optional<String> assistantId,
            Optional<String> phoneNumberId,
            Optional<String> customerId,
            Optional<String> squadId,
            Optional<String> callId,
            Map<String, Object> additionalProperties) {
        this.time = time;
        this.orgId = orgId;
        this.type = type;
        this.webhookType = webhookType;
        this.resource = resource;
        this.requestDurationSeconds = requestDurationSeconds;
        this.requestStartedAt = requestStartedAt;
        this.requestFinishedAt = requestFinishedAt;
        this.requestBody = requestBody;
        this.requestHttpMethod = requestHttpMethod;
        this.requestUrl = requestUrl;
        this.requestPath = requestPath;
        this.requestQuery = requestQuery;
        this.responseHttpCode = responseHttpCode;
        this.requestIpAddress = requestIpAddress;
        this.requestOrigin = requestOrigin;
        this.responseBody = responseBody;
        this.requestHeaders = requestHeaders;
        this.error = error;
        this.assistantId = assistantId;
        this.phoneNumberId = phoneNumberId;
        this.customerId = customerId;
        this.squadId = squadId;
        this.callId = callId;
        this.additionalProperties = additionalProperties;
    }

    /**
     * @return This is the timestamp at which the log was written.
     */
    @JsonProperty("time")
    public String getTime() {
        return time;
    }

    /**
     * @return This is the unique identifier for the org that this log belongs to.
     */
    @JsonProperty("orgId")
    public String getOrgId() {
        return orgId;
    }

    /**
     * @return This is the type of the log.
     */
    @JsonProperty("type")
    public LogType getType() {
        return type;
    }

    /**
     * @return This is the type of the webhook, given the log is from a webhook.
     */
    @JsonProperty("webhookType")
    public Optional<String> getWebhookType() {
        return webhookType;
    }

    /**
     * @return This is the specific resource, relevant only to API logs.
     */
    @JsonProperty("resource")
    public Optional<LogResource> getResource() {
        return resource;
    }

    /**
     * @return 'This is how long the request took.
     */
    @JsonProperty("requestDurationSeconds")
    public Optional<Double> getRequestDurationSeconds() {
        return requestDurationSeconds;
    }

    /**
     * @return This is the timestamp at which the request began.
     */
    @JsonProperty("requestStartedAt")
    public Optional<String> getRequestStartedAt() {
        return requestStartedAt;
    }

    /**
     * @return This is the timestamp at which the request finished.
     */
    @JsonProperty("requestFinishedAt")
    public Optional<String> getRequestFinishedAt() {
        return requestFinishedAt;
    }

    /**
     * @return This is the body of the request.
     */
    @JsonProperty("requestBody")
    public Optional<Map<String, Object>> getRequestBody() {
        return requestBody;
    }

    /**
     * @return This is the request method.
     */
    @JsonProperty("requestHttpMethod")
    public Optional<LogRequestHttpMethod> getRequestHttpMethod() {
        return requestHttpMethod;
    }

    /**
     * @return This is the request URL.
     */
    @JsonProperty("requestUrl")
    public Optional<String> getRequestUrl() {
        return requestUrl;
    }

    /**
     * @return This is the request path.
     */
    @JsonProperty("requestPath")
    public Optional<String> getRequestPath() {
        return requestPath;
    }

    /**
     * @return This is the request query.
     */
    @JsonProperty("requestQuery")
    public Optional<String> getRequestQuery() {
        return requestQuery;
    }

    /**
     * @return This the HTTP status code of the response.
     */
    @JsonProperty("responseHttpCode")
    public Optional<Double> getResponseHttpCode() {
        return responseHttpCode;
    }

    /**
     * @return This is the request IP address.
     */
    @JsonProperty("requestIpAddress")
    public Optional<String> getRequestIpAddress() {
        return requestIpAddress;
    }

    /**
     * @return This is the origin of the request
     */
    @JsonProperty("requestOrigin")
    public Optional<String> getRequestOrigin() {
        return requestOrigin;
    }

    /**
     * @return This is the body of the response.
     */
    @JsonProperty("responseBody")
    public Optional<Map<String, Object>> getResponseBody() {
        return responseBody;
    }

    /**
     * @return These are the headers of the request.
     */
    @JsonProperty("requestHeaders")
    public Optional<Map<String, Object>> getRequestHeaders() {
        return requestHeaders;
    }

    /**
     * @return This is the error, if one occurred.
     */
    @JsonProperty("error")
    public Optional<Error> getError() {
        return error;
    }

    /**
     * @return This is the ID of the assistant.
     */
    @JsonProperty("assistantId")
    public Optional<String> getAssistantId() {
        return assistantId;
    }

    /**
     * @return This is the ID of the phone number.
     */
    @JsonProperty("phoneNumberId")
    public Optional<String> getPhoneNumberId() {
        return phoneNumberId;
    }

    /**
     * @return This is the ID of the customer.
     */
    @JsonProperty("customerId")
    public Optional<String> getCustomerId() {
        return customerId;
    }

    /**
     * @return This is the ID of the squad.
     */
    @JsonProperty("squadId")
    public Optional<String> getSquadId() {
        return squadId;
    }

    /**
     * @return This is the ID of the call.
     */
    @JsonProperty("callId")
    public Optional<String> getCallId() {
        return callId;
    }

    @java.lang.Override
    public boolean equals(Object other) {
        if (this == other) return true;
        return other instanceof Log && equalTo((Log) other);
    }

    @JsonAnyGetter
    public Map<String, Object> getAdditionalProperties() {
        return this.additionalProperties;
    }

    private boolean equalTo(Log other) {
        return time.equals(other.time)
                && orgId.equals(other.orgId)
                && type.equals(other.type)
                && webhookType.equals(other.webhookType)
                && resource.equals(other.resource)
                && requestDurationSeconds.equals(other.requestDurationSeconds)
                && requestStartedAt.equals(other.requestStartedAt)
                && requestFinishedAt.equals(other.requestFinishedAt)
                && requestBody.equals(other.requestBody)
                && requestHttpMethod.equals(other.requestHttpMethod)
                && requestUrl.equals(other.requestUrl)
                && requestPath.equals(other.requestPath)
                && requestQuery.equals(other.requestQuery)
                && responseHttpCode.equals(other.responseHttpCode)
                && requestIpAddress.equals(other.requestIpAddress)
                && requestOrigin.equals(other.requestOrigin)
                && responseBody.equals(other.responseBody)
                && requestHeaders.equals(other.requestHeaders)
                && error.equals(other.error)
                && assistantId.equals(other.assistantId)
                && phoneNumberId.equals(other.phoneNumberId)
                && customerId.equals(other.customerId)
                && squadId.equals(other.squadId)
                && callId.equals(other.callId);
    }

    @java.lang.Override
    public int hashCode() {
        return Objects.hash(
                this.time,
                this.orgId,
                this.type,
                this.webhookType,
                this.resource,
                this.requestDurationSeconds,
                this.requestStartedAt,
                this.requestFinishedAt,
                this.requestBody,
                this.requestHttpMethod,
                this.requestUrl,
                this.requestPath,
                this.requestQuery,
                this.responseHttpCode,
                this.requestIpAddress,
                this.requestOrigin,
                this.responseBody,
                this.requestHeaders,
                this.error,
                this.assistantId,
                this.phoneNumberId,
                this.customerId,
                this.squadId,
                this.callId);
    }

    @java.lang.Override
    public String toString() {
        return ObjectMappers.stringify(this);
    }

    public static TimeStage builder() {
        return new Builder();
    }

    public interface TimeStage {
        /**
         * <p>This is the timestamp at which the log was written.</p>
         */
        OrgIdStage time(@NotNull String time);

        Builder from(Log other);
    }

    public interface OrgIdStage {
        /**
         * <p>This is the unique identifier for the org that this log belongs to.</p>
         */
        TypeStage orgId(@NotNull String orgId);
    }

    public interface TypeStage {
        /**
         * <p>This is the type of the log.</p>
         */
        _FinalStage type(@NotNull LogType type);
    }

    public interface _FinalStage {
        Log build();

        /**
         * <p>This is the type of the webhook, given the log is from a webhook.</p>
         */
        _FinalStage webhookType(Optional<String> webhookType);

        _FinalStage webhookType(String webhookType);

        /**
         * <p>This is the specific resource, relevant only to API logs.</p>
         */
        _FinalStage resource(Optional<LogResource> resource);

        _FinalStage resource(LogResource resource);

        /**
         * <p>'This is how long the request took.</p>
         */
        _FinalStage requestDurationSeconds(Optional<Double> requestDurationSeconds);

        _FinalStage requestDurationSeconds(Double requestDurationSeconds);

        /**
         * <p>This is the timestamp at which the request began.</p>
         */
        _FinalStage requestStartedAt(Optional<String> requestStartedAt);

        _FinalStage requestStartedAt(String requestStartedAt);

        /**
         * <p>This is the timestamp at which the request finished.</p>
         */
        _FinalStage requestFinishedAt(Optional<String> requestFinishedAt);

        _FinalStage requestFinishedAt(String requestFinishedAt);

        /**
         * <p>This is the body of the request.</p>
         */
        _FinalStage requestBody(Optional<Map<String, Object>> requestBody);

        _FinalStage requestBody(Map<String, Object> requestBody);

        /**
         * <p>This is the request method.</p>
         */
        _FinalStage requestHttpMethod(Optional<LogRequestHttpMethod> requestHttpMethod);

        _FinalStage requestHttpMethod(LogRequestHttpMethod requestHttpMethod);

        /**
         * <p>This is the request URL.</p>
         */
        _FinalStage requestUrl(Optional<String> requestUrl);

        _FinalStage requestUrl(String requestUrl);

        /**
         * <p>This is the request path.</p>
         */
        _FinalStage requestPath(Optional<String> requestPath);

        _FinalStage requestPath(String requestPath);

        /**
         * <p>This is the request query.</p>
         */
        _FinalStage requestQuery(Optional<String> requestQuery);

        _FinalStage requestQuery(String requestQuery);

        /**
         * <p>This the HTTP status code of the response.</p>
         */
        _FinalStage responseHttpCode(Optional<Double> responseHttpCode);

        _FinalStage responseHttpCode(Double responseHttpCode);

        /**
         * <p>This is the request IP address.</p>
         */
        _FinalStage requestIpAddress(Optional<String> requestIpAddress);

        _FinalStage requestIpAddress(String requestIpAddress);

        /**
         * <p>This is the origin of the request</p>
         */
        _FinalStage requestOrigin(Optional<String> requestOrigin);

        _FinalStage requestOrigin(String requestOrigin);

        /**
         * <p>This is the body of the response.</p>
         */
        _FinalStage responseBody(Optional<Map<String, Object>> responseBody);

        _FinalStage responseBody(Map<String, Object> responseBody);

        /**
         * <p>These are the headers of the request.</p>
         */
        _FinalStage requestHeaders(Optional<Map<String, Object>> requestHeaders);

        _FinalStage requestHeaders(Map<String, Object> requestHeaders);

        /**
         * <p>This is the error, if one occurred.</p>
         */
        _FinalStage error(Optional<Error> error);

        _FinalStage error(Error error);

        /**
         * <p>This is the ID of the assistant.</p>
         */
        _FinalStage assistantId(Optional<String> assistantId);

        _FinalStage assistantId(String assistantId);

        /**
         * <p>This is the ID of the phone number.</p>
         */
        _FinalStage phoneNumberId(Optional<String> phoneNumberId);

        _FinalStage phoneNumberId(String phoneNumberId);

        /**
         * <p>This is the ID of the customer.</p>
         */
        _FinalStage customerId(Optional<String> customerId);

        _FinalStage customerId(String customerId);

        /**
         * <p>This is the ID of the squad.</p>
         */
        _FinalStage squadId(Optional<String> squadId);

        _FinalStage squadId(String squadId);

        /**
         * <p>This is the ID of the call.</p>
         */
        _FinalStage callId(Optional<String> callId);

        _FinalStage callId(String callId);
    }

    @JsonIgnoreProperties(ignoreUnknown = true)
    public static final class Builder implements TimeStage, OrgIdStage, TypeStage, _FinalStage {
        private String time;

        private String orgId;

        private LogType type;

        private Optional<String> callId = Optional.empty();

        private Optional<String> squadId = Optional.empty();

        private Optional<String> customerId = Optional.empty();

        private Optional<String> phoneNumberId = Optional.empty();

        private Optional<String> assistantId = Optional.empty();

        private Optional<Error> error = Optional.empty();

        private Optional<Map<String, Object>> requestHeaders = Optional.empty();

        private Optional<Map<String, Object>> responseBody = Optional.empty();

        private Optional<String> requestOrigin = Optional.empty();

        private Optional<String> requestIpAddress = Optional.empty();

        private Optional<Double> responseHttpCode = Optional.empty();

        private Optional<String> requestQuery = Optional.empty();

        private Optional<String> requestPath = Optional.empty();

        private Optional<String> requestUrl = Optional.empty();

        private Optional<LogRequestHttpMethod> requestHttpMethod = Optional.empty();

        private Optional<Map<String, Object>> requestBody = Optional.empty();

        private Optional<String> requestFinishedAt = Optional.empty();

        private Optional<String> requestStartedAt = Optional.empty();

        private Optional<Double> requestDurationSeconds = Optional.empty();

        private Optional<LogResource> resource = Optional.empty();

        private Optional<String> webhookType = Optional.empty();

        @JsonAnySetter
        private Map<String, Object> additionalProperties = new HashMap<>();

        private Builder() {}

        @java.lang.Override
        public Builder from(Log other) {
            time(other.getTime());
            orgId(other.getOrgId());
            type(other.getType());
            webhookType(other.getWebhookType());
            resource(other.getResource());
            requestDurationSeconds(other.getRequestDurationSeconds());
            requestStartedAt(other.getRequestStartedAt());
            requestFinishedAt(other.getRequestFinishedAt());
            requestBody(other.getRequestBody());
            requestHttpMethod(other.getRequestHttpMethod());
            requestUrl(other.getRequestUrl());
            requestPath(other.getRequestPath());
            requestQuery(other.getRequestQuery());
            responseHttpCode(other.getResponseHttpCode());
            requestIpAddress(other.getRequestIpAddress());
            requestOrigin(other.getRequestOrigin());
            responseBody(other.getResponseBody());
            requestHeaders(other.getRequestHeaders());
            error(other.getError());
            assistantId(other.getAssistantId());
            phoneNumberId(other.getPhoneNumberId());
            customerId(other.getCustomerId());
            squadId(other.getSquadId());
            callId(other.getCallId());
            return this;
        }

        /**
         * <p>This is the timestamp at which the log was written.</p>
         * <p>This is the timestamp at which the log was written.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        @JsonSetter("time")
        public OrgIdStage time(@NotNull String time) {
            this.time = Objects.requireNonNull(time, "time must not be null");
            return this;
        }

        /**
         * <p>This is the unique identifier for the org that this log belongs to.</p>
         * <p>This is the unique identifier for the org that this log belongs to.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        @JsonSetter("orgId")
        public TypeStage orgId(@NotNull String orgId) {
            this.orgId = Objects.requireNonNull(orgId, "orgId must not be null");
            return this;
        }

        /**
         * <p>This is the type of the log.</p>
         * <p>This is the type of the log.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        @JsonSetter("type")
        public _FinalStage type(@NotNull LogType type) {
            this.type = Objects.requireNonNull(type, "type must not be null");
            return this;
        }

        /**
         * <p>This is the ID of the call.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        public _FinalStage callId(String callId) {
            this.callId = Optional.ofNullable(callId);
            return this;
        }

        /**
         * <p>This is the ID of the call.</p>
         */
        @java.lang.Override
        @JsonSetter(value = "callId", nulls = Nulls.SKIP)
        public _FinalStage callId(Optional<String> callId) {
            this.callId = callId;
            return this;
        }

        /**
         * <p>This is the ID of the squad.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        public _FinalStage squadId(String squadId) {
            this.squadId = Optional.ofNullable(squadId);
            return this;
        }

        /**
         * <p>This is the ID of the squad.</p>
         */
        @java.lang.Override
        @JsonSetter(value = "squadId", nulls = Nulls.SKIP)
        public _FinalStage squadId(Optional<String> squadId) {
            this.squadId = squadId;
            return this;
        }

        /**
         * <p>This is the ID of the customer.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        public _FinalStage customerId(String customerId) {
            this.customerId = Optional.ofNullable(customerId);
            return this;
        }

        /**
         * <p>This is the ID of the customer.</p>
         */
        @java.lang.Override
        @JsonSetter(value = "customerId", nulls = Nulls.SKIP)
        public _FinalStage customerId(Optional<String> customerId) {
            this.customerId = customerId;
            return this;
        }

        /**
         * <p>This is the ID of the phone number.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        public _FinalStage phoneNumberId(String phoneNumberId) {
            this.phoneNumberId = Optional.ofNullable(phoneNumberId);
            return this;
        }

        /**
         * <p>This is the ID of the phone number.</p>
         */
        @java.lang.Override
        @JsonSetter(value = "phoneNumberId", nulls = Nulls.SKIP)
        public _FinalStage phoneNumberId(Optional<String> phoneNumberId) {
            this.phoneNumberId = phoneNumberId;
            return this;
        }

        /**
         * <p>This is the ID of the assistant.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        public _FinalStage assistantId(String assistantId) {
            this.assistantId = Optional.ofNullable(assistantId);
            return this;
        }

        /**
         * <p>This is the ID of the assistant.</p>
         */
        @java.lang.Override
        @JsonSetter(value = "assistantId", nulls = Nulls.SKIP)
        public _FinalStage assistantId(Optional<String> assistantId) {
            this.assistantId = assistantId;
            return this;
        }

        /**
         * <p>This is the error, if one occurred.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        public _FinalStage error(Error error) {
            this.error = Optional.ofNullable(error);
            return this;
        }

        /**
         * <p>This is the error, if one occurred.</p>
         */
        @java.lang.Override
        @JsonSetter(value = "error", nulls = Nulls.SKIP)
        public _FinalStage error(Optional<Error> error) {
            this.error = error;
            return this;
        }

        /**
         * <p>These are the headers of the request.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        public _FinalStage requestHeaders(Map<String, Object> requestHeaders) {
            this.requestHeaders = Optional.ofNullable(requestHeaders);
            return this;
        }

        /**
         * <p>These are the headers of the request.</p>
         */
        @java.lang.Override
        @JsonSetter(value = "requestHeaders", nulls = Nulls.SKIP)
        public _FinalStage requestHeaders(Optional<Map<String, Object>> requestHeaders) {
            this.requestHeaders = requestHeaders;
            return this;
        }

        /**
         * <p>This is the body of the response.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        public _FinalStage responseBody(Map<String, Object> responseBody) {
            this.responseBody = Optional.ofNullable(responseBody);
            return this;
        }

        /**
         * <p>This is the body of the response.</p>
         */
        @java.lang.Override
        @JsonSetter(value = "responseBody", nulls = Nulls.SKIP)
        public _FinalStage responseBody(Optional<Map<String, Object>> responseBody) {
            this.responseBody = responseBody;
            return this;
        }

        /**
         * <p>This is the origin of the request</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        public _FinalStage requestOrigin(String requestOrigin) {
            this.requestOrigin = Optional.ofNullable(requestOrigin);
            return this;
        }

        /**
         * <p>This is the origin of the request</p>
         */
        @java.lang.Override
        @JsonSetter(value = "requestOrigin", nulls = Nulls.SKIP)
        public _FinalStage requestOrigin(Optional<String> requestOrigin) {
            this.requestOrigin = requestOrigin;
            return this;
        }

        /**
         * <p>This is the request IP address.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        public _FinalStage requestIpAddress(String requestIpAddress) {
            this.requestIpAddress = Optional.ofNullable(requestIpAddress);
            return this;
        }

        /**
         * <p>This is the request IP address.</p>
         */
        @java.lang.Override
        @JsonSetter(value = "requestIpAddress", nulls = Nulls.SKIP)
        public _FinalStage requestIpAddress(Optional<String> requestIpAddress) {
            this.requestIpAddress = requestIpAddress;
            return this;
        }

        /**
         * <p>This the HTTP status code of the response.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        public _FinalStage responseHttpCode(Double responseHttpCode) {
            this.responseHttpCode = Optional.ofNullable(responseHttpCode);
            return this;
        }

        /**
         * <p>This the HTTP status code of the response.</p>
         */
        @java.lang.Override
        @JsonSetter(value = "responseHttpCode", nulls = Nulls.SKIP)
        public _FinalStage responseHttpCode(Optional<Double> responseHttpCode) {
            this.responseHttpCode = responseHttpCode;
            return this;
        }

        /**
         * <p>This is the request query.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        public _FinalStage requestQuery(String requestQuery) {
            this.requestQuery = Optional.ofNullable(requestQuery);
            return this;
        }

        /**
         * <p>This is the request query.</p>
         */
        @java.lang.Override
        @JsonSetter(value = "requestQuery", nulls = Nulls.SKIP)
        public _FinalStage requestQuery(Optional<String> requestQuery) {
            this.requestQuery = requestQuery;
            return this;
        }

        /**
         * <p>This is the request path.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        public _FinalStage requestPath(String requestPath) {
            this.requestPath = Optional.ofNullable(requestPath);
            return this;
        }

        /**
         * <p>This is the request path.</p>
         */
        @java.lang.Override
        @JsonSetter(value = "requestPath", nulls = Nulls.SKIP)
        public _FinalStage requestPath(Optional<String> requestPath) {
            this.requestPath = requestPath;
            return this;
        }

        /**
         * <p>This is the request URL.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        public _FinalStage requestUrl(String requestUrl) {
            this.requestUrl = Optional.ofNullable(requestUrl);
            return this;
        }

        /**
         * <p>This is the request URL.</p>
         */
        @java.lang.Override
        @JsonSetter(value = "requestUrl", nulls = Nulls.SKIP)
        public _FinalStage requestUrl(Optional<String> requestUrl) {
            this.requestUrl = requestUrl;
            return this;
        }

        /**
         * <p>This is the request method.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        public _FinalStage requestHttpMethod(LogRequestHttpMethod requestHttpMethod) {
            this.requestHttpMethod = Optional.ofNullable(requestHttpMethod);
            return this;
        }

        /**
         * <p>This is the request method.</p>
         */
        @java.lang.Override
        @JsonSetter(value = "requestHttpMethod", nulls = Nulls.SKIP)
        public _FinalStage requestHttpMethod(Optional<LogRequestHttpMethod> requestHttpMethod) {
            this.requestHttpMethod = requestHttpMethod;
            return this;
        }

        /**
         * <p>This is the body of the request.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        public _FinalStage requestBody(Map<String, Object> requestBody) {
            this.requestBody = Optional.ofNullable(requestBody);
            return this;
        }

        /**
         * <p>This is the body of the request.</p>
         */
        @java.lang.Override
        @JsonSetter(value = "requestBody", nulls = Nulls.SKIP)
        public _FinalStage requestBody(Optional<Map<String, Object>> requestBody) {
            this.requestBody = requestBody;
            return this;
        }

        /**
         * <p>This is the timestamp at which the request finished.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        public _FinalStage requestFinishedAt(String requestFinishedAt) {
            this.requestFinishedAt = Optional.ofNullable(requestFinishedAt);
            return this;
        }

        /**
         * <p>This is the timestamp at which the request finished.</p>
         */
        @java.lang.Override
        @JsonSetter(value = "requestFinishedAt", nulls = Nulls.SKIP)
        public _FinalStage requestFinishedAt(Optional<String> requestFinishedAt) {
            this.requestFinishedAt = requestFinishedAt;
            return this;
        }

        /**
         * <p>This is the timestamp at which the request began.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        public _FinalStage requestStartedAt(String requestStartedAt) {
            this.requestStartedAt = Optional.ofNullable(requestStartedAt);
            return this;
        }

        /**
         * <p>This is the timestamp at which the request began.</p>
         */
        @java.lang.Override
        @JsonSetter(value = "requestStartedAt", nulls = Nulls.SKIP)
        public _FinalStage requestStartedAt(Optional<String> requestStartedAt) {
            this.requestStartedAt = requestStartedAt;
            return this;
        }

        /**
         * <p>'This is how long the request took.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        public _FinalStage requestDurationSeconds(Double requestDurationSeconds) {
            this.requestDurationSeconds = Optional.ofNullable(requestDurationSeconds);
            return this;
        }

        /**
         * <p>'This is how long the request took.</p>
         */
        @java.lang.Override
        @JsonSetter(value = "requestDurationSeconds", nulls = Nulls.SKIP)
        public _FinalStage requestDurationSeconds(Optional<Double> requestDurationSeconds) {
            this.requestDurationSeconds = requestDurationSeconds;
            return this;
        }

        /**
         * <p>This is the specific resource, relevant only to API logs.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        public _FinalStage resource(LogResource resource) {
            this.resource = Optional.ofNullable(resource);
            return this;
        }

        /**
         * <p>This is the specific resource, relevant only to API logs.</p>
         */
        @java.lang.Override
        @JsonSetter(value = "resource", nulls = Nulls.SKIP)
        public _FinalStage resource(Optional<LogResource> resource) {
            this.resource = resource;
            return this;
        }

        /**
         * <p>This is the type of the webhook, given the log is from a webhook.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        public _FinalStage webhookType(String webhookType) {
            this.webhookType = Optional.ofNullable(webhookType);
            return this;
        }

        /**
         * <p>This is the type of the webhook, given the log is from a webhook.</p>
         */
        @java.lang.Override
        @JsonSetter(value = "webhookType", nulls = Nulls.SKIP)
        public _FinalStage webhookType(Optional<String> webhookType) {
            this.webhookType = webhookType;
            return this;
        }

        @java.lang.Override
        public Log build() {
            return new Log(
                    time,
                    orgId,
                    type,
                    webhookType,
                    resource,
                    requestDurationSeconds,
                    requestStartedAt,
                    requestFinishedAt,
                    requestBody,
                    requestHttpMethod,
                    requestUrl,
                    requestPath,
                    requestQuery,
                    responseHttpCode,
                    requestIpAddress,
                    requestOrigin,
                    responseBody,
                    requestHeaders,
                    error,
                    assistantId,
                    phoneNumberId,
                    customerId,
                    squadId,
                    callId,
                    additionalProperties);
        }
    }
}
