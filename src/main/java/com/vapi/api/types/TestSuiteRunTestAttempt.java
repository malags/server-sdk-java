/**
 * This file was auto-generated by Fern from our API Definition.
 */
package com.vapi.api.types;

import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.annotation.Nulls;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.vapi.api.core.ObjectMappers;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;

@JsonInclude(JsonInclude.Include.NON_ABSENT)
@JsonDeserialize(builder = TestSuiteRunTestAttempt.Builder.class)
public final class TestSuiteRunTestAttempt {
    private final List<TestSuiteRunScorerAi> scorerResults;

    private final Optional<TestSuiteRunTestAttemptCall> call;

    private final Optional<String> callId;

    private final Optional<TestSuiteRunTestAttemptMetadata> metadata;

    private final Map<String, Object> additionalProperties;

    private TestSuiteRunTestAttempt(
            List<TestSuiteRunScorerAi> scorerResults,
            Optional<TestSuiteRunTestAttemptCall> call,
            Optional<String> callId,
            Optional<TestSuiteRunTestAttemptMetadata> metadata,
            Map<String, Object> additionalProperties) {
        this.scorerResults = scorerResults;
        this.call = call;
        this.callId = callId;
        this.metadata = metadata;
        this.additionalProperties = additionalProperties;
    }

    /**
     * @return These are the results of the scorers used to evaluate the test attempt.
     */
    @JsonProperty("scorerResults")
    public List<TestSuiteRunScorerAi> getScorerResults() {
        return scorerResults;
    }

    /**
     * @return This is the call made during the test attempt.
     */
    @JsonProperty("call")
    public Optional<TestSuiteRunTestAttemptCall> getCall() {
        return call;
    }

    /**
     * @return This is the call ID for the test attempt.
     */
    @JsonProperty("callId")
    public Optional<String> getCallId() {
        return callId;
    }

    /**
     * @return This is the metadata for the test attempt.
     */
    @JsonProperty("metadata")
    public Optional<TestSuiteRunTestAttemptMetadata> getMetadata() {
        return metadata;
    }

    @java.lang.Override
    public boolean equals(Object other) {
        if (this == other) return true;
        return other instanceof TestSuiteRunTestAttempt && equalTo((TestSuiteRunTestAttempt) other);
    }

    @JsonAnyGetter
    public Map<String, Object> getAdditionalProperties() {
        return this.additionalProperties;
    }

    private boolean equalTo(TestSuiteRunTestAttempt other) {
        return scorerResults.equals(other.scorerResults)
                && call.equals(other.call)
                && callId.equals(other.callId)
                && metadata.equals(other.metadata);
    }

    @java.lang.Override
    public int hashCode() {
        return Objects.hash(this.scorerResults, this.call, this.callId, this.metadata);
    }

    @java.lang.Override
    public String toString() {
        return ObjectMappers.stringify(this);
    }

    public static Builder builder() {
        return new Builder();
    }

    @JsonIgnoreProperties(ignoreUnknown = true)
    public static final class Builder {
        private List<TestSuiteRunScorerAi> scorerResults = new ArrayList<>();

        private Optional<TestSuiteRunTestAttemptCall> call = Optional.empty();

        private Optional<String> callId = Optional.empty();

        private Optional<TestSuiteRunTestAttemptMetadata> metadata = Optional.empty();

        @JsonAnySetter
        private Map<String, Object> additionalProperties = new HashMap<>();

        private Builder() {}

        public Builder from(TestSuiteRunTestAttempt other) {
            scorerResults(other.getScorerResults());
            call(other.getCall());
            callId(other.getCallId());
            metadata(other.getMetadata());
            return this;
        }

        /**
         * <p>These are the results of the scorers used to evaluate the test attempt.</p>
         */
        @JsonSetter(value = "scorerResults", nulls = Nulls.SKIP)
        public Builder scorerResults(List<TestSuiteRunScorerAi> scorerResults) {
            this.scorerResults.clear();
            this.scorerResults.addAll(scorerResults);
            return this;
        }

        public Builder addScorerResults(TestSuiteRunScorerAi scorerResults) {
            this.scorerResults.add(scorerResults);
            return this;
        }

        public Builder addAllScorerResults(List<TestSuiteRunScorerAi> scorerResults) {
            this.scorerResults.addAll(scorerResults);
            return this;
        }

        /**
         * <p>This is the call made during the test attempt.</p>
         */
        @JsonSetter(value = "call", nulls = Nulls.SKIP)
        public Builder call(Optional<TestSuiteRunTestAttemptCall> call) {
            this.call = call;
            return this;
        }

        public Builder call(TestSuiteRunTestAttemptCall call) {
            this.call = Optional.ofNullable(call);
            return this;
        }

        /**
         * <p>This is the call ID for the test attempt.</p>
         */
        @JsonSetter(value = "callId", nulls = Nulls.SKIP)
        public Builder callId(Optional<String> callId) {
            this.callId = callId;
            return this;
        }

        public Builder callId(String callId) {
            this.callId = Optional.ofNullable(callId);
            return this;
        }

        /**
         * <p>This is the metadata for the test attempt.</p>
         */
        @JsonSetter(value = "metadata", nulls = Nulls.SKIP)
        public Builder metadata(Optional<TestSuiteRunTestAttemptMetadata> metadata) {
            this.metadata = metadata;
            return this;
        }

        public Builder metadata(TestSuiteRunTestAttemptMetadata metadata) {
            this.metadata = Optional.ofNullable(metadata);
            return this;
        }

        public TestSuiteRunTestAttempt build() {
            return new TestSuiteRunTestAttempt(scorerResults, call, callId, metadata, additionalProperties);
        }
    }
}
