/**
 * This file was auto-generated by Fern from our API Definition.
 */
package com.vapi.api.types;

import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.annotation.Nulls;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.vapi.api.core.ObjectMappers;
import java.util.HashMap;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;

@JsonInclude(JsonInclude.Include.NON_ABSENT)
@JsonDeserialize(builder = MonitorPlan.Builder.class)
public final class MonitorPlan {
    private final Optional<Boolean> listenEnabled;

    private final Optional<Boolean> listenAuthenticationEnabled;

    private final Optional<Boolean> controlEnabled;

    private final Optional<Boolean> controlAuthenticationEnabled;

    private final Map<String, Object> additionalProperties;

    private MonitorPlan(
            Optional<Boolean> listenEnabled,
            Optional<Boolean> listenAuthenticationEnabled,
            Optional<Boolean> controlEnabled,
            Optional<Boolean> controlAuthenticationEnabled,
            Map<String, Object> additionalProperties) {
        this.listenEnabled = listenEnabled;
        this.listenAuthenticationEnabled = listenAuthenticationEnabled;
        this.controlEnabled = controlEnabled;
        this.controlAuthenticationEnabled = controlAuthenticationEnabled;
        this.additionalProperties = additionalProperties;
    }

    /**
     * @return This determines whether the assistant's calls allow live listening. Defaults to true.
     * <p>Fetch <code>call.monitor.listenUrl</code> to get the live listening URL.</p>
     * <p>@default true</p>
     */
    @JsonProperty("listenEnabled")
    public Optional<Boolean> getListenEnabled() {
        return listenEnabled;
    }

    /**
     * @return This enables authentication on the <code>call.monitor.listenUrl</code>.
     * <p>If <code>listenAuthenticationEnabled</code> is <code>true</code>, the <code>call.monitor.listenUrl</code> will require an <code>Authorization: Bearer &lt;vapi-public-api-key&gt;</code> header.</p>
     * <p>@default false</p>
     */
    @JsonProperty("listenAuthenticationEnabled")
    public Optional<Boolean> getListenAuthenticationEnabled() {
        return listenAuthenticationEnabled;
    }

    /**
     * @return This determines whether the assistant's calls allow live control. Defaults to true.
     * <p>Fetch <code>call.monitor.controlUrl</code> to get the live control URL.</p>
     * <p>To use, send any control message via a POST request to <code>call.monitor.controlUrl</code>. Here are the types of controls supported: https://docs.vapi.ai/api-reference/messages/client-inbound-message</p>
     * <p>@default true</p>
     */
    @JsonProperty("controlEnabled")
    public Optional<Boolean> getControlEnabled() {
        return controlEnabled;
    }

    /**
     * @return This enables authentication on the <code>call.monitor.controlUrl</code>.
     * <p>If <code>controlAuthenticationEnabled</code> is <code>true</code>, the <code>call.monitor.controlUrl</code> will require an <code>Authorization: Bearer &lt;vapi-public-api-key&gt;</code> header.</p>
     * <p>@default false</p>
     */
    @JsonProperty("controlAuthenticationEnabled")
    public Optional<Boolean> getControlAuthenticationEnabled() {
        return controlAuthenticationEnabled;
    }

    @java.lang.Override
    public boolean equals(Object other) {
        if (this == other) return true;
        return other instanceof MonitorPlan && equalTo((MonitorPlan) other);
    }

    @JsonAnyGetter
    public Map<String, Object> getAdditionalProperties() {
        return this.additionalProperties;
    }

    private boolean equalTo(MonitorPlan other) {
        return listenEnabled.equals(other.listenEnabled)
                && listenAuthenticationEnabled.equals(other.listenAuthenticationEnabled)
                && controlEnabled.equals(other.controlEnabled)
                && controlAuthenticationEnabled.equals(other.controlAuthenticationEnabled);
    }

    @java.lang.Override
    public int hashCode() {
        return Objects.hash(
                this.listenEnabled,
                this.listenAuthenticationEnabled,
                this.controlEnabled,
                this.controlAuthenticationEnabled);
    }

    @java.lang.Override
    public String toString() {
        return ObjectMappers.stringify(this);
    }

    public static Builder builder() {
        return new Builder();
    }

    @JsonIgnoreProperties(ignoreUnknown = true)
    public static final class Builder {
        private Optional<Boolean> listenEnabled = Optional.empty();

        private Optional<Boolean> listenAuthenticationEnabled = Optional.empty();

        private Optional<Boolean> controlEnabled = Optional.empty();

        private Optional<Boolean> controlAuthenticationEnabled = Optional.empty();

        @JsonAnySetter
        private Map<String, Object> additionalProperties = new HashMap<>();

        private Builder() {}

        public Builder from(MonitorPlan other) {
            listenEnabled(other.getListenEnabled());
            listenAuthenticationEnabled(other.getListenAuthenticationEnabled());
            controlEnabled(other.getControlEnabled());
            controlAuthenticationEnabled(other.getControlAuthenticationEnabled());
            return this;
        }

        /**
         * <p>This determines whether the assistant's calls allow live listening. Defaults to true.</p>
         * <p>Fetch <code>call.monitor.listenUrl</code> to get the live listening URL.</p>
         * <p>@default true</p>
         */
        @JsonSetter(value = "listenEnabled", nulls = Nulls.SKIP)
        public Builder listenEnabled(Optional<Boolean> listenEnabled) {
            this.listenEnabled = listenEnabled;
            return this;
        }

        public Builder listenEnabled(Boolean listenEnabled) {
            this.listenEnabled = Optional.ofNullable(listenEnabled);
            return this;
        }

        /**
         * <p>This enables authentication on the <code>call.monitor.listenUrl</code>.</p>
         * <p>If <code>listenAuthenticationEnabled</code> is <code>true</code>, the <code>call.monitor.listenUrl</code> will require an <code>Authorization: Bearer &lt;vapi-public-api-key&gt;</code> header.</p>
         * <p>@default false</p>
         */
        @JsonSetter(value = "listenAuthenticationEnabled", nulls = Nulls.SKIP)
        public Builder listenAuthenticationEnabled(Optional<Boolean> listenAuthenticationEnabled) {
            this.listenAuthenticationEnabled = listenAuthenticationEnabled;
            return this;
        }

        public Builder listenAuthenticationEnabled(Boolean listenAuthenticationEnabled) {
            this.listenAuthenticationEnabled = Optional.ofNullable(listenAuthenticationEnabled);
            return this;
        }

        /**
         * <p>This determines whether the assistant's calls allow live control. Defaults to true.</p>
         * <p>Fetch <code>call.monitor.controlUrl</code> to get the live control URL.</p>
         * <p>To use, send any control message via a POST request to <code>call.monitor.controlUrl</code>. Here are the types of controls supported: https://docs.vapi.ai/api-reference/messages/client-inbound-message</p>
         * <p>@default true</p>
         */
        @JsonSetter(value = "controlEnabled", nulls = Nulls.SKIP)
        public Builder controlEnabled(Optional<Boolean> controlEnabled) {
            this.controlEnabled = controlEnabled;
            return this;
        }

        public Builder controlEnabled(Boolean controlEnabled) {
            this.controlEnabled = Optional.ofNullable(controlEnabled);
            return this;
        }

        /**
         * <p>This enables authentication on the <code>call.monitor.controlUrl</code>.</p>
         * <p>If <code>controlAuthenticationEnabled</code> is <code>true</code>, the <code>call.monitor.controlUrl</code> will require an <code>Authorization: Bearer &lt;vapi-public-api-key&gt;</code> header.</p>
         * <p>@default false</p>
         */
        @JsonSetter(value = "controlAuthenticationEnabled", nulls = Nulls.SKIP)
        public Builder controlAuthenticationEnabled(Optional<Boolean> controlAuthenticationEnabled) {
            this.controlAuthenticationEnabled = controlAuthenticationEnabled;
            return this;
        }

        public Builder controlAuthenticationEnabled(Boolean controlAuthenticationEnabled) {
            this.controlAuthenticationEnabled = Optional.ofNullable(controlAuthenticationEnabled);
            return this;
        }

        public MonitorPlan build() {
            return new MonitorPlan(
                    listenEnabled,
                    listenAuthenticationEnabled,
                    controlEnabled,
                    controlAuthenticationEnabled,
                    additionalProperties);
        }
    }
}
