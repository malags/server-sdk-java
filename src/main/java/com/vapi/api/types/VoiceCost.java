/**
 * This file was auto-generated by Fern from our API Definition.
 */
package com.vapi.api.types;

import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.annotation.Nulls;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.vapi.api.core.ObjectMappers;
import java.util.HashMap;
import java.util.LinkedHashMap;
import java.util.Map;
import java.util.Objects;

@JsonInclude(JsonInclude.Include.NON_ABSENT)
@JsonDeserialize(builder = VoiceCost.Builder.class)
public final class VoiceCost {
    private final Map<String, Object> voice;

    private final double characters;

    private final double cost;

    private final Map<String, Object> additionalProperties;

    private VoiceCost(
            Map<String, Object> voice, double characters, double cost, Map<String, Object> additionalProperties) {
        this.voice = voice;
        this.characters = characters;
        this.cost = cost;
        this.additionalProperties = additionalProperties;
    }

    /**
     * @return This is the voice that was used during the call.
     * <p>This matches one of the following:</p>
     * <ul>
     * <li><code>call.assistant.voice</code>,</li>
     * <li><code>call.assistantId-&gt;voice</code>,</li>
     * <li><code>call.squad[n].assistant.voice</code>,</li>
     * <li><code>call.squad[n].assistantId-&gt;voice</code>,</li>
     * <li><code>call.squadId-&gt;[n].assistant.voice</code>,</li>
     * <li><code>call.squadId-&gt;[n].assistantId-&gt;voice</code>.</li>
     * </ul>
     */
    @JsonProperty("voice")
    public Map<String, Object> getVoice() {
        return voice;
    }

    /**
     * @return This is the number of characters that were generated during the call. These should be total characters used in the call for single assistant calls, while squad calls will have multiple voice costs one for each assistant that was used.
     */
    @JsonProperty("characters")
    public double getCharacters() {
        return characters;
    }

    /**
     * @return This is the cost of the component in USD.
     */
    @JsonProperty("cost")
    public double getCost() {
        return cost;
    }

    @java.lang.Override
    public boolean equals(Object other) {
        if (this == other) return true;
        return other instanceof VoiceCost && equalTo((VoiceCost) other);
    }

    @JsonAnyGetter
    public Map<String, Object> getAdditionalProperties() {
        return this.additionalProperties;
    }

    private boolean equalTo(VoiceCost other) {
        return voice.equals(other.voice) && characters == other.characters && cost == other.cost;
    }

    @java.lang.Override
    public int hashCode() {
        return Objects.hash(this.voice, this.characters, this.cost);
    }

    @java.lang.Override
    public String toString() {
        return ObjectMappers.stringify(this);
    }

    public static CharactersStage builder() {
        return new Builder();
    }

    public interface CharactersStage {
        /**
         * <p>This is the number of characters that were generated during the call. These should be total characters used in the call for single assistant calls, while squad calls will have multiple voice costs one for each assistant that was used.</p>
         */
        CostStage characters(double characters);

        Builder from(VoiceCost other);
    }

    public interface CostStage {
        /**
         * <p>This is the cost of the component in USD.</p>
         */
        _FinalStage cost(double cost);
    }

    public interface _FinalStage {
        VoiceCost build();

        /**
         * <p>This is the voice that was used during the call.</p>
         * <p>This matches one of the following:</p>
         * <ul>
         * <li><code>call.assistant.voice</code>,</li>
         * <li><code>call.assistantId-&gt;voice</code>,</li>
         * <li><code>call.squad[n].assistant.voice</code>,</li>
         * <li><code>call.squad[n].assistantId-&gt;voice</code>,</li>
         * <li><code>call.squadId-&gt;[n].assistant.voice</code>,</li>
         * <li><code>call.squadId-&gt;[n].assistantId-&gt;voice</code>.</li>
         * </ul>
         */
        _FinalStage voice(Map<String, Object> voice);

        _FinalStage putAllVoice(Map<String, Object> voice);

        _FinalStage voice(String key, Object value);
    }

    @JsonIgnoreProperties(ignoreUnknown = true)
    public static final class Builder implements CharactersStage, CostStage, _FinalStage {
        private double characters;

        private double cost;

        private Map<String, Object> voice = new LinkedHashMap<>();

        @JsonAnySetter
        private Map<String, Object> additionalProperties = new HashMap<>();

        private Builder() {}

        @java.lang.Override
        public Builder from(VoiceCost other) {
            voice(other.getVoice());
            characters(other.getCharacters());
            cost(other.getCost());
            return this;
        }

        /**
         * <p>This is the number of characters that were generated during the call. These should be total characters used in the call for single assistant calls, while squad calls will have multiple voice costs one for each assistant that was used.</p>
         * <p>This is the number of characters that were generated during the call. These should be total characters used in the call for single assistant calls, while squad calls will have multiple voice costs one for each assistant that was used.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        @JsonSetter("characters")
        public CostStage characters(double characters) {
            this.characters = characters;
            return this;
        }

        /**
         * <p>This is the cost of the component in USD.</p>
         * <p>This is the cost of the component in USD.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        @JsonSetter("cost")
        public _FinalStage cost(double cost) {
            this.cost = cost;
            return this;
        }

        /**
         * <p>This is the voice that was used during the call.</p>
         * <p>This matches one of the following:</p>
         * <ul>
         * <li><code>call.assistant.voice</code>,</li>
         * <li><code>call.assistantId-&gt;voice</code>,</li>
         * <li><code>call.squad[n].assistant.voice</code>,</li>
         * <li><code>call.squad[n].assistantId-&gt;voice</code>,</li>
         * <li><code>call.squadId-&gt;[n].assistant.voice</code>,</li>
         * <li><code>call.squadId-&gt;[n].assistantId-&gt;voice</code>.</li>
         * </ul>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        public _FinalStage voice(String key, Object value) {
            this.voice.put(key, value);
            return this;
        }

        /**
         * <p>This is the voice that was used during the call.</p>
         * <p>This matches one of the following:</p>
         * <ul>
         * <li><code>call.assistant.voice</code>,</li>
         * <li><code>call.assistantId-&gt;voice</code>,</li>
         * <li><code>call.squad[n].assistant.voice</code>,</li>
         * <li><code>call.squad[n].assistantId-&gt;voice</code>,</li>
         * <li><code>call.squadId-&gt;[n].assistant.voice</code>,</li>
         * <li><code>call.squadId-&gt;[n].assistantId-&gt;voice</code>.</li>
         * </ul>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        public _FinalStage putAllVoice(Map<String, Object> voice) {
            this.voice.putAll(voice);
            return this;
        }

        /**
         * <p>This is the voice that was used during the call.</p>
         * <p>This matches one of the following:</p>
         * <ul>
         * <li><code>call.assistant.voice</code>,</li>
         * <li><code>call.assistantId-&gt;voice</code>,</li>
         * <li><code>call.squad[n].assistant.voice</code>,</li>
         * <li><code>call.squad[n].assistantId-&gt;voice</code>,</li>
         * <li><code>call.squadId-&gt;[n].assistant.voice</code>,</li>
         * <li><code>call.squadId-&gt;[n].assistantId-&gt;voice</code>.</li>
         * </ul>
         */
        @java.lang.Override
        @JsonSetter(value = "voice", nulls = Nulls.SKIP)
        public _FinalStage voice(Map<String, Object> voice) {
            this.voice.clear();
            this.voice.putAll(voice);
            return this;
        }

        @java.lang.Override
        public VoiceCost build() {
            return new VoiceCost(voice, characters, cost, additionalProperties);
        }
    }
}
