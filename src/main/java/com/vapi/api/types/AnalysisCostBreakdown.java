/**
 * This file was auto-generated by Fern from our API Definition.
 */
package com.vapi.api.types;

import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.annotation.Nulls;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.vapi.api.core.ObjectMappers;
import java.util.HashMap;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;

@JsonInclude(JsonInclude.Include.NON_ABSENT)
@JsonDeserialize(builder = AnalysisCostBreakdown.Builder.class)
public final class AnalysisCostBreakdown {
    private final Optional<Double> summary;

    private final Optional<Double> summaryPromptTokens;

    private final Optional<Double> summaryCompletionTokens;

    private final Optional<Double> structuredData;

    private final Optional<Double> structuredDataPromptTokens;

    private final Optional<Double> structuredDataCompletionTokens;

    private final Optional<Double> successEvaluation;

    private final Optional<Double> successEvaluationPromptTokens;

    private final Optional<Double> successEvaluationCompletionTokens;

    private final Map<String, Object> additionalProperties;

    private AnalysisCostBreakdown(
            Optional<Double> summary,
            Optional<Double> summaryPromptTokens,
            Optional<Double> summaryCompletionTokens,
            Optional<Double> structuredData,
            Optional<Double> structuredDataPromptTokens,
            Optional<Double> structuredDataCompletionTokens,
            Optional<Double> successEvaluation,
            Optional<Double> successEvaluationPromptTokens,
            Optional<Double> successEvaluationCompletionTokens,
            Map<String, Object> additionalProperties) {
        this.summary = summary;
        this.summaryPromptTokens = summaryPromptTokens;
        this.summaryCompletionTokens = summaryCompletionTokens;
        this.structuredData = structuredData;
        this.structuredDataPromptTokens = structuredDataPromptTokens;
        this.structuredDataCompletionTokens = structuredDataCompletionTokens;
        this.successEvaluation = successEvaluation;
        this.successEvaluationPromptTokens = successEvaluationPromptTokens;
        this.successEvaluationCompletionTokens = successEvaluationCompletionTokens;
        this.additionalProperties = additionalProperties;
    }

    /**
     * @return This is the cost to summarize the call.
     */
    @JsonProperty("summary")
    public Optional<Double> getSummary() {
        return summary;
    }

    /**
     * @return This is the number of prompt tokens used to summarize the call.
     */
    @JsonProperty("summaryPromptTokens")
    public Optional<Double> getSummaryPromptTokens() {
        return summaryPromptTokens;
    }

    /**
     * @return This is the number of completion tokens used to summarize the call.
     */
    @JsonProperty("summaryCompletionTokens")
    public Optional<Double> getSummaryCompletionTokens() {
        return summaryCompletionTokens;
    }

    /**
     * @return This is the cost to extract structured data from the call.
     */
    @JsonProperty("structuredData")
    public Optional<Double> getStructuredData() {
        return structuredData;
    }

    /**
     * @return This is the number of prompt tokens used to extract structured data from the call.
     */
    @JsonProperty("structuredDataPromptTokens")
    public Optional<Double> getStructuredDataPromptTokens() {
        return structuredDataPromptTokens;
    }

    /**
     * @return This is the number of completion tokens used to extract structured data from the call.
     */
    @JsonProperty("structuredDataCompletionTokens")
    public Optional<Double> getStructuredDataCompletionTokens() {
        return structuredDataCompletionTokens;
    }

    /**
     * @return This is the cost to evaluate if the call was successful.
     */
    @JsonProperty("successEvaluation")
    public Optional<Double> getSuccessEvaluation() {
        return successEvaluation;
    }

    /**
     * @return This is the number of prompt tokens used to evaluate if the call was successful.
     */
    @JsonProperty("successEvaluationPromptTokens")
    public Optional<Double> getSuccessEvaluationPromptTokens() {
        return successEvaluationPromptTokens;
    }

    /**
     * @return This is the number of completion tokens used to evaluate if the call was successful.
     */
    @JsonProperty("successEvaluationCompletionTokens")
    public Optional<Double> getSuccessEvaluationCompletionTokens() {
        return successEvaluationCompletionTokens;
    }

    @java.lang.Override
    public boolean equals(Object other) {
        if (this == other) return true;
        return other instanceof AnalysisCostBreakdown && equalTo((AnalysisCostBreakdown) other);
    }

    @JsonAnyGetter
    public Map<String, Object> getAdditionalProperties() {
        return this.additionalProperties;
    }

    private boolean equalTo(AnalysisCostBreakdown other) {
        return summary.equals(other.summary)
                && summaryPromptTokens.equals(other.summaryPromptTokens)
                && summaryCompletionTokens.equals(other.summaryCompletionTokens)
                && structuredData.equals(other.structuredData)
                && structuredDataPromptTokens.equals(other.structuredDataPromptTokens)
                && structuredDataCompletionTokens.equals(other.structuredDataCompletionTokens)
                && successEvaluation.equals(other.successEvaluation)
                && successEvaluationPromptTokens.equals(other.successEvaluationPromptTokens)
                && successEvaluationCompletionTokens.equals(other.successEvaluationCompletionTokens);
    }

    @java.lang.Override
    public int hashCode() {
        return Objects.hash(
                this.summary,
                this.summaryPromptTokens,
                this.summaryCompletionTokens,
                this.structuredData,
                this.structuredDataPromptTokens,
                this.structuredDataCompletionTokens,
                this.successEvaluation,
                this.successEvaluationPromptTokens,
                this.successEvaluationCompletionTokens);
    }

    @java.lang.Override
    public String toString() {
        return ObjectMappers.stringify(this);
    }

    public static Builder builder() {
        return new Builder();
    }

    @JsonIgnoreProperties(ignoreUnknown = true)
    public static final class Builder {
        private Optional<Double> summary = Optional.empty();

        private Optional<Double> summaryPromptTokens = Optional.empty();

        private Optional<Double> summaryCompletionTokens = Optional.empty();

        private Optional<Double> structuredData = Optional.empty();

        private Optional<Double> structuredDataPromptTokens = Optional.empty();

        private Optional<Double> structuredDataCompletionTokens = Optional.empty();

        private Optional<Double> successEvaluation = Optional.empty();

        private Optional<Double> successEvaluationPromptTokens = Optional.empty();

        private Optional<Double> successEvaluationCompletionTokens = Optional.empty();

        @JsonAnySetter
        private Map<String, Object> additionalProperties = new HashMap<>();

        private Builder() {}

        public Builder from(AnalysisCostBreakdown other) {
            summary(other.getSummary());
            summaryPromptTokens(other.getSummaryPromptTokens());
            summaryCompletionTokens(other.getSummaryCompletionTokens());
            structuredData(other.getStructuredData());
            structuredDataPromptTokens(other.getStructuredDataPromptTokens());
            structuredDataCompletionTokens(other.getStructuredDataCompletionTokens());
            successEvaluation(other.getSuccessEvaluation());
            successEvaluationPromptTokens(other.getSuccessEvaluationPromptTokens());
            successEvaluationCompletionTokens(other.getSuccessEvaluationCompletionTokens());
            return this;
        }

        /**
         * <p>This is the cost to summarize the call.</p>
         */
        @JsonSetter(value = "summary", nulls = Nulls.SKIP)
        public Builder summary(Optional<Double> summary) {
            this.summary = summary;
            return this;
        }

        public Builder summary(Double summary) {
            this.summary = Optional.ofNullable(summary);
            return this;
        }

        /**
         * <p>This is the number of prompt tokens used to summarize the call.</p>
         */
        @JsonSetter(value = "summaryPromptTokens", nulls = Nulls.SKIP)
        public Builder summaryPromptTokens(Optional<Double> summaryPromptTokens) {
            this.summaryPromptTokens = summaryPromptTokens;
            return this;
        }

        public Builder summaryPromptTokens(Double summaryPromptTokens) {
            this.summaryPromptTokens = Optional.ofNullable(summaryPromptTokens);
            return this;
        }

        /**
         * <p>This is the number of completion tokens used to summarize the call.</p>
         */
        @JsonSetter(value = "summaryCompletionTokens", nulls = Nulls.SKIP)
        public Builder summaryCompletionTokens(Optional<Double> summaryCompletionTokens) {
            this.summaryCompletionTokens = summaryCompletionTokens;
            return this;
        }

        public Builder summaryCompletionTokens(Double summaryCompletionTokens) {
            this.summaryCompletionTokens = Optional.ofNullable(summaryCompletionTokens);
            return this;
        }

        /**
         * <p>This is the cost to extract structured data from the call.</p>
         */
        @JsonSetter(value = "structuredData", nulls = Nulls.SKIP)
        public Builder structuredData(Optional<Double> structuredData) {
            this.structuredData = structuredData;
            return this;
        }

        public Builder structuredData(Double structuredData) {
            this.structuredData = Optional.ofNullable(structuredData);
            return this;
        }

        /**
         * <p>This is the number of prompt tokens used to extract structured data from the call.</p>
         */
        @JsonSetter(value = "structuredDataPromptTokens", nulls = Nulls.SKIP)
        public Builder structuredDataPromptTokens(Optional<Double> structuredDataPromptTokens) {
            this.structuredDataPromptTokens = structuredDataPromptTokens;
            return this;
        }

        public Builder structuredDataPromptTokens(Double structuredDataPromptTokens) {
            this.structuredDataPromptTokens = Optional.ofNullable(structuredDataPromptTokens);
            return this;
        }

        /**
         * <p>This is the number of completion tokens used to extract structured data from the call.</p>
         */
        @JsonSetter(value = "structuredDataCompletionTokens", nulls = Nulls.SKIP)
        public Builder structuredDataCompletionTokens(Optional<Double> structuredDataCompletionTokens) {
            this.structuredDataCompletionTokens = structuredDataCompletionTokens;
            return this;
        }

        public Builder structuredDataCompletionTokens(Double structuredDataCompletionTokens) {
            this.structuredDataCompletionTokens = Optional.ofNullable(structuredDataCompletionTokens);
            return this;
        }

        /**
         * <p>This is the cost to evaluate if the call was successful.</p>
         */
        @JsonSetter(value = "successEvaluation", nulls = Nulls.SKIP)
        public Builder successEvaluation(Optional<Double> successEvaluation) {
            this.successEvaluation = successEvaluation;
            return this;
        }

        public Builder successEvaluation(Double successEvaluation) {
            this.successEvaluation = Optional.ofNullable(successEvaluation);
            return this;
        }

        /**
         * <p>This is the number of prompt tokens used to evaluate if the call was successful.</p>
         */
        @JsonSetter(value = "successEvaluationPromptTokens", nulls = Nulls.SKIP)
        public Builder successEvaluationPromptTokens(Optional<Double> successEvaluationPromptTokens) {
            this.successEvaluationPromptTokens = successEvaluationPromptTokens;
            return this;
        }

        public Builder successEvaluationPromptTokens(Double successEvaluationPromptTokens) {
            this.successEvaluationPromptTokens = Optional.ofNullable(successEvaluationPromptTokens);
            return this;
        }

        /**
         * <p>This is the number of completion tokens used to evaluate if the call was successful.</p>
         */
        @JsonSetter(value = "successEvaluationCompletionTokens", nulls = Nulls.SKIP)
        public Builder successEvaluationCompletionTokens(Optional<Double> successEvaluationCompletionTokens) {
            this.successEvaluationCompletionTokens = successEvaluationCompletionTokens;
            return this;
        }

        public Builder successEvaluationCompletionTokens(Double successEvaluationCompletionTokens) {
            this.successEvaluationCompletionTokens = Optional.ofNullable(successEvaluationCompletionTokens);
            return this;
        }

        public AnalysisCostBreakdown build() {
            return new AnalysisCostBreakdown(
                    summary,
                    summaryPromptTokens,
                    summaryCompletionTokens,
                    structuredData,
                    structuredDataPromptTokens,
                    structuredDataCompletionTokens,
                    successEvaluation,
                    successEvaluationPromptTokens,
                    successEvaluationCompletionTokens,
                    additionalProperties);
        }
    }
}
