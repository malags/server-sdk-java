/**
 * This file was auto-generated by Fern from our API Definition.
 */
package com.vapi.api.types;

import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.annotation.Nulls;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.vapi.api.core.ObjectMappers;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;

@JsonInclude(JsonInclude.Include.NON_ABSENT)
@JsonDeserialize(builder = AssistantHookCallEnding.Builder.class)
public final class AssistantHookCallEnding {
    private final List<AssistantHookCallEndingDoItem> do_;

    private final Optional<List<AssistantHookFilter>> filters;

    private final Map<String, Object> additionalProperties;

    private AssistantHookCallEnding(
            List<AssistantHookCallEndingDoItem> do_,
            Optional<List<AssistantHookFilter>> filters,
            Map<String, Object> additionalProperties) {
        this.do_ = do_;
        this.filters = filters;
        this.additionalProperties = additionalProperties;
    }

    /**
     * @return This is the set of actions to perform when the hook triggers
     */
    @JsonProperty("do")
    public List<AssistantHookCallEndingDoItem> getDo() {
        return do_;
    }

    /**
     * @return This is the set of filters that must match for the hook to trigger
     */
    @JsonProperty("filters")
    public Optional<List<AssistantHookFilter>> getFilters() {
        return filters;
    }

    @java.lang.Override
    public boolean equals(Object other) {
        if (this == other) return true;
        return other instanceof AssistantHookCallEnding && equalTo((AssistantHookCallEnding) other);
    }

    @JsonAnyGetter
    public Map<String, Object> getAdditionalProperties() {
        return this.additionalProperties;
    }

    private boolean equalTo(AssistantHookCallEnding other) {
        return do_.equals(other.do_) && filters.equals(other.filters);
    }

    @java.lang.Override
    public int hashCode() {
        return Objects.hash(this.do_, this.filters);
    }

    @java.lang.Override
    public String toString() {
        return ObjectMappers.stringify(this);
    }

    public static Builder builder() {
        return new Builder();
    }

    @JsonIgnoreProperties(ignoreUnknown = true)
    public static final class Builder {
        private List<AssistantHookCallEndingDoItem> do_ = new ArrayList<>();

        private Optional<List<AssistantHookFilter>> filters = Optional.empty();

        @JsonAnySetter
        private Map<String, Object> additionalProperties = new HashMap<>();

        private Builder() {}

        public Builder from(AssistantHookCallEnding other) {
            do_(other.getDo());
            filters(other.getFilters());
            return this;
        }

        /**
         * <p>This is the set of actions to perform when the hook triggers</p>
         */
        @JsonSetter(value = "do", nulls = Nulls.SKIP)
        public Builder do_(List<AssistantHookCallEndingDoItem> do_) {
            this.do_.clear();
            this.do_.addAll(do_);
            return this;
        }

        public Builder addDo(AssistantHookCallEndingDoItem do_) {
            this.do_.add(do_);
            return this;
        }

        public Builder addAllDo(List<AssistantHookCallEndingDoItem> do_) {
            this.do_.addAll(do_);
            return this;
        }

        /**
         * <p>This is the set of filters that must match for the hook to trigger</p>
         */
        @JsonSetter(value = "filters", nulls = Nulls.SKIP)
        public Builder filters(Optional<List<AssistantHookFilter>> filters) {
            this.filters = filters;
            return this;
        }

        public Builder filters(List<AssistantHookFilter> filters) {
            this.filters = Optional.ofNullable(filters);
            return this;
        }

        public AssistantHookCallEnding build() {
            return new AssistantHookCallEnding(do_, filters, additionalProperties);
        }
    }
}
