/**
 * This file was auto-generated by Fern from our API Definition.
 */
package com.vapi.api.resources.logs;

import com.vapi.api.core.ClientOptions;
import com.vapi.api.core.ObjectMappers;
import com.vapi.api.core.QueryStringMapper;
import com.vapi.api.core.RequestOptions;
import com.vapi.api.core.VapiApiException;
import com.vapi.api.core.VapiException;
import com.vapi.api.core.VapiHttpResponse;
import com.vapi.api.core.pagination.SyncPagingIterable;
import com.vapi.api.resources.logs.requests.LoggingControllerLogsDeleteQueryRequest;
import com.vapi.api.resources.logs.requests.LogsGetRequest;
import com.vapi.api.types.Log;
import com.vapi.api.types.LogsPaginatedResponse;
import java.io.IOException;
import java.util.List;
import java.util.Optional;
import okhttp3.Headers;
import okhttp3.HttpUrl;
import okhttp3.OkHttpClient;
import okhttp3.Request;
import okhttp3.Response;
import okhttp3.ResponseBody;

public class RawLogsClient {
    protected final ClientOptions clientOptions;

    public RawLogsClient(ClientOptions clientOptions) {
        this.clientOptions = clientOptions;
    }

    public VapiHttpResponse<SyncPagingIterable<Log>> get() {
        return get(LogsGetRequest.builder().build());
    }

    public VapiHttpResponse<SyncPagingIterable<Log>> get(LogsGetRequest request) {
        return get(request, null);
    }

    public VapiHttpResponse<SyncPagingIterable<Log>> get(LogsGetRequest request, RequestOptions requestOptions) {
        HttpUrl.Builder httpUrl = HttpUrl.parse(this.clientOptions.environment().getUrl())
                .newBuilder()
                .addPathSegments("logs");
        if (request.getType().isPresent()) {
            QueryStringMapper.addQueryParameter(
                    httpUrl, "type", request.getType().get(), false);
        }
        if (request.getWebhookType().isPresent()) {
            QueryStringMapper.addQueryParameter(
                    httpUrl, "webhookType", request.getWebhookType().get(), false);
        }
        if (request.getAssistantId().isPresent()) {
            QueryStringMapper.addQueryParameter(
                    httpUrl, "assistantId", request.getAssistantId().get(), false);
        }
        if (request.getPhoneNumberId().isPresent()) {
            QueryStringMapper.addQueryParameter(
                    httpUrl, "phoneNumberId", request.getPhoneNumberId().get(), false);
        }
        if (request.getCustomerId().isPresent()) {
            QueryStringMapper.addQueryParameter(
                    httpUrl, "customerId", request.getCustomerId().get(), false);
        }
        if (request.getSquadId().isPresent()) {
            QueryStringMapper.addQueryParameter(
                    httpUrl, "squadId", request.getSquadId().get(), false);
        }
        if (request.getCallId().isPresent()) {
            QueryStringMapper.addQueryParameter(
                    httpUrl, "callId", request.getCallId().get(), false);
        }
        if (request.getPage().isPresent()) {
            QueryStringMapper.addQueryParameter(
                    httpUrl, "page", request.getPage().get(), false);
        }
        if (request.getSortOrder().isPresent()) {
            QueryStringMapper.addQueryParameter(
                    httpUrl, "sortOrder", request.getSortOrder().get(), false);
        }
        if (request.getLimit().isPresent()) {
            QueryStringMapper.addQueryParameter(
                    httpUrl, "limit", request.getLimit().get(), false);
        }
        if (request.getCreatedAtGt().isPresent()) {
            QueryStringMapper.addQueryParameter(
                    httpUrl, "createdAtGt", request.getCreatedAtGt().get(), false);
        }
        if (request.getCreatedAtLt().isPresent()) {
            QueryStringMapper.addQueryParameter(
                    httpUrl, "createdAtLt", request.getCreatedAtLt().get(), false);
        }
        if (request.getCreatedAtGe().isPresent()) {
            QueryStringMapper.addQueryParameter(
                    httpUrl, "createdAtGe", request.getCreatedAtGe().get(), false);
        }
        if (request.getCreatedAtLe().isPresent()) {
            QueryStringMapper.addQueryParameter(
                    httpUrl, "createdAtLe", request.getCreatedAtLe().get(), false);
        }
        if (request.getUpdatedAtGt().isPresent()) {
            QueryStringMapper.addQueryParameter(
                    httpUrl, "updatedAtGt", request.getUpdatedAtGt().get(), false);
        }
        if (request.getUpdatedAtLt().isPresent()) {
            QueryStringMapper.addQueryParameter(
                    httpUrl, "updatedAtLt", request.getUpdatedAtLt().get(), false);
        }
        if (request.getUpdatedAtGe().isPresent()) {
            QueryStringMapper.addQueryParameter(
                    httpUrl, "updatedAtGe", request.getUpdatedAtGe().get(), false);
        }
        if (request.getUpdatedAtLe().isPresent()) {
            QueryStringMapper.addQueryParameter(
                    httpUrl, "updatedAtLe", request.getUpdatedAtLe().get(), false);
        }
        Request.Builder _requestBuilder = new Request.Builder()
                .url(httpUrl.build())
                .method("GET", null)
                .headers(Headers.of(clientOptions.headers(requestOptions)))
                .addHeader("Accept", "application/json");
        Request okhttpRequest = _requestBuilder.build();
        OkHttpClient client = clientOptions.httpClient();
        if (requestOptions != null && requestOptions.getTimeout().isPresent()) {
            client = clientOptions.httpClientWithTimeout(requestOptions);
        }
        try (Response response = client.newCall(okhttpRequest).execute()) {
            ResponseBody responseBody = response.body();
            if (response.isSuccessful()) {
                LogsPaginatedResponse parsedResponse =
                        ObjectMappers.JSON_MAPPER.readValue(responseBody.string(), LogsPaginatedResponse.class);
                Optional<Double> nextPageNumber = request.getPage().map(page -> page + 1);
                Optional<Double> newPageNumber = nextPageNumber.isPresent() ? nextPageNumber : Optional.of(1.0);
                LogsGetRequest nextRequest = LogsGetRequest.builder()
                        .from(request)
                        .page(newPageNumber)
                        .build();
                List<Log> result = parsedResponse.getResults();
                return new VapiHttpResponse<>(
                        new SyncPagingIterable<Log>(true, result, () -> get(nextRequest, requestOptions)
                                .body()),
                        response);
            }
            String responseBodyString = responseBody != null ? responseBody.string() : "{}";
            throw new VapiApiException(
                    "Error with status code " + response.code(),
                    response.code(),
                    ObjectMappers.JSON_MAPPER.readValue(responseBodyString, Object.class),
                    response);
        } catch (IOException e) {
            throw new VapiException("Network error executing HTTP request", e);
        }
    }

    public VapiHttpResponse<Void> loggingControllerLogsDeleteQuery() {
        return loggingControllerLogsDeleteQuery(
                LoggingControllerLogsDeleteQueryRequest.builder().build());
    }

    public VapiHttpResponse<Void> loggingControllerLogsDeleteQuery(LoggingControllerLogsDeleteQueryRequest request) {
        return loggingControllerLogsDeleteQuery(request, null);
    }

    public VapiHttpResponse<Void> loggingControllerLogsDeleteQuery(
            LoggingControllerLogsDeleteQueryRequest request, RequestOptions requestOptions) {
        HttpUrl.Builder httpUrl = HttpUrl.parse(this.clientOptions.environment().getUrl())
                .newBuilder()
                .addPathSegments("logs");
        if (request.getType().isPresent()) {
            QueryStringMapper.addQueryParameter(
                    httpUrl, "type", request.getType().get(), false);
        }
        if (request.getAssistantId().isPresent()) {
            QueryStringMapper.addQueryParameter(
                    httpUrl, "assistantId", request.getAssistantId().get(), false);
        }
        if (request.getPhoneNumberId().isPresent()) {
            QueryStringMapper.addQueryParameter(
                    httpUrl, "phoneNumberId", request.getPhoneNumberId().get(), false);
        }
        if (request.getCustomerId().isPresent()) {
            QueryStringMapper.addQueryParameter(
                    httpUrl, "customerId", request.getCustomerId().get(), false);
        }
        if (request.getSquadId().isPresent()) {
            QueryStringMapper.addQueryParameter(
                    httpUrl, "squadId", request.getSquadId().get(), false);
        }
        if (request.getCallId().isPresent()) {
            QueryStringMapper.addQueryParameter(
                    httpUrl, "callId", request.getCallId().get(), false);
        }
        Request.Builder _requestBuilder = new Request.Builder()
                .url(httpUrl.build())
                .method("DELETE", null)
                .headers(Headers.of(clientOptions.headers(requestOptions)));
        Request okhttpRequest = _requestBuilder.build();
        OkHttpClient client = clientOptions.httpClient();
        if (requestOptions != null && requestOptions.getTimeout().isPresent()) {
            client = clientOptions.httpClientWithTimeout(requestOptions);
        }
        try (Response response = client.newCall(okhttpRequest).execute()) {
            ResponseBody responseBody = response.body();
            if (response.isSuccessful()) {
                return new VapiHttpResponse<>(null, response);
            }
            String responseBodyString = responseBody != null ? responseBody.string() : "{}";
            throw new VapiApiException(
                    "Error with status code " + response.code(),
                    response.code(),
                    ObjectMappers.JSON_MAPPER.readValue(responseBodyString, Object.class),
                    response);
        } catch (IOException e) {
            throw new VapiException("Network error executing HTTP request", e);
        }
    }
}
