/**
 * This file was auto-generated by Fern from our API Definition.
 */
package com.vapi.api.types;

import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.annotation.Nulls;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.vapi.api.core.Nullable;
import com.vapi.api.core.NullableNonemptyFilter;
import com.vapi.api.core.ObjectMappers;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import org.jetbrains.annotations.NotNull;

@JsonInclude(JsonInclude.Include.NON_ABSENT)
@JsonDeserialize(builder = ResponseObject.Builder.class)
public final class ResponseObject {
    private final String id;

    private final double createdAt;

    private final ResponseObjectStatus status;

    private final Optional<String> error;

    private final List<ResponseOutputMessage> output;

    private final Map<String, Object> additionalProperties;

    private ResponseObject(
            String id,
            double createdAt,
            ResponseObjectStatus status,
            Optional<String> error,
            List<ResponseOutputMessage> output,
            Map<String, Object> additionalProperties) {
        this.id = id;
        this.createdAt = createdAt;
        this.status = status;
        this.error = error;
        this.output = output;
        this.additionalProperties = additionalProperties;
    }

    /**
     * @return Unique identifier for this Response
     */
    @JsonProperty("id")
    public String getId() {
        return id;
    }

    /**
     * @return The object type
     */
    @JsonProperty("object")
    public String getObject() {
        return "response";
    }

    /**
     * @return Unix timestamp (in seconds) of when this Response was created
     */
    @JsonProperty("created_at")
    public double getCreatedAt() {
        return createdAt;
    }

    /**
     * @return Status of the response
     */
    @JsonProperty("status")
    public ResponseObjectStatus getStatus() {
        return status;
    }

    /**
     * @return Error message if the response failed
     */
    @JsonIgnore
    public Optional<String> getError() {
        if (error == null) {
            return Optional.empty();
        }
        return error;
    }

    /**
     * @return Output messages from the model
     */
    @JsonProperty("output")
    public List<ResponseOutputMessage> getOutput() {
        return output;
    }

    @JsonInclude(value = JsonInclude.Include.CUSTOM, valueFilter = NullableNonemptyFilter.class)
    @JsonProperty("error")
    private Optional<String> _getError() {
        return error;
    }

    @java.lang.Override
    public boolean equals(Object other) {
        if (this == other) return true;
        return other instanceof ResponseObject && equalTo((ResponseObject) other);
    }

    @JsonAnyGetter
    public Map<String, Object> getAdditionalProperties() {
        return this.additionalProperties;
    }

    private boolean equalTo(ResponseObject other) {
        return id.equals(other.id)
                && createdAt == other.createdAt
                && status.equals(other.status)
                && error.equals(other.error)
                && output.equals(other.output);
    }

    @java.lang.Override
    public int hashCode() {
        return Objects.hash(this.id, this.createdAt, this.status, this.error, this.output);
    }

    @java.lang.Override
    public String toString() {
        return ObjectMappers.stringify(this);
    }

    public static IdStage builder() {
        return new Builder();
    }

    public interface IdStage {
        /**
         * <p>Unique identifier for this Response</p>
         */
        CreatedAtStage id(@NotNull String id);

        Builder from(ResponseObject other);
    }

    public interface CreatedAtStage {
        /**
         * <p>Unix timestamp (in seconds) of when this Response was created</p>
         */
        StatusStage createdAt(double createdAt);
    }

    public interface StatusStage {
        /**
         * <p>Status of the response</p>
         */
        _FinalStage status(@NotNull ResponseObjectStatus status);
    }

    public interface _FinalStage {
        ResponseObject build();

        /**
         * <p>Error message if the response failed</p>
         */
        _FinalStage error(Optional<String> error);

        _FinalStage error(String error);

        _FinalStage error(Nullable<String> error);

        /**
         * <p>Output messages from the model</p>
         */
        _FinalStage output(List<ResponseOutputMessage> output);

        _FinalStage addOutput(ResponseOutputMessage output);

        _FinalStage addAllOutput(List<ResponseOutputMessage> output);
    }

    @JsonIgnoreProperties(ignoreUnknown = true)
    public static final class Builder implements IdStage, CreatedAtStage, StatusStage, _FinalStage {
        private String id;

        private double createdAt;

        private ResponseObjectStatus status;

        private List<ResponseOutputMessage> output = new ArrayList<>();

        private Optional<String> error = Optional.empty();

        @JsonAnySetter
        private Map<String, Object> additionalProperties = new HashMap<>();

        private Builder() {}

        @java.lang.Override
        public Builder from(ResponseObject other) {
            id(other.getId());
            createdAt(other.getCreatedAt());
            status(other.getStatus());
            error(other.getError());
            output(other.getOutput());
            return this;
        }

        /**
         * <p>Unique identifier for this Response</p>
         * <p>Unique identifier for this Response</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        @JsonSetter("id")
        public CreatedAtStage id(@NotNull String id) {
            this.id = Objects.requireNonNull(id, "id must not be null");
            return this;
        }

        /**
         * <p>Unix timestamp (in seconds) of when this Response was created</p>
         * <p>Unix timestamp (in seconds) of when this Response was created</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        @JsonSetter("created_at")
        public StatusStage createdAt(double createdAt) {
            this.createdAt = createdAt;
            return this;
        }

        /**
         * <p>Status of the response</p>
         * <p>Status of the response</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        @JsonSetter("status")
        public _FinalStage status(@NotNull ResponseObjectStatus status) {
            this.status = Objects.requireNonNull(status, "status must not be null");
            return this;
        }

        /**
         * <p>Output messages from the model</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        public _FinalStage addAllOutput(List<ResponseOutputMessage> output) {
            this.output.addAll(output);
            return this;
        }

        /**
         * <p>Output messages from the model</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        public _FinalStage addOutput(ResponseOutputMessage output) {
            this.output.add(output);
            return this;
        }

        /**
         * <p>Output messages from the model</p>
         */
        @java.lang.Override
        @JsonSetter(value = "output", nulls = Nulls.SKIP)
        public _FinalStage output(List<ResponseOutputMessage> output) {
            this.output.clear();
            this.output.addAll(output);
            return this;
        }

        /**
         * <p>Error message if the response failed</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        public _FinalStage error(Nullable<String> error) {
            if (error.isNull()) {
                this.error = null;
            } else if (error.isEmpty()) {
                this.error = Optional.empty();
            } else {
                this.error = Optional.of(error.get());
            }
            return this;
        }

        /**
         * <p>Error message if the response failed</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        public _FinalStage error(String error) {
            this.error = Optional.ofNullable(error);
            return this;
        }

        /**
         * <p>Error message if the response failed</p>
         */
        @java.lang.Override
        @JsonSetter(value = "error", nulls = Nulls.SKIP)
        public _FinalStage error(Optional<String> error) {
            this.error = error;
            return this;
        }

        @java.lang.Override
        public ResponseObject build() {
            return new ResponseObject(id, createdAt, status, error, output, additionalProperties);
        }
    }
}
