/**
 * This file was auto-generated by Fern from our API Definition.
 */
package com.vapi.api.types;

import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.annotation.Nulls;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.vapi.api.core.ObjectMappers;
import java.util.HashMap;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import org.jetbrains.annotations.NotNull;

@JsonInclude(JsonInclude.Include.NON_ABSENT)
@JsonDeserialize(builder = CreateChatStreamResponse.Builder.class)
public final class CreateChatStreamResponse {
    private final String id;

    private final Optional<String> sessionId;

    private final String path;

    private final String delta;

    private final Map<String, Object> additionalProperties;

    private CreateChatStreamResponse(
            String id,
            Optional<String> sessionId,
            String path,
            String delta,
            Map<String, Object> additionalProperties) {
        this.id = id;
        this.sessionId = sessionId;
        this.path = path;
        this.delta = delta;
        this.additionalProperties = additionalProperties;
    }

    /**
     * @return This is the unique identifier for the streaming response.
     */
    @JsonProperty("id")
    public String getId() {
        return id;
    }

    /**
     * @return This is the ID of the session that will be used for the chat.
     * Helps track conversation context across multiple messages.
     */
    @JsonProperty("sessionId")
    public Optional<String> getSessionId() {
        return sessionId;
    }

    /**
     * @return This is the path to the content being updated.
     * Format: <code>chat.output[{contentIndex}].content</code> where contentIndex identifies the specific content item.
     */
    @JsonProperty("path")
    public String getPath() {
        return path;
    }

    /**
     * @return This is the incremental content chunk being streamed.
     */
    @JsonProperty("delta")
    public String getDelta() {
        return delta;
    }

    @java.lang.Override
    public boolean equals(Object other) {
        if (this == other) return true;
        return other instanceof CreateChatStreamResponse && equalTo((CreateChatStreamResponse) other);
    }

    @JsonAnyGetter
    public Map<String, Object> getAdditionalProperties() {
        return this.additionalProperties;
    }

    private boolean equalTo(CreateChatStreamResponse other) {
        return id.equals(other.id)
                && sessionId.equals(other.sessionId)
                && path.equals(other.path)
                && delta.equals(other.delta);
    }

    @java.lang.Override
    public int hashCode() {
        return Objects.hash(this.id, this.sessionId, this.path, this.delta);
    }

    @java.lang.Override
    public String toString() {
        return ObjectMappers.stringify(this);
    }

    public static IdStage builder() {
        return new Builder();
    }

    public interface IdStage {
        /**
         * <p>This is the unique identifier for the streaming response.</p>
         */
        PathStage id(@NotNull String id);

        Builder from(CreateChatStreamResponse other);
    }

    public interface PathStage {
        /**
         * <p>This is the path to the content being updated.
         * Format: <code>chat.output[{contentIndex}].content</code> where contentIndex identifies the specific content item.</p>
         */
        DeltaStage path(@NotNull String path);
    }

    public interface DeltaStage {
        /**
         * <p>This is the incremental content chunk being streamed.</p>
         */
        _FinalStage delta(@NotNull String delta);
    }

    public interface _FinalStage {
        CreateChatStreamResponse build();

        /**
         * <p>This is the ID of the session that will be used for the chat.
         * Helps track conversation context across multiple messages.</p>
         */
        _FinalStage sessionId(Optional<String> sessionId);

        _FinalStage sessionId(String sessionId);
    }

    @JsonIgnoreProperties(ignoreUnknown = true)
    public static final class Builder implements IdStage, PathStage, DeltaStage, _FinalStage {
        private String id;

        private String path;

        private String delta;

        private Optional<String> sessionId = Optional.empty();

        @JsonAnySetter
        private Map<String, Object> additionalProperties = new HashMap<>();

        private Builder() {}

        @java.lang.Override
        public Builder from(CreateChatStreamResponse other) {
            id(other.getId());
            sessionId(other.getSessionId());
            path(other.getPath());
            delta(other.getDelta());
            return this;
        }

        /**
         * <p>This is the unique identifier for the streaming response.</p>
         * <p>This is the unique identifier for the streaming response.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        @JsonSetter("id")
        public PathStage id(@NotNull String id) {
            this.id = Objects.requireNonNull(id, "id must not be null");
            return this;
        }

        /**
         * <p>This is the path to the content being updated.
         * Format: <code>chat.output[{contentIndex}].content</code> where contentIndex identifies the specific content item.</p>
         * <p>This is the path to the content being updated.
         * Format: <code>chat.output[{contentIndex}].content</code> where contentIndex identifies the specific content item.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        @JsonSetter("path")
        public DeltaStage path(@NotNull String path) {
            this.path = Objects.requireNonNull(path, "path must not be null");
            return this;
        }

        /**
         * <p>This is the incremental content chunk being streamed.</p>
         * <p>This is the incremental content chunk being streamed.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        @JsonSetter("delta")
        public _FinalStage delta(@NotNull String delta) {
            this.delta = Objects.requireNonNull(delta, "delta must not be null");
            return this;
        }

        /**
         * <p>This is the ID of the session that will be used for the chat.
         * Helps track conversation context across multiple messages.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        public _FinalStage sessionId(String sessionId) {
            this.sessionId = Optional.ofNullable(sessionId);
            return this;
        }

        /**
         * <p>This is the ID of the session that will be used for the chat.
         * Helps track conversation context across multiple messages.</p>
         */
        @java.lang.Override
        @JsonSetter(value = "sessionId", nulls = Nulls.SKIP)
        public _FinalStage sessionId(Optional<String> sessionId) {
            this.sessionId = sessionId;
            return this;
        }

        @java.lang.Override
        public CreateChatStreamResponse build() {
            return new CreateChatStreamResponse(id, sessionId, path, delta, additionalProperties);
        }
    }
}
