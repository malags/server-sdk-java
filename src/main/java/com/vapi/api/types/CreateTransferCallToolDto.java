/**
 * This file was auto-generated by Fern from our API Definition.
 */
package com.vapi.api.types;

import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.annotation.Nulls;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.vapi.api.core.ObjectMappers;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;

@JsonInclude(JsonInclude.Include.NON_ABSENT)
@JsonDeserialize(builder = CreateTransferCallToolDto.Builder.class)
public final class CreateTransferCallToolDto {
    private final Optional<List<CreateTransferCallToolDtoMessagesItem>> messages;

    private final Optional<List<CreateTransferCallToolDtoDestinationsItem>> destinations;

    private final Optional<OpenAiFunction> function;

    private final Map<String, Object> additionalProperties;

    private CreateTransferCallToolDto(
            Optional<List<CreateTransferCallToolDtoMessagesItem>> messages,
            Optional<List<CreateTransferCallToolDtoDestinationsItem>> destinations,
            Optional<OpenAiFunction> function,
            Map<String, Object> additionalProperties) {
        this.messages = messages;
        this.destinations = destinations;
        this.function = function;
        this.additionalProperties = additionalProperties;
    }

    /**
     * @return These are the messages that will be spoken to the user as the tool is running.
     * <p>For some tools, this is auto-filled based on special fields like <code>tool.destinations</code>. For others like the function tool, these can be custom configured.</p>
     */
    @JsonProperty("messages")
    public Optional<List<CreateTransferCallToolDtoMessagesItem>> getMessages() {
        return messages;
    }

    /**
     * @return These are the destinations that the call can be transferred to. If no destinations are provided, server.url will be used to get the transfer destination once the tool is called.
     */
    @JsonProperty("destinations")
    public Optional<List<CreateTransferCallToolDtoDestinationsItem>> getDestinations() {
        return destinations;
    }

    /**
     * @return This is the function definition of the tool.
     * <p>For <code>endCall</code>, <code>transferCall</code>, and <code>dtmf</code> tools, this is auto-filled based on tool-specific fields like <code>tool.destinations</code>. But, even in those cases, you can provide a custom function definition for advanced use cases.</p>
     * <p>An example of an advanced use case is if you want to customize the message that's spoken for <code>endCall</code> tool. You can specify a function where it returns an argument &quot;reason&quot;. Then, in <code>messages</code> array, you can have many &quot;request-complete&quot; messages. One of these messages will be triggered if the <code>messages[].conditions</code> matches the &quot;reason&quot; argument.</p>
     */
    @JsonProperty("function")
    public Optional<OpenAiFunction> getFunction() {
        return function;
    }

    @java.lang.Override
    public boolean equals(Object other) {
        if (this == other) return true;
        return other instanceof CreateTransferCallToolDto && equalTo((CreateTransferCallToolDto) other);
    }

    @JsonAnyGetter
    public Map<String, Object> getAdditionalProperties() {
        return this.additionalProperties;
    }

    private boolean equalTo(CreateTransferCallToolDto other) {
        return messages.equals(other.messages)
                && destinations.equals(other.destinations)
                && function.equals(other.function);
    }

    @java.lang.Override
    public int hashCode() {
        return Objects.hash(this.messages, this.destinations, this.function);
    }

    @java.lang.Override
    public String toString() {
        return ObjectMappers.stringify(this);
    }

    public static Builder builder() {
        return new Builder();
    }

    @JsonIgnoreProperties(ignoreUnknown = true)
    public static final class Builder {
        private Optional<List<CreateTransferCallToolDtoMessagesItem>> messages = Optional.empty();

        private Optional<List<CreateTransferCallToolDtoDestinationsItem>> destinations = Optional.empty();

        private Optional<OpenAiFunction> function = Optional.empty();

        @JsonAnySetter
        private Map<String, Object> additionalProperties = new HashMap<>();

        private Builder() {}

        public Builder from(CreateTransferCallToolDto other) {
            messages(other.getMessages());
            destinations(other.getDestinations());
            function(other.getFunction());
            return this;
        }

        /**
         * <p>These are the messages that will be spoken to the user as the tool is running.</p>
         * <p>For some tools, this is auto-filled based on special fields like <code>tool.destinations</code>. For others like the function tool, these can be custom configured.</p>
         */
        @JsonSetter(value = "messages", nulls = Nulls.SKIP)
        public Builder messages(Optional<List<CreateTransferCallToolDtoMessagesItem>> messages) {
            this.messages = messages;
            return this;
        }

        public Builder messages(List<CreateTransferCallToolDtoMessagesItem> messages) {
            this.messages = Optional.ofNullable(messages);
            return this;
        }

        /**
         * <p>These are the destinations that the call can be transferred to. If no destinations are provided, server.url will be used to get the transfer destination once the tool is called.</p>
         */
        @JsonSetter(value = "destinations", nulls = Nulls.SKIP)
        public Builder destinations(Optional<List<CreateTransferCallToolDtoDestinationsItem>> destinations) {
            this.destinations = destinations;
            return this;
        }

        public Builder destinations(List<CreateTransferCallToolDtoDestinationsItem> destinations) {
            this.destinations = Optional.ofNullable(destinations);
            return this;
        }

        /**
         * <p>This is the function definition of the tool.</p>
         * <p>For <code>endCall</code>, <code>transferCall</code>, and <code>dtmf</code> tools, this is auto-filled based on tool-specific fields like <code>tool.destinations</code>. But, even in those cases, you can provide a custom function definition for advanced use cases.</p>
         * <p>An example of an advanced use case is if you want to customize the message that's spoken for <code>endCall</code> tool. You can specify a function where it returns an argument &quot;reason&quot;. Then, in <code>messages</code> array, you can have many &quot;request-complete&quot; messages. One of these messages will be triggered if the <code>messages[].conditions</code> matches the &quot;reason&quot; argument.</p>
         */
        @JsonSetter(value = "function", nulls = Nulls.SKIP)
        public Builder function(Optional<OpenAiFunction> function) {
            this.function = function;
            return this;
        }

        public Builder function(OpenAiFunction function) {
            this.function = Optional.ofNullable(function);
            return this;
        }

        public CreateTransferCallToolDto build() {
            return new CreateTransferCallToolDto(messages, destinations, function, additionalProperties);
        }
    }
}
