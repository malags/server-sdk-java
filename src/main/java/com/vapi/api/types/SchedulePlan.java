/**
 * This file was auto-generated by Fern from our API Definition.
 */
package com.vapi.api.types;

import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.annotation.Nulls;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.vapi.api.core.ObjectMappers;
import java.time.OffsetDateTime;
import java.util.HashMap;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import org.jetbrains.annotations.NotNull;

@JsonInclude(JsonInclude.Include.NON_ABSENT)
@JsonDeserialize(builder = SchedulePlan.Builder.class)
public final class SchedulePlan {
    private final OffsetDateTime earliestAt;

    private final Optional<OffsetDateTime> latestAt;

    private final Map<String, Object> additionalProperties;

    private SchedulePlan(
            OffsetDateTime earliestAt, Optional<OffsetDateTime> latestAt, Map<String, Object> additionalProperties) {
        this.earliestAt = earliestAt;
        this.latestAt = latestAt;
        this.additionalProperties = additionalProperties;
    }

    /**
     * @return This is the ISO 8601 date-time string of the earliest time the call can be scheduled.
     */
    @JsonProperty("earliestAt")
    public OffsetDateTime getEarliestAt() {
        return earliestAt;
    }

    /**
     * @return This is the ISO 8601 date-time string of the latest time the call can be scheduled.
     */
    @JsonProperty("latestAt")
    public Optional<OffsetDateTime> getLatestAt() {
        return latestAt;
    }

    @java.lang.Override
    public boolean equals(Object other) {
        if (this == other) return true;
        return other instanceof SchedulePlan && equalTo((SchedulePlan) other);
    }

    @JsonAnyGetter
    public Map<String, Object> getAdditionalProperties() {
        return this.additionalProperties;
    }

    private boolean equalTo(SchedulePlan other) {
        return earliestAt.equals(other.earliestAt) && latestAt.equals(other.latestAt);
    }

    @java.lang.Override
    public int hashCode() {
        return Objects.hash(this.earliestAt, this.latestAt);
    }

    @java.lang.Override
    public String toString() {
        return ObjectMappers.stringify(this);
    }

    public static EarliestAtStage builder() {
        return new Builder();
    }

    public interface EarliestAtStage {
        /**
         * <p>This is the ISO 8601 date-time string of the earliest time the call can be scheduled.</p>
         */
        _FinalStage earliestAt(@NotNull OffsetDateTime earliestAt);

        Builder from(SchedulePlan other);
    }

    public interface _FinalStage {
        SchedulePlan build();

        /**
         * <p>This is the ISO 8601 date-time string of the latest time the call can be scheduled.</p>
         */
        _FinalStage latestAt(Optional<OffsetDateTime> latestAt);

        _FinalStage latestAt(OffsetDateTime latestAt);
    }

    @JsonIgnoreProperties(ignoreUnknown = true)
    public static final class Builder implements EarliestAtStage, _FinalStage {
        private OffsetDateTime earliestAt;

        private Optional<OffsetDateTime> latestAt = Optional.empty();

        @JsonAnySetter
        private Map<String, Object> additionalProperties = new HashMap<>();

        private Builder() {}

        @java.lang.Override
        public Builder from(SchedulePlan other) {
            earliestAt(other.getEarliestAt());
            latestAt(other.getLatestAt());
            return this;
        }

        /**
         * <p>This is the ISO 8601 date-time string of the earliest time the call can be scheduled.</p>
         * <p>This is the ISO 8601 date-time string of the earliest time the call can be scheduled.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        @JsonSetter("earliestAt")
        public _FinalStage earliestAt(@NotNull OffsetDateTime earliestAt) {
            this.earliestAt = Objects.requireNonNull(earliestAt, "earliestAt must not be null");
            return this;
        }

        /**
         * <p>This is the ISO 8601 date-time string of the latest time the call can be scheduled.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        public _FinalStage latestAt(OffsetDateTime latestAt) {
            this.latestAt = Optional.ofNullable(latestAt);
            return this;
        }

        /**
         * <p>This is the ISO 8601 date-time string of the latest time the call can be scheduled.</p>
         */
        @java.lang.Override
        @JsonSetter(value = "latestAt", nulls = Nulls.SKIP)
        public _FinalStage latestAt(Optional<OffsetDateTime> latestAt) {
            this.latestAt = latestAt;
            return this;
        }

        @java.lang.Override
        public SchedulePlan build() {
            return new SchedulePlan(earliestAt, latestAt, additionalProperties);
        }
    }
}
