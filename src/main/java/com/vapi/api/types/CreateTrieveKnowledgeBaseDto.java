/**
 * This file was auto-generated by Fern from our API Definition.
 */
package com.vapi.api.types;

import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.annotation.Nulls;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.vapi.api.core.ObjectMappers;
import java.util.HashMap;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;

@JsonInclude(JsonInclude.Include.NON_ABSENT)
@JsonDeserialize(builder = CreateTrieveKnowledgeBaseDto.Builder.class)
public final class CreateTrieveKnowledgeBaseDto {
    private final Optional<String> name;

    private final Optional<TrieveKnowledgeBaseSearchPlan> searchPlan;

    private final Optional<TrieveKnowledgeBaseImport> createPlan;

    private final Map<String, Object> additionalProperties;

    private CreateTrieveKnowledgeBaseDto(
            Optional<String> name,
            Optional<TrieveKnowledgeBaseSearchPlan> searchPlan,
            Optional<TrieveKnowledgeBaseImport> createPlan,
            Map<String, Object> additionalProperties) {
        this.name = name;
        this.searchPlan = searchPlan;
        this.createPlan = createPlan;
        this.additionalProperties = additionalProperties;
    }

    /**
     * @return This is the name of the knowledge base.
     */
    @JsonProperty("name")
    public Optional<String> getName() {
        return name;
    }

    /**
     * @return This is the searching plan used when searching for relevant chunks from the vector store.
     * <p>You should configure this if you're running into these issues:</p>
     * <ul>
     * <li>Too much unnecessary context is being fed as knowledge base context.</li>
     * <li>Not enough relevant context is being fed as knowledge base context.</li>
     * </ul>
     */
    @JsonProperty("searchPlan")
    public Optional<TrieveKnowledgeBaseSearchPlan> getSearchPlan() {
        return searchPlan;
    }

    /**
     * @return This is the plan if you want us to create/import a new vector store using Trieve.
     */
    @JsonProperty("createPlan")
    public Optional<TrieveKnowledgeBaseImport> getCreatePlan() {
        return createPlan;
    }

    @java.lang.Override
    public boolean equals(Object other) {
        if (this == other) return true;
        return other instanceof CreateTrieveKnowledgeBaseDto && equalTo((CreateTrieveKnowledgeBaseDto) other);
    }

    @JsonAnyGetter
    public Map<String, Object> getAdditionalProperties() {
        return this.additionalProperties;
    }

    private boolean equalTo(CreateTrieveKnowledgeBaseDto other) {
        return name.equals(other.name) && searchPlan.equals(other.searchPlan) && createPlan.equals(other.createPlan);
    }

    @java.lang.Override
    public int hashCode() {
        return Objects.hash(this.name, this.searchPlan, this.createPlan);
    }

    @java.lang.Override
    public String toString() {
        return ObjectMappers.stringify(this);
    }

    public static Builder builder() {
        return new Builder();
    }

    @JsonIgnoreProperties(ignoreUnknown = true)
    public static final class Builder {
        private Optional<String> name = Optional.empty();

        private Optional<TrieveKnowledgeBaseSearchPlan> searchPlan = Optional.empty();

        private Optional<TrieveKnowledgeBaseImport> createPlan = Optional.empty();

        @JsonAnySetter
        private Map<String, Object> additionalProperties = new HashMap<>();

        private Builder() {}

        public Builder from(CreateTrieveKnowledgeBaseDto other) {
            name(other.getName());
            searchPlan(other.getSearchPlan());
            createPlan(other.getCreatePlan());
            return this;
        }

        /**
         * <p>This is the name of the knowledge base.</p>
         */
        @JsonSetter(value = "name", nulls = Nulls.SKIP)
        public Builder name(Optional<String> name) {
            this.name = name;
            return this;
        }

        public Builder name(String name) {
            this.name = Optional.ofNullable(name);
            return this;
        }

        /**
         * <p>This is the searching plan used when searching for relevant chunks from the vector store.</p>
         * <p>You should configure this if you're running into these issues:</p>
         * <ul>
         * <li>Too much unnecessary context is being fed as knowledge base context.</li>
         * <li>Not enough relevant context is being fed as knowledge base context.</li>
         * </ul>
         */
        @JsonSetter(value = "searchPlan", nulls = Nulls.SKIP)
        public Builder searchPlan(Optional<TrieveKnowledgeBaseSearchPlan> searchPlan) {
            this.searchPlan = searchPlan;
            return this;
        }

        public Builder searchPlan(TrieveKnowledgeBaseSearchPlan searchPlan) {
            this.searchPlan = Optional.ofNullable(searchPlan);
            return this;
        }

        /**
         * <p>This is the plan if you want us to create/import a new vector store using Trieve.</p>
         */
        @JsonSetter(value = "createPlan", nulls = Nulls.SKIP)
        public Builder createPlan(Optional<TrieveKnowledgeBaseImport> createPlan) {
            this.createPlan = createPlan;
            return this;
        }

        public Builder createPlan(TrieveKnowledgeBaseImport createPlan) {
            this.createPlan = Optional.ofNullable(createPlan);
            return this;
        }

        public CreateTrieveKnowledgeBaseDto build() {
            return new CreateTrieveKnowledgeBaseDto(name, searchPlan, createPlan, additionalProperties);
        }
    }
}
