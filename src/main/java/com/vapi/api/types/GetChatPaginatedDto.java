/**
 * This file was auto-generated by Fern from our API Definition.
 */
package com.vapi.api.types;

import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.annotation.Nulls;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.vapi.api.core.ObjectMappers;
import java.time.OffsetDateTime;
import java.util.HashMap;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;

@JsonInclude(JsonInclude.Include.NON_ABSENT)
@JsonDeserialize(builder = GetChatPaginatedDto.Builder.class)
public final class GetChatPaginatedDto {
    private final Optional<String> assistantId;

    private final Optional<String> workflowId;

    private final Optional<String> sessionId;

    private final Optional<Double> page;

    private final Optional<GetChatPaginatedDtoSortOrder> sortOrder;

    private final Optional<Double> limit;

    private final Optional<OffsetDateTime> createdAtGt;

    private final Optional<OffsetDateTime> createdAtLt;

    private final Optional<OffsetDateTime> createdAtGe;

    private final Optional<OffsetDateTime> createdAtLe;

    private final Optional<OffsetDateTime> updatedAtGt;

    private final Optional<OffsetDateTime> updatedAtLt;

    private final Optional<OffsetDateTime> updatedAtGe;

    private final Optional<OffsetDateTime> updatedAtLe;

    private final Map<String, Object> additionalProperties;

    private GetChatPaginatedDto(
            Optional<String> assistantId,
            Optional<String> workflowId,
            Optional<String> sessionId,
            Optional<Double> page,
            Optional<GetChatPaginatedDtoSortOrder> sortOrder,
            Optional<Double> limit,
            Optional<OffsetDateTime> createdAtGt,
            Optional<OffsetDateTime> createdAtLt,
            Optional<OffsetDateTime> createdAtGe,
            Optional<OffsetDateTime> createdAtLe,
            Optional<OffsetDateTime> updatedAtGt,
            Optional<OffsetDateTime> updatedAtLt,
            Optional<OffsetDateTime> updatedAtGe,
            Optional<OffsetDateTime> updatedAtLe,
            Map<String, Object> additionalProperties) {
        this.assistantId = assistantId;
        this.workflowId = workflowId;
        this.sessionId = sessionId;
        this.page = page;
        this.sortOrder = sortOrder;
        this.limit = limit;
        this.createdAtGt = createdAtGt;
        this.createdAtLt = createdAtLt;
        this.createdAtGe = createdAtGe;
        this.createdAtLe = createdAtLe;
        this.updatedAtGt = updatedAtGt;
        this.updatedAtLt = updatedAtLt;
        this.updatedAtGe = updatedAtGe;
        this.updatedAtLe = updatedAtLe;
        this.additionalProperties = additionalProperties;
    }

    /**
     * @return This is the unique identifier for the assistant that will be used for the chat.
     */
    @JsonProperty("assistantId")
    public Optional<String> getAssistantId() {
        return assistantId;
    }

    /**
     * @return This is the unique identifier for the workflow that will be used for the chat.
     */
    @JsonProperty("workflowId")
    public Optional<String> getWorkflowId() {
        return workflowId;
    }

    /**
     * @return This is the unique identifier for the session that will be used for the chat.
     */
    @JsonProperty("sessionId")
    public Optional<String> getSessionId() {
        return sessionId;
    }

    /**
     * @return This is the page number to return. Defaults to 1.
     */
    @JsonProperty("page")
    public Optional<Double> getPage() {
        return page;
    }

    /**
     * @return This is the sort order for pagination. Defaults to 'DESC'.
     */
    @JsonProperty("sortOrder")
    public Optional<GetChatPaginatedDtoSortOrder> getSortOrder() {
        return sortOrder;
    }

    /**
     * @return This is the maximum number of items to return. Defaults to 100.
     */
    @JsonProperty("limit")
    public Optional<Double> getLimit() {
        return limit;
    }

    /**
     * @return This will return items where the createdAt is greater than the specified value.
     */
    @JsonProperty("createdAtGt")
    public Optional<OffsetDateTime> getCreatedAtGt() {
        return createdAtGt;
    }

    /**
     * @return This will return items where the createdAt is less than the specified value.
     */
    @JsonProperty("createdAtLt")
    public Optional<OffsetDateTime> getCreatedAtLt() {
        return createdAtLt;
    }

    /**
     * @return This will return items where the createdAt is greater than or equal to the specified value.
     */
    @JsonProperty("createdAtGe")
    public Optional<OffsetDateTime> getCreatedAtGe() {
        return createdAtGe;
    }

    /**
     * @return This will return items where the createdAt is less than or equal to the specified value.
     */
    @JsonProperty("createdAtLe")
    public Optional<OffsetDateTime> getCreatedAtLe() {
        return createdAtLe;
    }

    /**
     * @return This will return items where the updatedAt is greater than the specified value.
     */
    @JsonProperty("updatedAtGt")
    public Optional<OffsetDateTime> getUpdatedAtGt() {
        return updatedAtGt;
    }

    /**
     * @return This will return items where the updatedAt is less than the specified value.
     */
    @JsonProperty("updatedAtLt")
    public Optional<OffsetDateTime> getUpdatedAtLt() {
        return updatedAtLt;
    }

    /**
     * @return This will return items where the updatedAt is greater than or equal to the specified value.
     */
    @JsonProperty("updatedAtGe")
    public Optional<OffsetDateTime> getUpdatedAtGe() {
        return updatedAtGe;
    }

    /**
     * @return This will return items where the updatedAt is less than or equal to the specified value.
     */
    @JsonProperty("updatedAtLe")
    public Optional<OffsetDateTime> getUpdatedAtLe() {
        return updatedAtLe;
    }

    @java.lang.Override
    public boolean equals(Object other) {
        if (this == other) return true;
        return other instanceof GetChatPaginatedDto && equalTo((GetChatPaginatedDto) other);
    }

    @JsonAnyGetter
    public Map<String, Object> getAdditionalProperties() {
        return this.additionalProperties;
    }

    private boolean equalTo(GetChatPaginatedDto other) {
        return assistantId.equals(other.assistantId)
                && workflowId.equals(other.workflowId)
                && sessionId.equals(other.sessionId)
                && page.equals(other.page)
                && sortOrder.equals(other.sortOrder)
                && limit.equals(other.limit)
                && createdAtGt.equals(other.createdAtGt)
                && createdAtLt.equals(other.createdAtLt)
                && createdAtGe.equals(other.createdAtGe)
                && createdAtLe.equals(other.createdAtLe)
                && updatedAtGt.equals(other.updatedAtGt)
                && updatedAtLt.equals(other.updatedAtLt)
                && updatedAtGe.equals(other.updatedAtGe)
                && updatedAtLe.equals(other.updatedAtLe);
    }

    @java.lang.Override
    public int hashCode() {
        return Objects.hash(
                this.assistantId,
                this.workflowId,
                this.sessionId,
                this.page,
                this.sortOrder,
                this.limit,
                this.createdAtGt,
                this.createdAtLt,
                this.createdAtGe,
                this.createdAtLe,
                this.updatedAtGt,
                this.updatedAtLt,
                this.updatedAtGe,
                this.updatedAtLe);
    }

    @java.lang.Override
    public String toString() {
        return ObjectMappers.stringify(this);
    }

    public static Builder builder() {
        return new Builder();
    }

    @JsonIgnoreProperties(ignoreUnknown = true)
    public static final class Builder {
        private Optional<String> assistantId = Optional.empty();

        private Optional<String> workflowId = Optional.empty();

        private Optional<String> sessionId = Optional.empty();

        private Optional<Double> page = Optional.empty();

        private Optional<GetChatPaginatedDtoSortOrder> sortOrder = Optional.empty();

        private Optional<Double> limit = Optional.empty();

        private Optional<OffsetDateTime> createdAtGt = Optional.empty();

        private Optional<OffsetDateTime> createdAtLt = Optional.empty();

        private Optional<OffsetDateTime> createdAtGe = Optional.empty();

        private Optional<OffsetDateTime> createdAtLe = Optional.empty();

        private Optional<OffsetDateTime> updatedAtGt = Optional.empty();

        private Optional<OffsetDateTime> updatedAtLt = Optional.empty();

        private Optional<OffsetDateTime> updatedAtGe = Optional.empty();

        private Optional<OffsetDateTime> updatedAtLe = Optional.empty();

        @JsonAnySetter
        private Map<String, Object> additionalProperties = new HashMap<>();

        private Builder() {}

        public Builder from(GetChatPaginatedDto other) {
            assistantId(other.getAssistantId());
            workflowId(other.getWorkflowId());
            sessionId(other.getSessionId());
            page(other.getPage());
            sortOrder(other.getSortOrder());
            limit(other.getLimit());
            createdAtGt(other.getCreatedAtGt());
            createdAtLt(other.getCreatedAtLt());
            createdAtGe(other.getCreatedAtGe());
            createdAtLe(other.getCreatedAtLe());
            updatedAtGt(other.getUpdatedAtGt());
            updatedAtLt(other.getUpdatedAtLt());
            updatedAtGe(other.getUpdatedAtGe());
            updatedAtLe(other.getUpdatedAtLe());
            return this;
        }

        /**
         * <p>This is the unique identifier for the assistant that will be used for the chat.</p>
         */
        @JsonSetter(value = "assistantId", nulls = Nulls.SKIP)
        public Builder assistantId(Optional<String> assistantId) {
            this.assistantId = assistantId;
            return this;
        }

        public Builder assistantId(String assistantId) {
            this.assistantId = Optional.ofNullable(assistantId);
            return this;
        }

        /**
         * <p>This is the unique identifier for the workflow that will be used for the chat.</p>
         */
        @JsonSetter(value = "workflowId", nulls = Nulls.SKIP)
        public Builder workflowId(Optional<String> workflowId) {
            this.workflowId = workflowId;
            return this;
        }

        public Builder workflowId(String workflowId) {
            this.workflowId = Optional.ofNullable(workflowId);
            return this;
        }

        /**
         * <p>This is the unique identifier for the session that will be used for the chat.</p>
         */
        @JsonSetter(value = "sessionId", nulls = Nulls.SKIP)
        public Builder sessionId(Optional<String> sessionId) {
            this.sessionId = sessionId;
            return this;
        }

        public Builder sessionId(String sessionId) {
            this.sessionId = Optional.ofNullable(sessionId);
            return this;
        }

        /**
         * <p>This is the page number to return. Defaults to 1.</p>
         */
        @JsonSetter(value = "page", nulls = Nulls.SKIP)
        public Builder page(Optional<Double> page) {
            this.page = page;
            return this;
        }

        public Builder page(Double page) {
            this.page = Optional.ofNullable(page);
            return this;
        }

        /**
         * <p>This is the sort order for pagination. Defaults to 'DESC'.</p>
         */
        @JsonSetter(value = "sortOrder", nulls = Nulls.SKIP)
        public Builder sortOrder(Optional<GetChatPaginatedDtoSortOrder> sortOrder) {
            this.sortOrder = sortOrder;
            return this;
        }

        public Builder sortOrder(GetChatPaginatedDtoSortOrder sortOrder) {
            this.sortOrder = Optional.ofNullable(sortOrder);
            return this;
        }

        /**
         * <p>This is the maximum number of items to return. Defaults to 100.</p>
         */
        @JsonSetter(value = "limit", nulls = Nulls.SKIP)
        public Builder limit(Optional<Double> limit) {
            this.limit = limit;
            return this;
        }

        public Builder limit(Double limit) {
            this.limit = Optional.ofNullable(limit);
            return this;
        }

        /**
         * <p>This will return items where the createdAt is greater than the specified value.</p>
         */
        @JsonSetter(value = "createdAtGt", nulls = Nulls.SKIP)
        public Builder createdAtGt(Optional<OffsetDateTime> createdAtGt) {
            this.createdAtGt = createdAtGt;
            return this;
        }

        public Builder createdAtGt(OffsetDateTime createdAtGt) {
            this.createdAtGt = Optional.ofNullable(createdAtGt);
            return this;
        }

        /**
         * <p>This will return items where the createdAt is less than the specified value.</p>
         */
        @JsonSetter(value = "createdAtLt", nulls = Nulls.SKIP)
        public Builder createdAtLt(Optional<OffsetDateTime> createdAtLt) {
            this.createdAtLt = createdAtLt;
            return this;
        }

        public Builder createdAtLt(OffsetDateTime createdAtLt) {
            this.createdAtLt = Optional.ofNullable(createdAtLt);
            return this;
        }

        /**
         * <p>This will return items where the createdAt is greater than or equal to the specified value.</p>
         */
        @JsonSetter(value = "createdAtGe", nulls = Nulls.SKIP)
        public Builder createdAtGe(Optional<OffsetDateTime> createdAtGe) {
            this.createdAtGe = createdAtGe;
            return this;
        }

        public Builder createdAtGe(OffsetDateTime createdAtGe) {
            this.createdAtGe = Optional.ofNullable(createdAtGe);
            return this;
        }

        /**
         * <p>This will return items where the createdAt is less than or equal to the specified value.</p>
         */
        @JsonSetter(value = "createdAtLe", nulls = Nulls.SKIP)
        public Builder createdAtLe(Optional<OffsetDateTime> createdAtLe) {
            this.createdAtLe = createdAtLe;
            return this;
        }

        public Builder createdAtLe(OffsetDateTime createdAtLe) {
            this.createdAtLe = Optional.ofNullable(createdAtLe);
            return this;
        }

        /**
         * <p>This will return items where the updatedAt is greater than the specified value.</p>
         */
        @JsonSetter(value = "updatedAtGt", nulls = Nulls.SKIP)
        public Builder updatedAtGt(Optional<OffsetDateTime> updatedAtGt) {
            this.updatedAtGt = updatedAtGt;
            return this;
        }

        public Builder updatedAtGt(OffsetDateTime updatedAtGt) {
            this.updatedAtGt = Optional.ofNullable(updatedAtGt);
            return this;
        }

        /**
         * <p>This will return items where the updatedAt is less than the specified value.</p>
         */
        @JsonSetter(value = "updatedAtLt", nulls = Nulls.SKIP)
        public Builder updatedAtLt(Optional<OffsetDateTime> updatedAtLt) {
            this.updatedAtLt = updatedAtLt;
            return this;
        }

        public Builder updatedAtLt(OffsetDateTime updatedAtLt) {
            this.updatedAtLt = Optional.ofNullable(updatedAtLt);
            return this;
        }

        /**
         * <p>This will return items where the updatedAt is greater than or equal to the specified value.</p>
         */
        @JsonSetter(value = "updatedAtGe", nulls = Nulls.SKIP)
        public Builder updatedAtGe(Optional<OffsetDateTime> updatedAtGe) {
            this.updatedAtGe = updatedAtGe;
            return this;
        }

        public Builder updatedAtGe(OffsetDateTime updatedAtGe) {
            this.updatedAtGe = Optional.ofNullable(updatedAtGe);
            return this;
        }

        /**
         * <p>This will return items where the updatedAt is less than or equal to the specified value.</p>
         */
        @JsonSetter(value = "updatedAtLe", nulls = Nulls.SKIP)
        public Builder updatedAtLe(Optional<OffsetDateTime> updatedAtLe) {
            this.updatedAtLe = updatedAtLe;
            return this;
        }

        public Builder updatedAtLe(OffsetDateTime updatedAtLe) {
            this.updatedAtLe = Optional.ofNullable(updatedAtLe);
            return this;
        }

        public GetChatPaginatedDto build() {
            return new GetChatPaginatedDto(
                    assistantId,
                    workflowId,
                    sessionId,
                    page,
                    sortOrder,
                    limit,
                    createdAtGt,
                    createdAtLt,
                    createdAtGe,
                    createdAtLe,
                    updatedAtGt,
                    updatedAtLt,
                    updatedAtGe,
                    updatedAtLe,
                    additionalProperties);
        }
    }
}
