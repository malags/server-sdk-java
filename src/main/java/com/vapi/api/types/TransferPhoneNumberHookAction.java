/**
 * This file was auto-generated by Fern from our API Definition.
 */
package com.vapi.api.types;

import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.annotation.Nulls;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.vapi.api.core.ObjectMappers;
import java.util.HashMap;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;

@JsonInclude(JsonInclude.Include.NON_ABSENT)
@JsonDeserialize(builder = TransferPhoneNumberHookAction.Builder.class)
public final class TransferPhoneNumberHookAction {
    private final Optional<TransferPhoneNumberHookActionDestination> destination;

    private final Map<String, Object> additionalProperties;

    private TransferPhoneNumberHookAction(
            Optional<TransferPhoneNumberHookActionDestination> destination, Map<String, Object> additionalProperties) {
        this.destination = destination;
        this.additionalProperties = additionalProperties;
    }

    /**
     * @return This is the destination details for the transfer - can be a phone number or SIP URI
     */
    @JsonProperty("destination")
    public Optional<TransferPhoneNumberHookActionDestination> getDestination() {
        return destination;
    }

    @java.lang.Override
    public boolean equals(Object other) {
        if (this == other) return true;
        return other instanceof TransferPhoneNumberHookAction && equalTo((TransferPhoneNumberHookAction) other);
    }

    @JsonAnyGetter
    public Map<String, Object> getAdditionalProperties() {
        return this.additionalProperties;
    }

    private boolean equalTo(TransferPhoneNumberHookAction other) {
        return destination.equals(other.destination);
    }

    @java.lang.Override
    public int hashCode() {
        return Objects.hash(this.destination);
    }

    @java.lang.Override
    public String toString() {
        return ObjectMappers.stringify(this);
    }

    public static Builder builder() {
        return new Builder();
    }

    @JsonIgnoreProperties(ignoreUnknown = true)
    public static final class Builder {
        private Optional<TransferPhoneNumberHookActionDestination> destination = Optional.empty();

        @JsonAnySetter
        private Map<String, Object> additionalProperties = new HashMap<>();

        private Builder() {}

        public Builder from(TransferPhoneNumberHookAction other) {
            destination(other.getDestination());
            return this;
        }

        /**
         * <p>This is the destination details for the transfer - can be a phone number or SIP URI</p>
         */
        @JsonSetter(value = "destination", nulls = Nulls.SKIP)
        public Builder destination(Optional<TransferPhoneNumberHookActionDestination> destination) {
            this.destination = destination;
            return this;
        }

        public Builder destination(TransferPhoneNumberHookActionDestination destination) {
            this.destination = Optional.ofNullable(destination);
            return this;
        }

        public TransferPhoneNumberHookAction build() {
            return new TransferPhoneNumberHookAction(destination, additionalProperties);
        }
    }
}
