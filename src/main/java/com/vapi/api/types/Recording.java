/**
 * This file was auto-generated by Fern from our API Definition.
 */
package com.vapi.api.types;

import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.annotation.Nulls;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.vapi.api.core.ObjectMappers;
import java.util.HashMap;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;

@JsonInclude(JsonInclude.Include.NON_ABSENT)
@JsonDeserialize(builder = Recording.Builder.class)
public final class Recording {
    private final Optional<String> stereoUrl;

    private final Optional<String> videoUrl;

    private final Optional<Double> videoRecordingStartDelaySeconds;

    private final Optional<Mono> mono;

    private final Map<String, Object> additionalProperties;

    private Recording(
            Optional<String> stereoUrl,
            Optional<String> videoUrl,
            Optional<Double> videoRecordingStartDelaySeconds,
            Optional<Mono> mono,
            Map<String, Object> additionalProperties) {
        this.stereoUrl = stereoUrl;
        this.videoUrl = videoUrl;
        this.videoRecordingStartDelaySeconds = videoRecordingStartDelaySeconds;
        this.mono = mono;
        this.additionalProperties = additionalProperties;
    }

    /**
     * @return This is the stereo recording url for the call. To enable, set <code>assistant.artifactPlan.recordingEnabled</code>.
     */
    @JsonProperty("stereoUrl")
    public Optional<String> getStereoUrl() {
        return stereoUrl;
    }

    /**
     * @return This is the video recording url for the call. To enable, set <code>assistant.artifactPlan.videoRecordingEnabled</code>.
     */
    @JsonProperty("videoUrl")
    public Optional<String> getVideoUrl() {
        return videoUrl;
    }

    /**
     * @return This is video recording start delay in ms. To enable, set <code>assistant.artifactPlan.videoRecordingEnabled</code>. This can be used to align the playback of the recording with artifact.messages timestamps.
     */
    @JsonProperty("videoRecordingStartDelaySeconds")
    public Optional<Double> getVideoRecordingStartDelaySeconds() {
        return videoRecordingStartDelaySeconds;
    }

    /**
     * @return This is the mono recording url for the call. To enable, set <code>assistant.artifactPlan.recordingEnabled</code>.
     */
    @JsonProperty("mono")
    public Optional<Mono> getMono() {
        return mono;
    }

    @java.lang.Override
    public boolean equals(Object other) {
        if (this == other) return true;
        return other instanceof Recording && equalTo((Recording) other);
    }

    @JsonAnyGetter
    public Map<String, Object> getAdditionalProperties() {
        return this.additionalProperties;
    }

    private boolean equalTo(Recording other) {
        return stereoUrl.equals(other.stereoUrl)
                && videoUrl.equals(other.videoUrl)
                && videoRecordingStartDelaySeconds.equals(other.videoRecordingStartDelaySeconds)
                && mono.equals(other.mono);
    }

    @java.lang.Override
    public int hashCode() {
        return Objects.hash(this.stereoUrl, this.videoUrl, this.videoRecordingStartDelaySeconds, this.mono);
    }

    @java.lang.Override
    public String toString() {
        return ObjectMappers.stringify(this);
    }

    public static Builder builder() {
        return new Builder();
    }

    @JsonIgnoreProperties(ignoreUnknown = true)
    public static final class Builder {
        private Optional<String> stereoUrl = Optional.empty();

        private Optional<String> videoUrl = Optional.empty();

        private Optional<Double> videoRecordingStartDelaySeconds = Optional.empty();

        private Optional<Mono> mono = Optional.empty();

        @JsonAnySetter
        private Map<String, Object> additionalProperties = new HashMap<>();

        private Builder() {}

        public Builder from(Recording other) {
            stereoUrl(other.getStereoUrl());
            videoUrl(other.getVideoUrl());
            videoRecordingStartDelaySeconds(other.getVideoRecordingStartDelaySeconds());
            mono(other.getMono());
            return this;
        }

        /**
         * <p>This is the stereo recording url for the call. To enable, set <code>assistant.artifactPlan.recordingEnabled</code>.</p>
         */
        @JsonSetter(value = "stereoUrl", nulls = Nulls.SKIP)
        public Builder stereoUrl(Optional<String> stereoUrl) {
            this.stereoUrl = stereoUrl;
            return this;
        }

        public Builder stereoUrl(String stereoUrl) {
            this.stereoUrl = Optional.ofNullable(stereoUrl);
            return this;
        }

        /**
         * <p>This is the video recording url for the call. To enable, set <code>assistant.artifactPlan.videoRecordingEnabled</code>.</p>
         */
        @JsonSetter(value = "videoUrl", nulls = Nulls.SKIP)
        public Builder videoUrl(Optional<String> videoUrl) {
            this.videoUrl = videoUrl;
            return this;
        }

        public Builder videoUrl(String videoUrl) {
            this.videoUrl = Optional.ofNullable(videoUrl);
            return this;
        }

        /**
         * <p>This is video recording start delay in ms. To enable, set <code>assistant.artifactPlan.videoRecordingEnabled</code>. This can be used to align the playback of the recording with artifact.messages timestamps.</p>
         */
        @JsonSetter(value = "videoRecordingStartDelaySeconds", nulls = Nulls.SKIP)
        public Builder videoRecordingStartDelaySeconds(Optional<Double> videoRecordingStartDelaySeconds) {
            this.videoRecordingStartDelaySeconds = videoRecordingStartDelaySeconds;
            return this;
        }

        public Builder videoRecordingStartDelaySeconds(Double videoRecordingStartDelaySeconds) {
            this.videoRecordingStartDelaySeconds = Optional.ofNullable(videoRecordingStartDelaySeconds);
            return this;
        }

        /**
         * <p>This is the mono recording url for the call. To enable, set <code>assistant.artifactPlan.recordingEnabled</code>.</p>
         */
        @JsonSetter(value = "mono", nulls = Nulls.SKIP)
        public Builder mono(Optional<Mono> mono) {
            this.mono = mono;
            return this;
        }

        public Builder mono(Mono mono) {
            this.mono = Optional.ofNullable(mono);
            return this;
        }

        public Recording build() {
            return new Recording(stereoUrl, videoUrl, videoRecordingStartDelaySeconds, mono, additionalProperties);
        }
    }
}
