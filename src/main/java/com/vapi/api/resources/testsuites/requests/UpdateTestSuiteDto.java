/**
 * This file was auto-generated by Fern from our API Definition.
 */
package com.vapi.api.resources.testsuites.requests;

import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.annotation.Nulls;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.vapi.api.core.ObjectMappers;
import com.vapi.api.types.TargetPlan;
import com.vapi.api.types.TesterPlan;
import java.util.HashMap;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;

@JsonInclude(JsonInclude.Include.NON_ABSENT)
@JsonDeserialize(builder = UpdateTestSuiteDto.Builder.class)
public final class UpdateTestSuiteDto {
    private final Optional<String> name;

    private final Optional<String> phoneNumberId;

    private final Optional<TesterPlan> testerPlan;

    private final Optional<TargetPlan> targetPlan;

    private final Map<String, Object> additionalProperties;

    private UpdateTestSuiteDto(
            Optional<String> name,
            Optional<String> phoneNumberId,
            Optional<TesterPlan> testerPlan,
            Optional<TargetPlan> targetPlan,
            Map<String, Object> additionalProperties) {
        this.name = name;
        this.phoneNumberId = phoneNumberId;
        this.testerPlan = testerPlan;
        this.targetPlan = targetPlan;
        this.additionalProperties = additionalProperties;
    }

    /**
     * @return This is the name of the test suite.
     */
    @JsonProperty("name")
    public Optional<String> getName() {
        return name;
    }

    /**
     * @return This is the phone number ID associated with this test suite.
     */
    @JsonProperty("phoneNumberId")
    public Optional<String> getPhoneNumberId() {
        return phoneNumberId;
    }

    /**
     * @return Override the default tester plan by providing custom assistant configuration for the test agent.
     * <p>We recommend only using this if you are confident, as we have already set sensible defaults on the tester plan.</p>
     */
    @JsonProperty("testerPlan")
    public Optional<TesterPlan> getTesterPlan() {
        return testerPlan;
    }

    /**
     * @return These are the configuration for the assistant / phone number that is being tested.
     */
    @JsonProperty("targetPlan")
    public Optional<TargetPlan> getTargetPlan() {
        return targetPlan;
    }

    @java.lang.Override
    public boolean equals(Object other) {
        if (this == other) return true;
        return other instanceof UpdateTestSuiteDto && equalTo((UpdateTestSuiteDto) other);
    }

    @JsonAnyGetter
    public Map<String, Object> getAdditionalProperties() {
        return this.additionalProperties;
    }

    private boolean equalTo(UpdateTestSuiteDto other) {
        return name.equals(other.name)
                && phoneNumberId.equals(other.phoneNumberId)
                && testerPlan.equals(other.testerPlan)
                && targetPlan.equals(other.targetPlan);
    }

    @java.lang.Override
    public int hashCode() {
        return Objects.hash(this.name, this.phoneNumberId, this.testerPlan, this.targetPlan);
    }

    @java.lang.Override
    public String toString() {
        return ObjectMappers.stringify(this);
    }

    public static Builder builder() {
        return new Builder();
    }

    @JsonIgnoreProperties(ignoreUnknown = true)
    public static final class Builder {
        private Optional<String> name = Optional.empty();

        private Optional<String> phoneNumberId = Optional.empty();

        private Optional<TesterPlan> testerPlan = Optional.empty();

        private Optional<TargetPlan> targetPlan = Optional.empty();

        @JsonAnySetter
        private Map<String, Object> additionalProperties = new HashMap<>();

        private Builder() {}

        public Builder from(UpdateTestSuiteDto other) {
            name(other.getName());
            phoneNumberId(other.getPhoneNumberId());
            testerPlan(other.getTesterPlan());
            targetPlan(other.getTargetPlan());
            return this;
        }

        /**
         * <p>This is the name of the test suite.</p>
         */
        @JsonSetter(value = "name", nulls = Nulls.SKIP)
        public Builder name(Optional<String> name) {
            this.name = name;
            return this;
        }

        public Builder name(String name) {
            this.name = Optional.ofNullable(name);
            return this;
        }

        /**
         * <p>This is the phone number ID associated with this test suite.</p>
         */
        @JsonSetter(value = "phoneNumberId", nulls = Nulls.SKIP)
        public Builder phoneNumberId(Optional<String> phoneNumberId) {
            this.phoneNumberId = phoneNumberId;
            return this;
        }

        public Builder phoneNumberId(String phoneNumberId) {
            this.phoneNumberId = Optional.ofNullable(phoneNumberId);
            return this;
        }

        /**
         * <p>Override the default tester plan by providing custom assistant configuration for the test agent.</p>
         * <p>We recommend only using this if you are confident, as we have already set sensible defaults on the tester plan.</p>
         */
        @JsonSetter(value = "testerPlan", nulls = Nulls.SKIP)
        public Builder testerPlan(Optional<TesterPlan> testerPlan) {
            this.testerPlan = testerPlan;
            return this;
        }

        public Builder testerPlan(TesterPlan testerPlan) {
            this.testerPlan = Optional.ofNullable(testerPlan);
            return this;
        }

        /**
         * <p>These are the configuration for the assistant / phone number that is being tested.</p>
         */
        @JsonSetter(value = "targetPlan", nulls = Nulls.SKIP)
        public Builder targetPlan(Optional<TargetPlan> targetPlan) {
            this.targetPlan = targetPlan;
            return this;
        }

        public Builder targetPlan(TargetPlan targetPlan) {
            this.targetPlan = Optional.ofNullable(targetPlan);
            return this;
        }

        public UpdateTestSuiteDto build() {
            return new UpdateTestSuiteDto(name, phoneNumberId, testerPlan, targetPlan, additionalProperties);
        }
    }
}
