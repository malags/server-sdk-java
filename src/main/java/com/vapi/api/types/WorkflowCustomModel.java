/**
 * This file was auto-generated by Fern from our API Definition.
 */
package com.vapi.api.types;

import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.annotation.Nulls;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.vapi.api.core.ObjectMappers;
import java.util.HashMap;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import org.jetbrains.annotations.NotNull;

@JsonInclude(JsonInclude.Include.NON_ABSENT)
@JsonDeserialize(builder = WorkflowCustomModel.Builder.class)
public final class WorkflowCustomModel {
    private final Optional<WorkflowCustomModelMetadataSendMode> metadataSendMode;

    private final String url;

    private final Optional<Double> timeoutSeconds;

    private final String model;

    private final Optional<Double> temperature;

    private final Optional<Double> maxTokens;

    private final Map<String, Object> additionalProperties;

    private WorkflowCustomModel(
            Optional<WorkflowCustomModelMetadataSendMode> metadataSendMode,
            String url,
            Optional<Double> timeoutSeconds,
            String model,
            Optional<Double> temperature,
            Optional<Double> maxTokens,
            Map<String, Object> additionalProperties) {
        this.metadataSendMode = metadataSendMode;
        this.url = url;
        this.timeoutSeconds = timeoutSeconds;
        this.model = model;
        this.temperature = temperature;
        this.maxTokens = maxTokens;
        this.additionalProperties = additionalProperties;
    }

    /**
     * @return This determines whether metadata is sent in requests to the custom provider.
     * <ul>
     * <li><code>off</code> will not send any metadata. payload will look like <code>{ messages }</code></li>
     * <li><code>variable</code> will send <code>assistant.metadata</code> as a variable on the payload. payload will look like <code>{ messages, metadata }</code></li>
     * <li><code>destructured</code> will send <code>assistant.metadata</code> fields directly on the payload. payload will look like <code>{ messages, ...metadata }</code></li>
     * </ul>
     * <p>Further, <code>variable</code> and <code>destructured</code> will send <code>call</code>, <code>phoneNumber</code>, and <code>customer</code> objects in the payload.</p>
     * <p>Default is <code>variable</code>.</p>
     */
    @JsonProperty("metadataSendMode")
    public Optional<WorkflowCustomModelMetadataSendMode> getMetadataSendMode() {
        return metadataSendMode;
    }

    /**
     * @return These is the URL we'll use for the OpenAI client's <code>baseURL</code>. Ex. https://openrouter.ai/api/v1
     */
    @JsonProperty("url")
    public String getUrl() {
        return url;
    }

    /**
     * @return This sets the timeout for the connection to the custom provider without needing to stream any tokens back. Default is 20 seconds.
     */
    @JsonProperty("timeoutSeconds")
    public Optional<Double> getTimeoutSeconds() {
        return timeoutSeconds;
    }

    /**
     * @return This is the name of the model. Ex. cognitivecomputations/dolphin-mixtral-8x7b
     */
    @JsonProperty("model")
    public String getModel() {
        return model;
    }

    /**
     * @return This is the temperature of the model.
     */
    @JsonProperty("temperature")
    public Optional<Double> getTemperature() {
        return temperature;
    }

    /**
     * @return This is the max tokens of the model.
     */
    @JsonProperty("maxTokens")
    public Optional<Double> getMaxTokens() {
        return maxTokens;
    }

    @java.lang.Override
    public boolean equals(Object other) {
        if (this == other) return true;
        return other instanceof WorkflowCustomModel && equalTo((WorkflowCustomModel) other);
    }

    @JsonAnyGetter
    public Map<String, Object> getAdditionalProperties() {
        return this.additionalProperties;
    }

    private boolean equalTo(WorkflowCustomModel other) {
        return metadataSendMode.equals(other.metadataSendMode)
                && url.equals(other.url)
                && timeoutSeconds.equals(other.timeoutSeconds)
                && model.equals(other.model)
                && temperature.equals(other.temperature)
                && maxTokens.equals(other.maxTokens);
    }

    @java.lang.Override
    public int hashCode() {
        return Objects.hash(
                this.metadataSendMode, this.url, this.timeoutSeconds, this.model, this.temperature, this.maxTokens);
    }

    @java.lang.Override
    public String toString() {
        return ObjectMappers.stringify(this);
    }

    public static UrlStage builder() {
        return new Builder();
    }

    public interface UrlStage {
        /**
         * <p>These is the URL we'll use for the OpenAI client's <code>baseURL</code>. Ex. https://openrouter.ai/api/v1</p>
         */
        ModelStage url(@NotNull String url);

        Builder from(WorkflowCustomModel other);
    }

    public interface ModelStage {
        /**
         * <p>This is the name of the model. Ex. cognitivecomputations/dolphin-mixtral-8x7b</p>
         */
        _FinalStage model(@NotNull String model);
    }

    public interface _FinalStage {
        WorkflowCustomModel build();

        /**
         * <p>This determines whether metadata is sent in requests to the custom provider.</p>
         * <ul>
         * <li><code>off</code> will not send any metadata. payload will look like <code>{ messages }</code></li>
         * <li><code>variable</code> will send <code>assistant.metadata</code> as a variable on the payload. payload will look like <code>{ messages, metadata }</code></li>
         * <li><code>destructured</code> will send <code>assistant.metadata</code> fields directly on the payload. payload will look like <code>{ messages, ...metadata }</code></li>
         * </ul>
         * <p>Further, <code>variable</code> and <code>destructured</code> will send <code>call</code>, <code>phoneNumber</code>, and <code>customer</code> objects in the payload.</p>
         * <p>Default is <code>variable</code>.</p>
         */
        _FinalStage metadataSendMode(Optional<WorkflowCustomModelMetadataSendMode> metadataSendMode);

        _FinalStage metadataSendMode(WorkflowCustomModelMetadataSendMode metadataSendMode);

        /**
         * <p>This sets the timeout for the connection to the custom provider without needing to stream any tokens back. Default is 20 seconds.</p>
         */
        _FinalStage timeoutSeconds(Optional<Double> timeoutSeconds);

        _FinalStage timeoutSeconds(Double timeoutSeconds);

        /**
         * <p>This is the temperature of the model.</p>
         */
        _FinalStage temperature(Optional<Double> temperature);

        _FinalStage temperature(Double temperature);

        /**
         * <p>This is the max tokens of the model.</p>
         */
        _FinalStage maxTokens(Optional<Double> maxTokens);

        _FinalStage maxTokens(Double maxTokens);
    }

    @JsonIgnoreProperties(ignoreUnknown = true)
    public static final class Builder implements UrlStage, ModelStage, _FinalStage {
        private String url;

        private String model;

        private Optional<Double> maxTokens = Optional.empty();

        private Optional<Double> temperature = Optional.empty();

        private Optional<Double> timeoutSeconds = Optional.empty();

        private Optional<WorkflowCustomModelMetadataSendMode> metadataSendMode = Optional.empty();

        @JsonAnySetter
        private Map<String, Object> additionalProperties = new HashMap<>();

        private Builder() {}

        @java.lang.Override
        public Builder from(WorkflowCustomModel other) {
            metadataSendMode(other.getMetadataSendMode());
            url(other.getUrl());
            timeoutSeconds(other.getTimeoutSeconds());
            model(other.getModel());
            temperature(other.getTemperature());
            maxTokens(other.getMaxTokens());
            return this;
        }

        /**
         * <p>These is the URL we'll use for the OpenAI client's <code>baseURL</code>. Ex. https://openrouter.ai/api/v1</p>
         * <p>These is the URL we'll use for the OpenAI client's <code>baseURL</code>. Ex. https://openrouter.ai/api/v1</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        @JsonSetter("url")
        public ModelStage url(@NotNull String url) {
            this.url = Objects.requireNonNull(url, "url must not be null");
            return this;
        }

        /**
         * <p>This is the name of the model. Ex. cognitivecomputations/dolphin-mixtral-8x7b</p>
         * <p>This is the name of the model. Ex. cognitivecomputations/dolphin-mixtral-8x7b</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        @JsonSetter("model")
        public _FinalStage model(@NotNull String model) {
            this.model = Objects.requireNonNull(model, "model must not be null");
            return this;
        }

        /**
         * <p>This is the max tokens of the model.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        public _FinalStage maxTokens(Double maxTokens) {
            this.maxTokens = Optional.ofNullable(maxTokens);
            return this;
        }

        /**
         * <p>This is the max tokens of the model.</p>
         */
        @java.lang.Override
        @JsonSetter(value = "maxTokens", nulls = Nulls.SKIP)
        public _FinalStage maxTokens(Optional<Double> maxTokens) {
            this.maxTokens = maxTokens;
            return this;
        }

        /**
         * <p>This is the temperature of the model.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        public _FinalStage temperature(Double temperature) {
            this.temperature = Optional.ofNullable(temperature);
            return this;
        }

        /**
         * <p>This is the temperature of the model.</p>
         */
        @java.lang.Override
        @JsonSetter(value = "temperature", nulls = Nulls.SKIP)
        public _FinalStage temperature(Optional<Double> temperature) {
            this.temperature = temperature;
            return this;
        }

        /**
         * <p>This sets the timeout for the connection to the custom provider without needing to stream any tokens back. Default is 20 seconds.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        public _FinalStage timeoutSeconds(Double timeoutSeconds) {
            this.timeoutSeconds = Optional.ofNullable(timeoutSeconds);
            return this;
        }

        /**
         * <p>This sets the timeout for the connection to the custom provider without needing to stream any tokens back. Default is 20 seconds.</p>
         */
        @java.lang.Override
        @JsonSetter(value = "timeoutSeconds", nulls = Nulls.SKIP)
        public _FinalStage timeoutSeconds(Optional<Double> timeoutSeconds) {
            this.timeoutSeconds = timeoutSeconds;
            return this;
        }

        /**
         * <p>This determines whether metadata is sent in requests to the custom provider.</p>
         * <ul>
         * <li><code>off</code> will not send any metadata. payload will look like <code>{ messages }</code></li>
         * <li><code>variable</code> will send <code>assistant.metadata</code> as a variable on the payload. payload will look like <code>{ messages, metadata }</code></li>
         * <li><code>destructured</code> will send <code>assistant.metadata</code> fields directly on the payload. payload will look like <code>{ messages, ...metadata }</code></li>
         * </ul>
         * <p>Further, <code>variable</code> and <code>destructured</code> will send <code>call</code>, <code>phoneNumber</code>, and <code>customer</code> objects in the payload.</p>
         * <p>Default is <code>variable</code>.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        public _FinalStage metadataSendMode(WorkflowCustomModelMetadataSendMode metadataSendMode) {
            this.metadataSendMode = Optional.ofNullable(metadataSendMode);
            return this;
        }

        /**
         * <p>This determines whether metadata is sent in requests to the custom provider.</p>
         * <ul>
         * <li><code>off</code> will not send any metadata. payload will look like <code>{ messages }</code></li>
         * <li><code>variable</code> will send <code>assistant.metadata</code> as a variable on the payload. payload will look like <code>{ messages, metadata }</code></li>
         * <li><code>destructured</code> will send <code>assistant.metadata</code> fields directly on the payload. payload will look like <code>{ messages, ...metadata }</code></li>
         * </ul>
         * <p>Further, <code>variable</code> and <code>destructured</code> will send <code>call</code>, <code>phoneNumber</code>, and <code>customer</code> objects in the payload.</p>
         * <p>Default is <code>variable</code>.</p>
         */
        @java.lang.Override
        @JsonSetter(value = "metadataSendMode", nulls = Nulls.SKIP)
        public _FinalStage metadataSendMode(Optional<WorkflowCustomModelMetadataSendMode> metadataSendMode) {
            this.metadataSendMode = metadataSendMode;
            return this;
        }

        @java.lang.Override
        public WorkflowCustomModel build() {
            return new WorkflowCustomModel(
                    metadataSendMode, url, timeoutSeconds, model, temperature, maxTokens, additionalProperties);
        }
    }
}
