/**
 * This file was auto-generated by Fern from our API Definition.
 */
package com.vapi.api.types;

import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.annotation.Nulls;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.vapi.api.core.ObjectMappers;
import java.util.HashMap;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import org.jetbrains.annotations.NotNull;

@JsonInclude(JsonInclude.Include.NON_ABSENT)
@JsonDeserialize(builder = AzureBlobStorageBucketPlan.Builder.class)
public final class AzureBlobStorageBucketPlan {
    private final String connectionString;

    private final String containerName;

    private final Optional<String> path;

    private final Map<String, Object> additionalProperties;

    private AzureBlobStorageBucketPlan(
            String connectionString,
            String containerName,
            Optional<String> path,
            Map<String, Object> additionalProperties) {
        this.connectionString = connectionString;
        this.containerName = containerName;
        this.path = path;
        this.additionalProperties = additionalProperties;
    }

    /**
     * @return This is the blob storage connection string for the Azure resource.
     */
    @JsonProperty("connectionString")
    public String getConnectionString() {
        return connectionString;
    }

    /**
     * @return This is the container name for the Azure blob storage.
     */
    @JsonProperty("containerName")
    public String getContainerName() {
        return containerName;
    }

    /**
     * @return This is the path where call artifacts will be stored.
     * <p>Usage:</p>
     * <ul>
     * <li>To store call artifacts in a specific folder, set this to the full path. Eg. &quot;/folder-name1/folder-name2&quot;.</li>
     * <li>To store call artifacts in the root of the bucket, leave this blank.</li>
     * </ul>
     * <p>@default &quot;/&quot;</p>
     */
    @JsonProperty("path")
    public Optional<String> getPath() {
        return path;
    }

    @java.lang.Override
    public boolean equals(Object other) {
        if (this == other) return true;
        return other instanceof AzureBlobStorageBucketPlan && equalTo((AzureBlobStorageBucketPlan) other);
    }

    @JsonAnyGetter
    public Map<String, Object> getAdditionalProperties() {
        return this.additionalProperties;
    }

    private boolean equalTo(AzureBlobStorageBucketPlan other) {
        return connectionString.equals(other.connectionString)
                && containerName.equals(other.containerName)
                && path.equals(other.path);
    }

    @java.lang.Override
    public int hashCode() {
        return Objects.hash(this.connectionString, this.containerName, this.path);
    }

    @java.lang.Override
    public String toString() {
        return ObjectMappers.stringify(this);
    }

    public static ConnectionStringStage builder() {
        return new Builder();
    }

    public interface ConnectionStringStage {
        /**
         * <p>This is the blob storage connection string for the Azure resource.</p>
         */
        ContainerNameStage connectionString(@NotNull String connectionString);

        Builder from(AzureBlobStorageBucketPlan other);
    }

    public interface ContainerNameStage {
        /**
         * <p>This is the container name for the Azure blob storage.</p>
         */
        _FinalStage containerName(@NotNull String containerName);
    }

    public interface _FinalStage {
        AzureBlobStorageBucketPlan build();

        /**
         * <p>This is the path where call artifacts will be stored.</p>
         * <p>Usage:</p>
         * <ul>
         * <li>To store call artifacts in a specific folder, set this to the full path. Eg. &quot;/folder-name1/folder-name2&quot;.</li>
         * <li>To store call artifacts in the root of the bucket, leave this blank.</li>
         * </ul>
         * <p>@default &quot;/&quot;</p>
         */
        _FinalStage path(Optional<String> path);

        _FinalStage path(String path);
    }

    @JsonIgnoreProperties(ignoreUnknown = true)
    public static final class Builder implements ConnectionStringStage, ContainerNameStage, _FinalStage {
        private String connectionString;

        private String containerName;

        private Optional<String> path = Optional.empty();

        @JsonAnySetter
        private Map<String, Object> additionalProperties = new HashMap<>();

        private Builder() {}

        @java.lang.Override
        public Builder from(AzureBlobStorageBucketPlan other) {
            connectionString(other.getConnectionString());
            containerName(other.getContainerName());
            path(other.getPath());
            return this;
        }

        /**
         * <p>This is the blob storage connection string for the Azure resource.</p>
         * <p>This is the blob storage connection string for the Azure resource.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        @JsonSetter("connectionString")
        public ContainerNameStage connectionString(@NotNull String connectionString) {
            this.connectionString = Objects.requireNonNull(connectionString, "connectionString must not be null");
            return this;
        }

        /**
         * <p>This is the container name for the Azure blob storage.</p>
         * <p>This is the container name for the Azure blob storage.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        @JsonSetter("containerName")
        public _FinalStage containerName(@NotNull String containerName) {
            this.containerName = Objects.requireNonNull(containerName, "containerName must not be null");
            return this;
        }

        /**
         * <p>This is the path where call artifacts will be stored.</p>
         * <p>Usage:</p>
         * <ul>
         * <li>To store call artifacts in a specific folder, set this to the full path. Eg. &quot;/folder-name1/folder-name2&quot;.</li>
         * <li>To store call artifacts in the root of the bucket, leave this blank.</li>
         * </ul>
         * <p>@default &quot;/&quot;</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        public _FinalStage path(String path) {
            this.path = Optional.ofNullable(path);
            return this;
        }

        /**
         * <p>This is the path where call artifacts will be stored.</p>
         * <p>Usage:</p>
         * <ul>
         * <li>To store call artifacts in a specific folder, set this to the full path. Eg. &quot;/folder-name1/folder-name2&quot;.</li>
         * <li>To store call artifacts in the root of the bucket, leave this blank.</li>
         * </ul>
         * <p>@default &quot;/&quot;</p>
         */
        @java.lang.Override
        @JsonSetter(value = "path", nulls = Nulls.SKIP)
        public _FinalStage path(Optional<String> path) {
            this.path = path;
            return this;
        }

        @java.lang.Override
        public AzureBlobStorageBucketPlan build() {
            return new AzureBlobStorageBucketPlan(connectionString, containerName, path, additionalProperties);
        }
    }
}
