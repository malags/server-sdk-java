/**
 * This file was auto-generated by Fern from our API Definition.
 */
package com.vapi.api.types;

import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.annotation.Nulls;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.vapi.api.core.ObjectMappers;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import org.jetbrains.annotations.NotNull;

@JsonInclude(JsonInclude.Include.NON_ABSENT)
@JsonDeserialize(builder = CreateWorkflowDto.Builder.class)
public final class CreateWorkflowDto {
    private final List<CreateWorkflowDtoNodesItem> nodes;

    private final Optional<CreateWorkflowDtoTranscriber> transcriber;

    private final Optional<CreateWorkflowDtoVoice> voice;

    private final Optional<LangfuseObservabilityPlan> observabilityPlan;

    private final Optional<CreateWorkflowDtoBackgroundSound> backgroundSound;

    private final Optional<List<CreateWorkflowDtoCredentialsItem>> credentials;

    private final String name;

    private final List<Edge> edges;

    private final Optional<String> globalPrompt;

    private final Optional<Server> server;

    private final Optional<CompliancePlan> compliancePlan;

    private final Optional<AnalysisPlan> analysisPlan;

    private final Optional<ArtifactPlan> artifactPlan;

    private final Optional<StartSpeakingPlan> startSpeakingPlan;

    private final Optional<StopSpeakingPlan> stopSpeakingPlan;

    private final Optional<MonitorPlan> monitorPlan;

    private final Optional<BackgroundSpeechDenoisingPlan> backgroundSpeechDenoisingPlan;

    private final Optional<List<String>> credentialIds;

    private final Map<String, Object> additionalProperties;

    private CreateWorkflowDto(
            List<CreateWorkflowDtoNodesItem> nodes,
            Optional<CreateWorkflowDtoTranscriber> transcriber,
            Optional<CreateWorkflowDtoVoice> voice,
            Optional<LangfuseObservabilityPlan> observabilityPlan,
            Optional<CreateWorkflowDtoBackgroundSound> backgroundSound,
            Optional<List<CreateWorkflowDtoCredentialsItem>> credentials,
            String name,
            List<Edge> edges,
            Optional<String> globalPrompt,
            Optional<Server> server,
            Optional<CompliancePlan> compliancePlan,
            Optional<AnalysisPlan> analysisPlan,
            Optional<ArtifactPlan> artifactPlan,
            Optional<StartSpeakingPlan> startSpeakingPlan,
            Optional<StopSpeakingPlan> stopSpeakingPlan,
            Optional<MonitorPlan> monitorPlan,
            Optional<BackgroundSpeechDenoisingPlan> backgroundSpeechDenoisingPlan,
            Optional<List<String>> credentialIds,
            Map<String, Object> additionalProperties) {
        this.nodes = nodes;
        this.transcriber = transcriber;
        this.voice = voice;
        this.observabilityPlan = observabilityPlan;
        this.backgroundSound = backgroundSound;
        this.credentials = credentials;
        this.name = name;
        this.edges = edges;
        this.globalPrompt = globalPrompt;
        this.server = server;
        this.compliancePlan = compliancePlan;
        this.analysisPlan = analysisPlan;
        this.artifactPlan = artifactPlan;
        this.startSpeakingPlan = startSpeakingPlan;
        this.stopSpeakingPlan = stopSpeakingPlan;
        this.monitorPlan = monitorPlan;
        this.backgroundSpeechDenoisingPlan = backgroundSpeechDenoisingPlan;
        this.credentialIds = credentialIds;
        this.additionalProperties = additionalProperties;
    }

    @JsonProperty("nodes")
    public List<CreateWorkflowDtoNodesItem> getNodes() {
        return nodes;
    }

    /**
     * @return This is the transcriber for the workflow.
     * <p>This can be overridden at node level using <code>nodes[n].transcriber</code>.</p>
     */
    @JsonProperty("transcriber")
    public Optional<CreateWorkflowDtoTranscriber> getTranscriber() {
        return transcriber;
    }

    /**
     * @return This is the voice for the workflow.
     * <p>This can be overridden at node level using <code>nodes[n].voice</code>.</p>
     */
    @JsonProperty("voice")
    public Optional<CreateWorkflowDtoVoice> getVoice() {
        return voice;
    }

    /**
     * @return This is the plan for observability of workflow's calls.
     * <p>Currently, only Langfuse is supported.</p>
     */
    @JsonProperty("observabilityPlan")
    public Optional<LangfuseObservabilityPlan> getObservabilityPlan() {
        return observabilityPlan;
    }

    /**
     * @return This is the background sound in the call. Default for phone calls is 'office' and default for web calls is 'off'.
     * You can also provide a custom sound by providing a URL to an audio file.
     */
    @JsonProperty("backgroundSound")
    public Optional<CreateWorkflowDtoBackgroundSound> getBackgroundSound() {
        return backgroundSound;
    }

    /**
     * @return These are dynamic credentials that will be used for the workflow calls. By default, all the credentials are available for use in the call but you can supplement an additional credentials using this. Dynamic credentials override existing credentials.
     */
    @JsonProperty("credentials")
    public Optional<List<CreateWorkflowDtoCredentialsItem>> getCredentials() {
        return credentials;
    }

    @JsonProperty("name")
    public String getName() {
        return name;
    }

    @JsonProperty("edges")
    public List<Edge> getEdges() {
        return edges;
    }

    @JsonProperty("globalPrompt")
    public Optional<String> getGlobalPrompt() {
        return globalPrompt;
    }

    /**
     * @return This is where Vapi will send webhooks. You can find all webhooks available along with their shape in ServerMessage schema.
     * <p>The order of precedence is:</p>
     * <ol>
     * <li>tool.server</li>
     * <li>workflow.server / assistant.server</li>
     * <li>phoneNumber.server</li>
     * <li>org.server</li>
     * </ol>
     */
    @JsonProperty("server")
    public Optional<Server> getServer() {
        return server;
    }

    /**
     * @return This is the compliance plan for the workflow. It allows you to configure HIPAA and other compliance settings.
     */
    @JsonProperty("compliancePlan")
    public Optional<CompliancePlan> getCompliancePlan() {
        return compliancePlan;
    }

    /**
     * @return This is the plan for analysis of workflow's calls. Stored in <code>call.analysis</code>.
     */
    @JsonProperty("analysisPlan")
    public Optional<AnalysisPlan> getAnalysisPlan() {
        return analysisPlan;
    }

    /**
     * @return This is the plan for artifacts generated during workflow's calls. Stored in <code>call.artifact</code>.
     */
    @JsonProperty("artifactPlan")
    public Optional<ArtifactPlan> getArtifactPlan() {
        return artifactPlan;
    }

    /**
     * @return This is the plan for when the workflow nodes should start talking.
     * <p>You should configure this if you're running into these issues:</p>
     * <ul>
     * <li>The assistant is too slow to start talking after the customer is done speaking.</li>
     * <li>The assistant is too fast to start talking after the customer is done speaking.</li>
     * <li>The assistant is so fast that it's actually interrupting the customer.</li>
     * </ul>
     */
    @JsonProperty("startSpeakingPlan")
    public Optional<StartSpeakingPlan> getStartSpeakingPlan() {
        return startSpeakingPlan;
    }

    /**
     * @return This is the plan for when workflow nodes should stop talking on customer interruption.
     * <p>You should configure this if you're running into these issues:</p>
     * <ul>
     * <li>The assistant is too slow to recognize customer's interruption.</li>
     * <li>The assistant is too fast to recognize customer's interruption.</li>
     * <li>The assistant is getting interrupted by phrases that are just acknowledgments.</li>
     * <li>The assistant is getting interrupted by background noises.</li>
     * <li>The assistant is not properly stopping -- it starts talking right after getting interrupted.</li>
     * </ul>
     */
    @JsonProperty("stopSpeakingPlan")
    public Optional<StopSpeakingPlan> getStopSpeakingPlan() {
        return stopSpeakingPlan;
    }

    /**
     * @return This is the plan for real-time monitoring of the workflow's calls.
     * <p>Usage:</p>
     * <ul>
     * <li>To enable live listening of the workflow's calls, set <code>monitorPlan.listenEnabled</code> to <code>true</code>.</li>
     * <li>To enable live control of the workflow's calls, set <code>monitorPlan.controlEnabled</code> to <code>true</code>.</li>
     * </ul>
     */
    @JsonProperty("monitorPlan")
    public Optional<MonitorPlan> getMonitorPlan() {
        return monitorPlan;
    }

    /**
     * @return This enables filtering of noise and background speech while the user is talking.
     * <p>Features:</p>
     * <ul>
     * <li>Smart denoising using Krisp</li>
     * <li>Fourier denoising</li>
     * </ul>
     * <p>Both can be used together. Order of precedence:</p>
     * <ul>
     * <li>Smart denoising</li>
     * <li>Fourier denoising</li>
     * </ul>
     */
    @JsonProperty("backgroundSpeechDenoisingPlan")
    public Optional<BackgroundSpeechDenoisingPlan> getBackgroundSpeechDenoisingPlan() {
        return backgroundSpeechDenoisingPlan;
    }

    /**
     * @return These are the credentials that will be used for the workflow calls. By default, all the credentials are available for use in the call but you can provide a subset using this.
     */
    @JsonProperty("credentialIds")
    public Optional<List<String>> getCredentialIds() {
        return credentialIds;
    }

    @java.lang.Override
    public boolean equals(Object other) {
        if (this == other) return true;
        return other instanceof CreateWorkflowDto && equalTo((CreateWorkflowDto) other);
    }

    @JsonAnyGetter
    public Map<String, Object> getAdditionalProperties() {
        return this.additionalProperties;
    }

    private boolean equalTo(CreateWorkflowDto other) {
        return nodes.equals(other.nodes)
                && transcriber.equals(other.transcriber)
                && voice.equals(other.voice)
                && observabilityPlan.equals(other.observabilityPlan)
                && backgroundSound.equals(other.backgroundSound)
                && credentials.equals(other.credentials)
                && name.equals(other.name)
                && edges.equals(other.edges)
                && globalPrompt.equals(other.globalPrompt)
                && server.equals(other.server)
                && compliancePlan.equals(other.compliancePlan)
                && analysisPlan.equals(other.analysisPlan)
                && artifactPlan.equals(other.artifactPlan)
                && startSpeakingPlan.equals(other.startSpeakingPlan)
                && stopSpeakingPlan.equals(other.stopSpeakingPlan)
                && monitorPlan.equals(other.monitorPlan)
                && backgroundSpeechDenoisingPlan.equals(other.backgroundSpeechDenoisingPlan)
                && credentialIds.equals(other.credentialIds);
    }

    @java.lang.Override
    public int hashCode() {
        return Objects.hash(
                this.nodes,
                this.transcriber,
                this.voice,
                this.observabilityPlan,
                this.backgroundSound,
                this.credentials,
                this.name,
                this.edges,
                this.globalPrompt,
                this.server,
                this.compliancePlan,
                this.analysisPlan,
                this.artifactPlan,
                this.startSpeakingPlan,
                this.stopSpeakingPlan,
                this.monitorPlan,
                this.backgroundSpeechDenoisingPlan,
                this.credentialIds);
    }

    @java.lang.Override
    public String toString() {
        return ObjectMappers.stringify(this);
    }

    public static NameStage builder() {
        return new Builder();
    }

    public interface NameStage {
        _FinalStage name(@NotNull String name);

        Builder from(CreateWorkflowDto other);
    }

    public interface _FinalStage {
        CreateWorkflowDto build();

        _FinalStage nodes(List<CreateWorkflowDtoNodesItem> nodes);

        _FinalStage addNodes(CreateWorkflowDtoNodesItem nodes);

        _FinalStage addAllNodes(List<CreateWorkflowDtoNodesItem> nodes);

        /**
         * <p>This is the transcriber for the workflow.</p>
         * <p>This can be overridden at node level using <code>nodes[n].transcriber</code>.</p>
         */
        _FinalStage transcriber(Optional<CreateWorkflowDtoTranscriber> transcriber);

        _FinalStage transcriber(CreateWorkflowDtoTranscriber transcriber);

        /**
         * <p>This is the voice for the workflow.</p>
         * <p>This can be overridden at node level using <code>nodes[n].voice</code>.</p>
         */
        _FinalStage voice(Optional<CreateWorkflowDtoVoice> voice);

        _FinalStage voice(CreateWorkflowDtoVoice voice);

        /**
         * <p>This is the plan for observability of workflow's calls.</p>
         * <p>Currently, only Langfuse is supported.</p>
         */
        _FinalStage observabilityPlan(Optional<LangfuseObservabilityPlan> observabilityPlan);

        _FinalStage observabilityPlan(LangfuseObservabilityPlan observabilityPlan);

        /**
         * <p>This is the background sound in the call. Default for phone calls is 'office' and default for web calls is 'off'.
         * You can also provide a custom sound by providing a URL to an audio file.</p>
         */
        _FinalStage backgroundSound(Optional<CreateWorkflowDtoBackgroundSound> backgroundSound);

        _FinalStage backgroundSound(CreateWorkflowDtoBackgroundSound backgroundSound);

        /**
         * <p>These are dynamic credentials that will be used for the workflow calls. By default, all the credentials are available for use in the call but you can supplement an additional credentials using this. Dynamic credentials override existing credentials.</p>
         */
        _FinalStage credentials(Optional<List<CreateWorkflowDtoCredentialsItem>> credentials);

        _FinalStage credentials(List<CreateWorkflowDtoCredentialsItem> credentials);

        _FinalStage edges(List<Edge> edges);

        _FinalStage addEdges(Edge edges);

        _FinalStage addAllEdges(List<Edge> edges);

        _FinalStage globalPrompt(Optional<String> globalPrompt);

        _FinalStage globalPrompt(String globalPrompt);

        /**
         * <p>This is where Vapi will send webhooks. You can find all webhooks available along with their shape in ServerMessage schema.</p>
         * <p>The order of precedence is:</p>
         * <ol>
         * <li>tool.server</li>
         * <li>workflow.server / assistant.server</li>
         * <li>phoneNumber.server</li>
         * <li>org.server</li>
         * </ol>
         */
        _FinalStage server(Optional<Server> server);

        _FinalStage server(Server server);

        /**
         * <p>This is the compliance plan for the workflow. It allows you to configure HIPAA and other compliance settings.</p>
         */
        _FinalStage compliancePlan(Optional<CompliancePlan> compliancePlan);

        _FinalStage compliancePlan(CompliancePlan compliancePlan);

        /**
         * <p>This is the plan for analysis of workflow's calls. Stored in <code>call.analysis</code>.</p>
         */
        _FinalStage analysisPlan(Optional<AnalysisPlan> analysisPlan);

        _FinalStage analysisPlan(AnalysisPlan analysisPlan);

        /**
         * <p>This is the plan for artifacts generated during workflow's calls. Stored in <code>call.artifact</code>.</p>
         */
        _FinalStage artifactPlan(Optional<ArtifactPlan> artifactPlan);

        _FinalStage artifactPlan(ArtifactPlan artifactPlan);

        /**
         * <p>This is the plan for when the workflow nodes should start talking.</p>
         * <p>You should configure this if you're running into these issues:</p>
         * <ul>
         * <li>The assistant is too slow to start talking after the customer is done speaking.</li>
         * <li>The assistant is too fast to start talking after the customer is done speaking.</li>
         * <li>The assistant is so fast that it's actually interrupting the customer.</li>
         * </ul>
         */
        _FinalStage startSpeakingPlan(Optional<StartSpeakingPlan> startSpeakingPlan);

        _FinalStage startSpeakingPlan(StartSpeakingPlan startSpeakingPlan);

        /**
         * <p>This is the plan for when workflow nodes should stop talking on customer interruption.</p>
         * <p>You should configure this if you're running into these issues:</p>
         * <ul>
         * <li>The assistant is too slow to recognize customer's interruption.</li>
         * <li>The assistant is too fast to recognize customer's interruption.</li>
         * <li>The assistant is getting interrupted by phrases that are just acknowledgments.</li>
         * <li>The assistant is getting interrupted by background noises.</li>
         * <li>The assistant is not properly stopping -- it starts talking right after getting interrupted.</li>
         * </ul>
         */
        _FinalStage stopSpeakingPlan(Optional<StopSpeakingPlan> stopSpeakingPlan);

        _FinalStage stopSpeakingPlan(StopSpeakingPlan stopSpeakingPlan);

        /**
         * <p>This is the plan for real-time monitoring of the workflow's calls.</p>
         * <p>Usage:</p>
         * <ul>
         * <li>To enable live listening of the workflow's calls, set <code>monitorPlan.listenEnabled</code> to <code>true</code>.</li>
         * <li>To enable live control of the workflow's calls, set <code>monitorPlan.controlEnabled</code> to <code>true</code>.</li>
         * </ul>
         */
        _FinalStage monitorPlan(Optional<MonitorPlan> monitorPlan);

        _FinalStage monitorPlan(MonitorPlan monitorPlan);

        /**
         * <p>This enables filtering of noise and background speech while the user is talking.</p>
         * <p>Features:</p>
         * <ul>
         * <li>Smart denoising using Krisp</li>
         * <li>Fourier denoising</li>
         * </ul>
         * <p>Both can be used together. Order of precedence:</p>
         * <ul>
         * <li>Smart denoising</li>
         * <li>Fourier denoising</li>
         * </ul>
         */
        _FinalStage backgroundSpeechDenoisingPlan(
                Optional<BackgroundSpeechDenoisingPlan> backgroundSpeechDenoisingPlan);

        _FinalStage backgroundSpeechDenoisingPlan(BackgroundSpeechDenoisingPlan backgroundSpeechDenoisingPlan);

        /**
         * <p>These are the credentials that will be used for the workflow calls. By default, all the credentials are available for use in the call but you can provide a subset using this.</p>
         */
        _FinalStage credentialIds(Optional<List<String>> credentialIds);

        _FinalStage credentialIds(List<String> credentialIds);
    }

    @JsonIgnoreProperties(ignoreUnknown = true)
    public static final class Builder implements NameStage, _FinalStage {
        private String name;

        private Optional<List<String>> credentialIds = Optional.empty();

        private Optional<BackgroundSpeechDenoisingPlan> backgroundSpeechDenoisingPlan = Optional.empty();

        private Optional<MonitorPlan> monitorPlan = Optional.empty();

        private Optional<StopSpeakingPlan> stopSpeakingPlan = Optional.empty();

        private Optional<StartSpeakingPlan> startSpeakingPlan = Optional.empty();

        private Optional<ArtifactPlan> artifactPlan = Optional.empty();

        private Optional<AnalysisPlan> analysisPlan = Optional.empty();

        private Optional<CompliancePlan> compliancePlan = Optional.empty();

        private Optional<Server> server = Optional.empty();

        private Optional<String> globalPrompt = Optional.empty();

        private List<Edge> edges = new ArrayList<>();

        private Optional<List<CreateWorkflowDtoCredentialsItem>> credentials = Optional.empty();

        private Optional<CreateWorkflowDtoBackgroundSound> backgroundSound = Optional.empty();

        private Optional<LangfuseObservabilityPlan> observabilityPlan = Optional.empty();

        private Optional<CreateWorkflowDtoVoice> voice = Optional.empty();

        private Optional<CreateWorkflowDtoTranscriber> transcriber = Optional.empty();

        private List<CreateWorkflowDtoNodesItem> nodes = new ArrayList<>();

        @JsonAnySetter
        private Map<String, Object> additionalProperties = new HashMap<>();

        private Builder() {}

        @java.lang.Override
        public Builder from(CreateWorkflowDto other) {
            nodes(other.getNodes());
            transcriber(other.getTranscriber());
            voice(other.getVoice());
            observabilityPlan(other.getObservabilityPlan());
            backgroundSound(other.getBackgroundSound());
            credentials(other.getCredentials());
            name(other.getName());
            edges(other.getEdges());
            globalPrompt(other.getGlobalPrompt());
            server(other.getServer());
            compliancePlan(other.getCompliancePlan());
            analysisPlan(other.getAnalysisPlan());
            artifactPlan(other.getArtifactPlan());
            startSpeakingPlan(other.getStartSpeakingPlan());
            stopSpeakingPlan(other.getStopSpeakingPlan());
            monitorPlan(other.getMonitorPlan());
            backgroundSpeechDenoisingPlan(other.getBackgroundSpeechDenoisingPlan());
            credentialIds(other.getCredentialIds());
            return this;
        }

        @java.lang.Override
        @JsonSetter("name")
        public _FinalStage name(@NotNull String name) {
            this.name = Objects.requireNonNull(name, "name must not be null");
            return this;
        }

        /**
         * <p>These are the credentials that will be used for the workflow calls. By default, all the credentials are available for use in the call but you can provide a subset using this.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        public _FinalStage credentialIds(List<String> credentialIds) {
            this.credentialIds = Optional.ofNullable(credentialIds);
            return this;
        }

        /**
         * <p>These are the credentials that will be used for the workflow calls. By default, all the credentials are available for use in the call but you can provide a subset using this.</p>
         */
        @java.lang.Override
        @JsonSetter(value = "credentialIds", nulls = Nulls.SKIP)
        public _FinalStage credentialIds(Optional<List<String>> credentialIds) {
            this.credentialIds = credentialIds;
            return this;
        }

        /**
         * <p>This enables filtering of noise and background speech while the user is talking.</p>
         * <p>Features:</p>
         * <ul>
         * <li>Smart denoising using Krisp</li>
         * <li>Fourier denoising</li>
         * </ul>
         * <p>Both can be used together. Order of precedence:</p>
         * <ul>
         * <li>Smart denoising</li>
         * <li>Fourier denoising</li>
         * </ul>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        public _FinalStage backgroundSpeechDenoisingPlan(BackgroundSpeechDenoisingPlan backgroundSpeechDenoisingPlan) {
            this.backgroundSpeechDenoisingPlan = Optional.ofNullable(backgroundSpeechDenoisingPlan);
            return this;
        }

        /**
         * <p>This enables filtering of noise and background speech while the user is talking.</p>
         * <p>Features:</p>
         * <ul>
         * <li>Smart denoising using Krisp</li>
         * <li>Fourier denoising</li>
         * </ul>
         * <p>Both can be used together. Order of precedence:</p>
         * <ul>
         * <li>Smart denoising</li>
         * <li>Fourier denoising</li>
         * </ul>
         */
        @java.lang.Override
        @JsonSetter(value = "backgroundSpeechDenoisingPlan", nulls = Nulls.SKIP)
        public _FinalStage backgroundSpeechDenoisingPlan(
                Optional<BackgroundSpeechDenoisingPlan> backgroundSpeechDenoisingPlan) {
            this.backgroundSpeechDenoisingPlan = backgroundSpeechDenoisingPlan;
            return this;
        }

        /**
         * <p>This is the plan for real-time monitoring of the workflow's calls.</p>
         * <p>Usage:</p>
         * <ul>
         * <li>To enable live listening of the workflow's calls, set <code>monitorPlan.listenEnabled</code> to <code>true</code>.</li>
         * <li>To enable live control of the workflow's calls, set <code>monitorPlan.controlEnabled</code> to <code>true</code>.</li>
         * </ul>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        public _FinalStage monitorPlan(MonitorPlan monitorPlan) {
            this.monitorPlan = Optional.ofNullable(monitorPlan);
            return this;
        }

        /**
         * <p>This is the plan for real-time monitoring of the workflow's calls.</p>
         * <p>Usage:</p>
         * <ul>
         * <li>To enable live listening of the workflow's calls, set <code>monitorPlan.listenEnabled</code> to <code>true</code>.</li>
         * <li>To enable live control of the workflow's calls, set <code>monitorPlan.controlEnabled</code> to <code>true</code>.</li>
         * </ul>
         */
        @java.lang.Override
        @JsonSetter(value = "monitorPlan", nulls = Nulls.SKIP)
        public _FinalStage monitorPlan(Optional<MonitorPlan> monitorPlan) {
            this.monitorPlan = monitorPlan;
            return this;
        }

        /**
         * <p>This is the plan for when workflow nodes should stop talking on customer interruption.</p>
         * <p>You should configure this if you're running into these issues:</p>
         * <ul>
         * <li>The assistant is too slow to recognize customer's interruption.</li>
         * <li>The assistant is too fast to recognize customer's interruption.</li>
         * <li>The assistant is getting interrupted by phrases that are just acknowledgments.</li>
         * <li>The assistant is getting interrupted by background noises.</li>
         * <li>The assistant is not properly stopping -- it starts talking right after getting interrupted.</li>
         * </ul>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        public _FinalStage stopSpeakingPlan(StopSpeakingPlan stopSpeakingPlan) {
            this.stopSpeakingPlan = Optional.ofNullable(stopSpeakingPlan);
            return this;
        }

        /**
         * <p>This is the plan for when workflow nodes should stop talking on customer interruption.</p>
         * <p>You should configure this if you're running into these issues:</p>
         * <ul>
         * <li>The assistant is too slow to recognize customer's interruption.</li>
         * <li>The assistant is too fast to recognize customer's interruption.</li>
         * <li>The assistant is getting interrupted by phrases that are just acknowledgments.</li>
         * <li>The assistant is getting interrupted by background noises.</li>
         * <li>The assistant is not properly stopping -- it starts talking right after getting interrupted.</li>
         * </ul>
         */
        @java.lang.Override
        @JsonSetter(value = "stopSpeakingPlan", nulls = Nulls.SKIP)
        public _FinalStage stopSpeakingPlan(Optional<StopSpeakingPlan> stopSpeakingPlan) {
            this.stopSpeakingPlan = stopSpeakingPlan;
            return this;
        }

        /**
         * <p>This is the plan for when the workflow nodes should start talking.</p>
         * <p>You should configure this if you're running into these issues:</p>
         * <ul>
         * <li>The assistant is too slow to start talking after the customer is done speaking.</li>
         * <li>The assistant is too fast to start talking after the customer is done speaking.</li>
         * <li>The assistant is so fast that it's actually interrupting the customer.</li>
         * </ul>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        public _FinalStage startSpeakingPlan(StartSpeakingPlan startSpeakingPlan) {
            this.startSpeakingPlan = Optional.ofNullable(startSpeakingPlan);
            return this;
        }

        /**
         * <p>This is the plan for when the workflow nodes should start talking.</p>
         * <p>You should configure this if you're running into these issues:</p>
         * <ul>
         * <li>The assistant is too slow to start talking after the customer is done speaking.</li>
         * <li>The assistant is too fast to start talking after the customer is done speaking.</li>
         * <li>The assistant is so fast that it's actually interrupting the customer.</li>
         * </ul>
         */
        @java.lang.Override
        @JsonSetter(value = "startSpeakingPlan", nulls = Nulls.SKIP)
        public _FinalStage startSpeakingPlan(Optional<StartSpeakingPlan> startSpeakingPlan) {
            this.startSpeakingPlan = startSpeakingPlan;
            return this;
        }

        /**
         * <p>This is the plan for artifacts generated during workflow's calls. Stored in <code>call.artifact</code>.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        public _FinalStage artifactPlan(ArtifactPlan artifactPlan) {
            this.artifactPlan = Optional.ofNullable(artifactPlan);
            return this;
        }

        /**
         * <p>This is the plan for artifacts generated during workflow's calls. Stored in <code>call.artifact</code>.</p>
         */
        @java.lang.Override
        @JsonSetter(value = "artifactPlan", nulls = Nulls.SKIP)
        public _FinalStage artifactPlan(Optional<ArtifactPlan> artifactPlan) {
            this.artifactPlan = artifactPlan;
            return this;
        }

        /**
         * <p>This is the plan for analysis of workflow's calls. Stored in <code>call.analysis</code>.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        public _FinalStage analysisPlan(AnalysisPlan analysisPlan) {
            this.analysisPlan = Optional.ofNullable(analysisPlan);
            return this;
        }

        /**
         * <p>This is the plan for analysis of workflow's calls. Stored in <code>call.analysis</code>.</p>
         */
        @java.lang.Override
        @JsonSetter(value = "analysisPlan", nulls = Nulls.SKIP)
        public _FinalStage analysisPlan(Optional<AnalysisPlan> analysisPlan) {
            this.analysisPlan = analysisPlan;
            return this;
        }

        /**
         * <p>This is the compliance plan for the workflow. It allows you to configure HIPAA and other compliance settings.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        public _FinalStage compliancePlan(CompliancePlan compliancePlan) {
            this.compliancePlan = Optional.ofNullable(compliancePlan);
            return this;
        }

        /**
         * <p>This is the compliance plan for the workflow. It allows you to configure HIPAA and other compliance settings.</p>
         */
        @java.lang.Override
        @JsonSetter(value = "compliancePlan", nulls = Nulls.SKIP)
        public _FinalStage compliancePlan(Optional<CompliancePlan> compliancePlan) {
            this.compliancePlan = compliancePlan;
            return this;
        }

        /**
         * <p>This is where Vapi will send webhooks. You can find all webhooks available along with their shape in ServerMessage schema.</p>
         * <p>The order of precedence is:</p>
         * <ol>
         * <li>tool.server</li>
         * <li>workflow.server / assistant.server</li>
         * <li>phoneNumber.server</li>
         * <li>org.server</li>
         * </ol>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        public _FinalStage server(Server server) {
            this.server = Optional.ofNullable(server);
            return this;
        }

        /**
         * <p>This is where Vapi will send webhooks. You can find all webhooks available along with their shape in ServerMessage schema.</p>
         * <p>The order of precedence is:</p>
         * <ol>
         * <li>tool.server</li>
         * <li>workflow.server / assistant.server</li>
         * <li>phoneNumber.server</li>
         * <li>org.server</li>
         * </ol>
         */
        @java.lang.Override
        @JsonSetter(value = "server", nulls = Nulls.SKIP)
        public _FinalStage server(Optional<Server> server) {
            this.server = server;
            return this;
        }

        @java.lang.Override
        public _FinalStage globalPrompt(String globalPrompt) {
            this.globalPrompt = Optional.ofNullable(globalPrompt);
            return this;
        }

        @java.lang.Override
        @JsonSetter(value = "globalPrompt", nulls = Nulls.SKIP)
        public _FinalStage globalPrompt(Optional<String> globalPrompt) {
            this.globalPrompt = globalPrompt;
            return this;
        }

        @java.lang.Override
        public _FinalStage addAllEdges(List<Edge> edges) {
            this.edges.addAll(edges);
            return this;
        }

        @java.lang.Override
        public _FinalStage addEdges(Edge edges) {
            this.edges.add(edges);
            return this;
        }

        @java.lang.Override
        @JsonSetter(value = "edges", nulls = Nulls.SKIP)
        public _FinalStage edges(List<Edge> edges) {
            this.edges.clear();
            this.edges.addAll(edges);
            return this;
        }

        /**
         * <p>These are dynamic credentials that will be used for the workflow calls. By default, all the credentials are available for use in the call but you can supplement an additional credentials using this. Dynamic credentials override existing credentials.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        public _FinalStage credentials(List<CreateWorkflowDtoCredentialsItem> credentials) {
            this.credentials = Optional.ofNullable(credentials);
            return this;
        }

        /**
         * <p>These are dynamic credentials that will be used for the workflow calls. By default, all the credentials are available for use in the call but you can supplement an additional credentials using this. Dynamic credentials override existing credentials.</p>
         */
        @java.lang.Override
        @JsonSetter(value = "credentials", nulls = Nulls.SKIP)
        public _FinalStage credentials(Optional<List<CreateWorkflowDtoCredentialsItem>> credentials) {
            this.credentials = credentials;
            return this;
        }

        /**
         * <p>This is the background sound in the call. Default for phone calls is 'office' and default for web calls is 'off'.
         * You can also provide a custom sound by providing a URL to an audio file.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        public _FinalStage backgroundSound(CreateWorkflowDtoBackgroundSound backgroundSound) {
            this.backgroundSound = Optional.ofNullable(backgroundSound);
            return this;
        }

        /**
         * <p>This is the background sound in the call. Default for phone calls is 'office' and default for web calls is 'off'.
         * You can also provide a custom sound by providing a URL to an audio file.</p>
         */
        @java.lang.Override
        @JsonSetter(value = "backgroundSound", nulls = Nulls.SKIP)
        public _FinalStage backgroundSound(Optional<CreateWorkflowDtoBackgroundSound> backgroundSound) {
            this.backgroundSound = backgroundSound;
            return this;
        }

        /**
         * <p>This is the plan for observability of workflow's calls.</p>
         * <p>Currently, only Langfuse is supported.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        public _FinalStage observabilityPlan(LangfuseObservabilityPlan observabilityPlan) {
            this.observabilityPlan = Optional.ofNullable(observabilityPlan);
            return this;
        }

        /**
         * <p>This is the plan for observability of workflow's calls.</p>
         * <p>Currently, only Langfuse is supported.</p>
         */
        @java.lang.Override
        @JsonSetter(value = "observabilityPlan", nulls = Nulls.SKIP)
        public _FinalStage observabilityPlan(Optional<LangfuseObservabilityPlan> observabilityPlan) {
            this.observabilityPlan = observabilityPlan;
            return this;
        }

        /**
         * <p>This is the voice for the workflow.</p>
         * <p>This can be overridden at node level using <code>nodes[n].voice</code>.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        public _FinalStage voice(CreateWorkflowDtoVoice voice) {
            this.voice = Optional.ofNullable(voice);
            return this;
        }

        /**
         * <p>This is the voice for the workflow.</p>
         * <p>This can be overridden at node level using <code>nodes[n].voice</code>.</p>
         */
        @java.lang.Override
        @JsonSetter(value = "voice", nulls = Nulls.SKIP)
        public _FinalStage voice(Optional<CreateWorkflowDtoVoice> voice) {
            this.voice = voice;
            return this;
        }

        /**
         * <p>This is the transcriber for the workflow.</p>
         * <p>This can be overridden at node level using <code>nodes[n].transcriber</code>.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        public _FinalStage transcriber(CreateWorkflowDtoTranscriber transcriber) {
            this.transcriber = Optional.ofNullable(transcriber);
            return this;
        }

        /**
         * <p>This is the transcriber for the workflow.</p>
         * <p>This can be overridden at node level using <code>nodes[n].transcriber</code>.</p>
         */
        @java.lang.Override
        @JsonSetter(value = "transcriber", nulls = Nulls.SKIP)
        public _FinalStage transcriber(Optional<CreateWorkflowDtoTranscriber> transcriber) {
            this.transcriber = transcriber;
            return this;
        }

        @java.lang.Override
        public _FinalStage addAllNodes(List<CreateWorkflowDtoNodesItem> nodes) {
            this.nodes.addAll(nodes);
            return this;
        }

        @java.lang.Override
        public _FinalStage addNodes(CreateWorkflowDtoNodesItem nodes) {
            this.nodes.add(nodes);
            return this;
        }

        @java.lang.Override
        @JsonSetter(value = "nodes", nulls = Nulls.SKIP)
        public _FinalStage nodes(List<CreateWorkflowDtoNodesItem> nodes) {
            this.nodes.clear();
            this.nodes.addAll(nodes);
            return this;
        }

        @java.lang.Override
        public CreateWorkflowDto build() {
            return new CreateWorkflowDto(
                    nodes,
                    transcriber,
                    voice,
                    observabilityPlan,
                    backgroundSound,
                    credentials,
                    name,
                    edges,
                    globalPrompt,
                    server,
                    compliancePlan,
                    analysisPlan,
                    artifactPlan,
                    startSpeakingPlan,
                    stopSpeakingPlan,
                    monitorPlan,
                    backgroundSpeechDenoisingPlan,
                    credentialIds,
                    additionalProperties);
        }
    }
}
