/**
 * This file was auto-generated by Fern from our API Definition.
 */
package com.vapi.api.types;

import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.annotation.Nulls;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.vapi.api.core.ObjectMappers;
import java.util.HashMap;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;

@JsonInclude(JsonInclude.Include.NON_ABSENT)
@JsonDeserialize(builder = Monitor.Builder.class)
public final class Monitor {
    private final Optional<String> listenUrl;

    private final Optional<String> controlUrl;

    private final Map<String, Object> additionalProperties;

    private Monitor(Optional<String> listenUrl, Optional<String> controlUrl, Map<String, Object> additionalProperties) {
        this.listenUrl = listenUrl;
        this.controlUrl = controlUrl;
        this.additionalProperties = additionalProperties;
    }

    /**
     * @return This is the URL where the assistant's calls can be listened to in real-time. To enable, set <code>assistant.monitorPlan.listenEnabled</code> to <code>true</code>.
     */
    @JsonProperty("listenUrl")
    public Optional<String> getListenUrl() {
        return listenUrl;
    }

    /**
     * @return This is the URL where the assistant's calls can be controlled in real-time. To enable, set <code>assistant.monitorPlan.controlEnabled</code> to <code>true</code>.
     */
    @JsonProperty("controlUrl")
    public Optional<String> getControlUrl() {
        return controlUrl;
    }

    @java.lang.Override
    public boolean equals(Object other) {
        if (this == other) return true;
        return other instanceof Monitor && equalTo((Monitor) other);
    }

    @JsonAnyGetter
    public Map<String, Object> getAdditionalProperties() {
        return this.additionalProperties;
    }

    private boolean equalTo(Monitor other) {
        return listenUrl.equals(other.listenUrl) && controlUrl.equals(other.controlUrl);
    }

    @java.lang.Override
    public int hashCode() {
        return Objects.hash(this.listenUrl, this.controlUrl);
    }

    @java.lang.Override
    public String toString() {
        return ObjectMappers.stringify(this);
    }

    public static Builder builder() {
        return new Builder();
    }

    @JsonIgnoreProperties(ignoreUnknown = true)
    public static final class Builder {
        private Optional<String> listenUrl = Optional.empty();

        private Optional<String> controlUrl = Optional.empty();

        @JsonAnySetter
        private Map<String, Object> additionalProperties = new HashMap<>();

        private Builder() {}

        public Builder from(Monitor other) {
            listenUrl(other.getListenUrl());
            controlUrl(other.getControlUrl());
            return this;
        }

        /**
         * <p>This is the URL where the assistant's calls can be listened to in real-time. To enable, set <code>assistant.monitorPlan.listenEnabled</code> to <code>true</code>.</p>
         */
        @JsonSetter(value = "listenUrl", nulls = Nulls.SKIP)
        public Builder listenUrl(Optional<String> listenUrl) {
            this.listenUrl = listenUrl;
            return this;
        }

        public Builder listenUrl(String listenUrl) {
            this.listenUrl = Optional.ofNullable(listenUrl);
            return this;
        }

        /**
         * <p>This is the URL where the assistant's calls can be controlled in real-time. To enable, set <code>assistant.monitorPlan.controlEnabled</code> to <code>true</code>.</p>
         */
        @JsonSetter(value = "controlUrl", nulls = Nulls.SKIP)
        public Builder controlUrl(Optional<String> controlUrl) {
            this.controlUrl = controlUrl;
            return this;
        }

        public Builder controlUrl(String controlUrl) {
            this.controlUrl = Optional.ofNullable(controlUrl);
            return this;
        }

        public Monitor build() {
            return new Monitor(listenUrl, controlUrl, additionalProperties);
        }
    }
}
