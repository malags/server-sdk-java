/**
 * This file was auto-generated by Fern from our API Definition.
 */
package com.vapi.api.types;

import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSubTypes;
import com.fasterxml.jackson.annotation.JsonTypeInfo;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonUnwrapped;
import com.fasterxml.jackson.annotation.JsonValue;
import java.util.Objects;
import java.util.Optional;

public final class FallbackTranscriberPlanTranscribersItem {
    private final Value value;

    @JsonCreator(mode = JsonCreator.Mode.DELEGATING)
    private FallbackTranscriberPlanTranscribersItem(Value value) {
        this.value = value;
    }

    public <T> T visit(Visitor<T> visitor) {
        return value.visit(visitor);
    }

    public static FallbackTranscriberPlanTranscribersItem assemblyAi(FallbackAssemblyAiTranscriber value) {
        return new FallbackTranscriberPlanTranscribersItem(new AssemblyAiValue(value));
    }

    public static FallbackTranscriberPlanTranscribersItem azure(FallbackAzureSpeechTranscriber value) {
        return new FallbackTranscriberPlanTranscribersItem(new AzureValue(value));
    }

    public static FallbackTranscriberPlanTranscribersItem customTranscriber(FallbackCustomTranscriber value) {
        return new FallbackTranscriberPlanTranscribersItem(new CustomTranscriberValue(value));
    }

    public static FallbackTranscriberPlanTranscribersItem deepgram(FallbackDeepgramTranscriber value) {
        return new FallbackTranscriberPlanTranscribersItem(new DeepgramValue(value));
    }

    public static FallbackTranscriberPlanTranscribersItem _11Labs(FallbackElevenLabsTranscriber value) {
        return new FallbackTranscriberPlanTranscribersItem(new _11LabsValue(value));
    }

    public static FallbackTranscriberPlanTranscribersItem gladia(FallbackGladiaTranscriber value) {
        return new FallbackTranscriberPlanTranscribersItem(new GladiaValue(value));
    }

    public static FallbackTranscriberPlanTranscribersItem google(FallbackGoogleTranscriber value) {
        return new FallbackTranscriberPlanTranscribersItem(new GoogleValue(value));
    }

    public static FallbackTranscriberPlanTranscribersItem talkscriber(FallbackTalkscriberTranscriber value) {
        return new FallbackTranscriberPlanTranscribersItem(new TalkscriberValue(value));
    }

    public static FallbackTranscriberPlanTranscribersItem speechmatics(FallbackSpeechmaticsTranscriber value) {
        return new FallbackTranscriberPlanTranscribersItem(new SpeechmaticsValue(value));
    }

    public static FallbackTranscriberPlanTranscribersItem openai(FallbackOpenAiTranscriber value) {
        return new FallbackTranscriberPlanTranscribersItem(new OpenaiValue(value));
    }

    public static FallbackTranscriberPlanTranscribersItem cartesia(FallbackCartesiaTranscriber value) {
        return new FallbackTranscriberPlanTranscribersItem(new CartesiaValue(value));
    }

    public boolean isAssemblyAi() {
        return value instanceof AssemblyAiValue;
    }

    public boolean isAzure() {
        return value instanceof AzureValue;
    }

    public boolean isCustomTranscriber() {
        return value instanceof CustomTranscriberValue;
    }

    public boolean isDeepgram() {
        return value instanceof DeepgramValue;
    }

    public boolean is11Labs() {
        return value instanceof _11LabsValue;
    }

    public boolean isGladia() {
        return value instanceof GladiaValue;
    }

    public boolean isGoogle() {
        return value instanceof GoogleValue;
    }

    public boolean isTalkscriber() {
        return value instanceof TalkscriberValue;
    }

    public boolean isSpeechmatics() {
        return value instanceof SpeechmaticsValue;
    }

    public boolean isOpenai() {
        return value instanceof OpenaiValue;
    }

    public boolean isCartesia() {
        return value instanceof CartesiaValue;
    }

    public boolean _isUnknown() {
        return value instanceof _UnknownValue;
    }

    public Optional<FallbackAssemblyAiTranscriber> getAssemblyAi() {
        if (isAssemblyAi()) {
            return Optional.of(((AssemblyAiValue) value).value);
        }
        return Optional.empty();
    }

    public Optional<FallbackAzureSpeechTranscriber> getAzure() {
        if (isAzure()) {
            return Optional.of(((AzureValue) value).value);
        }
        return Optional.empty();
    }

    public Optional<FallbackCustomTranscriber> getCustomTranscriber() {
        if (isCustomTranscriber()) {
            return Optional.of(((CustomTranscriberValue) value).value);
        }
        return Optional.empty();
    }

    public Optional<FallbackDeepgramTranscriber> getDeepgram() {
        if (isDeepgram()) {
            return Optional.of(((DeepgramValue) value).value);
        }
        return Optional.empty();
    }

    public Optional<FallbackElevenLabsTranscriber> get11Labs() {
        if (is11Labs()) {
            return Optional.of(((_11LabsValue) value).value);
        }
        return Optional.empty();
    }

    public Optional<FallbackGladiaTranscriber> getGladia() {
        if (isGladia()) {
            return Optional.of(((GladiaValue) value).value);
        }
        return Optional.empty();
    }

    public Optional<FallbackGoogleTranscriber> getGoogle() {
        if (isGoogle()) {
            return Optional.of(((GoogleValue) value).value);
        }
        return Optional.empty();
    }

    public Optional<FallbackTalkscriberTranscriber> getTalkscriber() {
        if (isTalkscriber()) {
            return Optional.of(((TalkscriberValue) value).value);
        }
        return Optional.empty();
    }

    public Optional<FallbackSpeechmaticsTranscriber> getSpeechmatics() {
        if (isSpeechmatics()) {
            return Optional.of(((SpeechmaticsValue) value).value);
        }
        return Optional.empty();
    }

    public Optional<FallbackOpenAiTranscriber> getOpenai() {
        if (isOpenai()) {
            return Optional.of(((OpenaiValue) value).value);
        }
        return Optional.empty();
    }

    public Optional<FallbackCartesiaTranscriber> getCartesia() {
        if (isCartesia()) {
            return Optional.of(((CartesiaValue) value).value);
        }
        return Optional.empty();
    }

    public Optional<Object> _getUnknown() {
        if (_isUnknown()) {
            return Optional.of(((_UnknownValue) value).value);
        }
        return Optional.empty();
    }

    @JsonValue
    private Value getValue() {
        return this.value;
    }

    public interface Visitor<T> {
        T visitAssemblyAi(FallbackAssemblyAiTranscriber assemblyAi);

        T visitAzure(FallbackAzureSpeechTranscriber azure);

        T visitCustomTranscriber(FallbackCustomTranscriber customTranscriber);

        T visitDeepgram(FallbackDeepgramTranscriber deepgram);

        T visit11Labs(FallbackElevenLabsTranscriber _11Labs);

        T visitGladia(FallbackGladiaTranscriber gladia);

        T visitGoogle(FallbackGoogleTranscriber google);

        T visitTalkscriber(FallbackTalkscriberTranscriber talkscriber);

        T visitSpeechmatics(FallbackSpeechmaticsTranscriber speechmatics);

        T visitOpenai(FallbackOpenAiTranscriber openai);

        T visitCartesia(FallbackCartesiaTranscriber cartesia);

        T _visitUnknown(Object unknownType);
    }

    @JsonTypeInfo(use = JsonTypeInfo.Id.NAME, property = "provider", visible = true, defaultImpl = _UnknownValue.class)
    @JsonSubTypes({
        @JsonSubTypes.Type(AssemblyAiValue.class),
        @JsonSubTypes.Type(AzureValue.class),
        @JsonSubTypes.Type(CustomTranscriberValue.class),
        @JsonSubTypes.Type(DeepgramValue.class),
        @JsonSubTypes.Type(_11LabsValue.class),
        @JsonSubTypes.Type(GladiaValue.class),
        @JsonSubTypes.Type(GoogleValue.class),
        @JsonSubTypes.Type(TalkscriberValue.class),
        @JsonSubTypes.Type(SpeechmaticsValue.class),
        @JsonSubTypes.Type(OpenaiValue.class),
        @JsonSubTypes.Type(CartesiaValue.class)
    })
    @JsonIgnoreProperties(ignoreUnknown = true)
    private interface Value {
        <T> T visit(Visitor<T> visitor);
    }

    @JsonTypeName("assembly-ai")
    @JsonIgnoreProperties("provider")
    private static final class AssemblyAiValue implements Value {
        @JsonUnwrapped
        private FallbackAssemblyAiTranscriber value;

        @JsonCreator(mode = JsonCreator.Mode.PROPERTIES)
        private AssemblyAiValue() {}

        private AssemblyAiValue(FallbackAssemblyAiTranscriber value) {
            this.value = value;
        }

        @java.lang.Override
        public <T> T visit(Visitor<T> visitor) {
            return visitor.visitAssemblyAi(value);
        }

        @java.lang.Override
        public boolean equals(Object other) {
            if (this == other) return true;
            return other instanceof AssemblyAiValue && equalTo((AssemblyAiValue) other);
        }

        private boolean equalTo(AssemblyAiValue other) {
            return value.equals(other.value);
        }

        @java.lang.Override
        public int hashCode() {
            return Objects.hash(this.value);
        }

        @java.lang.Override
        public String toString() {
            return "FallbackTranscriberPlanTranscribersItem{" + "value: " + value + "}";
        }
    }

    @JsonTypeName("azure")
    @JsonIgnoreProperties("provider")
    private static final class AzureValue implements Value {
        @JsonUnwrapped
        private FallbackAzureSpeechTranscriber value;

        @JsonCreator(mode = JsonCreator.Mode.PROPERTIES)
        private AzureValue() {}

        private AzureValue(FallbackAzureSpeechTranscriber value) {
            this.value = value;
        }

        @java.lang.Override
        public <T> T visit(Visitor<T> visitor) {
            return visitor.visitAzure(value);
        }

        @java.lang.Override
        public boolean equals(Object other) {
            if (this == other) return true;
            return other instanceof AzureValue && equalTo((AzureValue) other);
        }

        private boolean equalTo(AzureValue other) {
            return value.equals(other.value);
        }

        @java.lang.Override
        public int hashCode() {
            return Objects.hash(this.value);
        }

        @java.lang.Override
        public String toString() {
            return "FallbackTranscriberPlanTranscribersItem{" + "value: " + value + "}";
        }
    }

    @JsonTypeName("custom-transcriber")
    @JsonIgnoreProperties("provider")
    private static final class CustomTranscriberValue implements Value {
        @JsonUnwrapped
        private FallbackCustomTranscriber value;

        @JsonCreator(mode = JsonCreator.Mode.PROPERTIES)
        private CustomTranscriberValue() {}

        private CustomTranscriberValue(FallbackCustomTranscriber value) {
            this.value = value;
        }

        @java.lang.Override
        public <T> T visit(Visitor<T> visitor) {
            return visitor.visitCustomTranscriber(value);
        }

        @java.lang.Override
        public boolean equals(Object other) {
            if (this == other) return true;
            return other instanceof CustomTranscriberValue && equalTo((CustomTranscriberValue) other);
        }

        private boolean equalTo(CustomTranscriberValue other) {
            return value.equals(other.value);
        }

        @java.lang.Override
        public int hashCode() {
            return Objects.hash(this.value);
        }

        @java.lang.Override
        public String toString() {
            return "FallbackTranscriberPlanTranscribersItem{" + "value: " + value + "}";
        }
    }

    @JsonTypeName("deepgram")
    @JsonIgnoreProperties("provider")
    private static final class DeepgramValue implements Value {
        @JsonUnwrapped
        private FallbackDeepgramTranscriber value;

        @JsonCreator(mode = JsonCreator.Mode.PROPERTIES)
        private DeepgramValue() {}

        private DeepgramValue(FallbackDeepgramTranscriber value) {
            this.value = value;
        }

        @java.lang.Override
        public <T> T visit(Visitor<T> visitor) {
            return visitor.visitDeepgram(value);
        }

        @java.lang.Override
        public boolean equals(Object other) {
            if (this == other) return true;
            return other instanceof DeepgramValue && equalTo((DeepgramValue) other);
        }

        private boolean equalTo(DeepgramValue other) {
            return value.equals(other.value);
        }

        @java.lang.Override
        public int hashCode() {
            return Objects.hash(this.value);
        }

        @java.lang.Override
        public String toString() {
            return "FallbackTranscriberPlanTranscribersItem{" + "value: " + value + "}";
        }
    }

    @JsonTypeName("11labs")
    @JsonIgnoreProperties("provider")
    private static final class _11LabsValue implements Value {
        @JsonUnwrapped
        private FallbackElevenLabsTranscriber value;

        @JsonCreator(mode = JsonCreator.Mode.PROPERTIES)
        private _11LabsValue() {}

        private _11LabsValue(FallbackElevenLabsTranscriber value) {
            this.value = value;
        }

        @java.lang.Override
        public <T> T visit(Visitor<T> visitor) {
            return visitor.visit11Labs(value);
        }

        @java.lang.Override
        public boolean equals(Object other) {
            if (this == other) return true;
            return other instanceof _11LabsValue && equalTo((_11LabsValue) other);
        }

        private boolean equalTo(_11LabsValue other) {
            return value.equals(other.value);
        }

        @java.lang.Override
        public int hashCode() {
            return Objects.hash(this.value);
        }

        @java.lang.Override
        public String toString() {
            return "FallbackTranscriberPlanTranscribersItem{" + "value: " + value + "}";
        }
    }

    @JsonTypeName("gladia")
    @JsonIgnoreProperties("provider")
    private static final class GladiaValue implements Value {
        @JsonUnwrapped
        private FallbackGladiaTranscriber value;

        @JsonCreator(mode = JsonCreator.Mode.PROPERTIES)
        private GladiaValue() {}

        private GladiaValue(FallbackGladiaTranscriber value) {
            this.value = value;
        }

        @java.lang.Override
        public <T> T visit(Visitor<T> visitor) {
            return visitor.visitGladia(value);
        }

        @java.lang.Override
        public boolean equals(Object other) {
            if (this == other) return true;
            return other instanceof GladiaValue && equalTo((GladiaValue) other);
        }

        private boolean equalTo(GladiaValue other) {
            return value.equals(other.value);
        }

        @java.lang.Override
        public int hashCode() {
            return Objects.hash(this.value);
        }

        @java.lang.Override
        public String toString() {
            return "FallbackTranscriberPlanTranscribersItem{" + "value: " + value + "}";
        }
    }

    @JsonTypeName("google")
    @JsonIgnoreProperties("provider")
    private static final class GoogleValue implements Value {
        @JsonUnwrapped
        private FallbackGoogleTranscriber value;

        @JsonCreator(mode = JsonCreator.Mode.PROPERTIES)
        private GoogleValue() {}

        private GoogleValue(FallbackGoogleTranscriber value) {
            this.value = value;
        }

        @java.lang.Override
        public <T> T visit(Visitor<T> visitor) {
            return visitor.visitGoogle(value);
        }

        @java.lang.Override
        public boolean equals(Object other) {
            if (this == other) return true;
            return other instanceof GoogleValue && equalTo((GoogleValue) other);
        }

        private boolean equalTo(GoogleValue other) {
            return value.equals(other.value);
        }

        @java.lang.Override
        public int hashCode() {
            return Objects.hash(this.value);
        }

        @java.lang.Override
        public String toString() {
            return "FallbackTranscriberPlanTranscribersItem{" + "value: " + value + "}";
        }
    }

    @JsonTypeName("talkscriber")
    @JsonIgnoreProperties("provider")
    private static final class TalkscriberValue implements Value {
        @JsonUnwrapped
        private FallbackTalkscriberTranscriber value;

        @JsonCreator(mode = JsonCreator.Mode.PROPERTIES)
        private TalkscriberValue() {}

        private TalkscriberValue(FallbackTalkscriberTranscriber value) {
            this.value = value;
        }

        @java.lang.Override
        public <T> T visit(Visitor<T> visitor) {
            return visitor.visitTalkscriber(value);
        }

        @java.lang.Override
        public boolean equals(Object other) {
            if (this == other) return true;
            return other instanceof TalkscriberValue && equalTo((TalkscriberValue) other);
        }

        private boolean equalTo(TalkscriberValue other) {
            return value.equals(other.value);
        }

        @java.lang.Override
        public int hashCode() {
            return Objects.hash(this.value);
        }

        @java.lang.Override
        public String toString() {
            return "FallbackTranscriberPlanTranscribersItem{" + "value: " + value + "}";
        }
    }

    @JsonTypeName("speechmatics")
    @JsonIgnoreProperties("provider")
    private static final class SpeechmaticsValue implements Value {
        @JsonUnwrapped
        private FallbackSpeechmaticsTranscriber value;

        @JsonCreator(mode = JsonCreator.Mode.PROPERTIES)
        private SpeechmaticsValue() {}

        private SpeechmaticsValue(FallbackSpeechmaticsTranscriber value) {
            this.value = value;
        }

        @java.lang.Override
        public <T> T visit(Visitor<T> visitor) {
            return visitor.visitSpeechmatics(value);
        }

        @java.lang.Override
        public boolean equals(Object other) {
            if (this == other) return true;
            return other instanceof SpeechmaticsValue && equalTo((SpeechmaticsValue) other);
        }

        private boolean equalTo(SpeechmaticsValue other) {
            return value.equals(other.value);
        }

        @java.lang.Override
        public int hashCode() {
            return Objects.hash(this.value);
        }

        @java.lang.Override
        public String toString() {
            return "FallbackTranscriberPlanTranscribersItem{" + "value: " + value + "}";
        }
    }

    @JsonTypeName("openai")
    @JsonIgnoreProperties("provider")
    private static final class OpenaiValue implements Value {
        @JsonUnwrapped
        private FallbackOpenAiTranscriber value;

        @JsonCreator(mode = JsonCreator.Mode.PROPERTIES)
        private OpenaiValue() {}

        private OpenaiValue(FallbackOpenAiTranscriber value) {
            this.value = value;
        }

        @java.lang.Override
        public <T> T visit(Visitor<T> visitor) {
            return visitor.visitOpenai(value);
        }

        @java.lang.Override
        public boolean equals(Object other) {
            if (this == other) return true;
            return other instanceof OpenaiValue && equalTo((OpenaiValue) other);
        }

        private boolean equalTo(OpenaiValue other) {
            return value.equals(other.value);
        }

        @java.lang.Override
        public int hashCode() {
            return Objects.hash(this.value);
        }

        @java.lang.Override
        public String toString() {
            return "FallbackTranscriberPlanTranscribersItem{" + "value: " + value + "}";
        }
    }

    @JsonTypeName("cartesia")
    @JsonIgnoreProperties("provider")
    private static final class CartesiaValue implements Value {
        @JsonUnwrapped
        private FallbackCartesiaTranscriber value;

        @JsonCreator(mode = JsonCreator.Mode.PROPERTIES)
        private CartesiaValue() {}

        private CartesiaValue(FallbackCartesiaTranscriber value) {
            this.value = value;
        }

        @java.lang.Override
        public <T> T visit(Visitor<T> visitor) {
            return visitor.visitCartesia(value);
        }

        @java.lang.Override
        public boolean equals(Object other) {
            if (this == other) return true;
            return other instanceof CartesiaValue && equalTo((CartesiaValue) other);
        }

        private boolean equalTo(CartesiaValue other) {
            return value.equals(other.value);
        }

        @java.lang.Override
        public int hashCode() {
            return Objects.hash(this.value);
        }

        @java.lang.Override
        public String toString() {
            return "FallbackTranscriberPlanTranscribersItem{" + "value: " + value + "}";
        }
    }

    @JsonIgnoreProperties("provider")
    private static final class _UnknownValue implements Value {
        private String type;

        @JsonValue
        private Object value;

        @JsonCreator(mode = JsonCreator.Mode.PROPERTIES)
        private _UnknownValue(@JsonProperty("value") Object value) {}

        @java.lang.Override
        public <T> T visit(Visitor<T> visitor) {
            return visitor._visitUnknown(value);
        }

        @java.lang.Override
        public boolean equals(Object other) {
            if (this == other) return true;
            return other instanceof _UnknownValue && equalTo((_UnknownValue) other);
        }

        private boolean equalTo(_UnknownValue other) {
            return type.equals(other.type) && value.equals(other.value);
        }

        @java.lang.Override
        public int hashCode() {
            return Objects.hash(this.type, this.value);
        }

        @java.lang.Override
        public String toString() {
            return "FallbackTranscriberPlanTranscribersItem{" + "type: " + type + ", value: " + value + "}";
        }
    }
}
