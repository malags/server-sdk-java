/**
 * This file was auto-generated by Fern from our API Definition.
 */
package com.vapi.api.types;

import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.annotation.Nulls;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.vapi.api.core.ObjectMappers;
import java.util.HashMap;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;

@JsonInclude(JsonInclude.Include.NON_ABSENT)
@JsonDeserialize(builder = CreateTokenDto.Builder.class)
public final class CreateTokenDto {
    private final Optional<CreateTokenDtoTag> tag;

    private final Optional<String> name;

    private final Optional<TokenRestrictions> restrictions;

    private final Map<String, Object> additionalProperties;

    private CreateTokenDto(
            Optional<CreateTokenDtoTag> tag,
            Optional<String> name,
            Optional<TokenRestrictions> restrictions,
            Map<String, Object> additionalProperties) {
        this.tag = tag;
        this.name = name;
        this.restrictions = restrictions;
        this.additionalProperties = additionalProperties;
    }

    /**
     * @return This is the tag for the token. It represents its scope.
     */
    @JsonProperty("tag")
    public Optional<CreateTokenDtoTag> getTag() {
        return tag;
    }

    /**
     * @return This is the name of the token. This is just for your own reference.
     */
    @JsonProperty("name")
    public Optional<String> getName() {
        return name;
    }

    /**
     * @return This are the restrictions for the token.
     */
    @JsonProperty("restrictions")
    public Optional<TokenRestrictions> getRestrictions() {
        return restrictions;
    }

    @java.lang.Override
    public boolean equals(Object other) {
        if (this == other) return true;
        return other instanceof CreateTokenDto && equalTo((CreateTokenDto) other);
    }

    @JsonAnyGetter
    public Map<String, Object> getAdditionalProperties() {
        return this.additionalProperties;
    }

    private boolean equalTo(CreateTokenDto other) {
        return tag.equals(other.tag) && name.equals(other.name) && restrictions.equals(other.restrictions);
    }

    @java.lang.Override
    public int hashCode() {
        return Objects.hash(this.tag, this.name, this.restrictions);
    }

    @java.lang.Override
    public String toString() {
        return ObjectMappers.stringify(this);
    }

    public static Builder builder() {
        return new Builder();
    }

    @JsonIgnoreProperties(ignoreUnknown = true)
    public static final class Builder {
        private Optional<CreateTokenDtoTag> tag = Optional.empty();

        private Optional<String> name = Optional.empty();

        private Optional<TokenRestrictions> restrictions = Optional.empty();

        @JsonAnySetter
        private Map<String, Object> additionalProperties = new HashMap<>();

        private Builder() {}

        public Builder from(CreateTokenDto other) {
            tag(other.getTag());
            name(other.getName());
            restrictions(other.getRestrictions());
            return this;
        }

        /**
         * <p>This is the tag for the token. It represents its scope.</p>
         */
        @JsonSetter(value = "tag", nulls = Nulls.SKIP)
        public Builder tag(Optional<CreateTokenDtoTag> tag) {
            this.tag = tag;
            return this;
        }

        public Builder tag(CreateTokenDtoTag tag) {
            this.tag = Optional.ofNullable(tag);
            return this;
        }

        /**
         * <p>This is the name of the token. This is just for your own reference.</p>
         */
        @JsonSetter(value = "name", nulls = Nulls.SKIP)
        public Builder name(Optional<String> name) {
            this.name = name;
            return this;
        }

        public Builder name(String name) {
            this.name = Optional.ofNullable(name);
            return this;
        }

        /**
         * <p>This are the restrictions for the token.</p>
         */
        @JsonSetter(value = "restrictions", nulls = Nulls.SKIP)
        public Builder restrictions(Optional<TokenRestrictions> restrictions) {
            this.restrictions = restrictions;
            return this;
        }

        public Builder restrictions(TokenRestrictions restrictions) {
            this.restrictions = Optional.ofNullable(restrictions);
            return this;
        }

        public CreateTokenDto build() {
            return new CreateTokenDto(tag, name, restrictions, additionalProperties);
        }
    }
}
