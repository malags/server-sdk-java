/**
 * This file was auto-generated by Fern from our API Definition.
 */
package com.vapi.api.types;

import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.annotation.Nulls;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.vapi.api.core.ObjectMappers;
import java.util.HashMap;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import org.jetbrains.annotations.NotNull;

@JsonInclude(JsonInclude.Include.NON_ABSENT)
@JsonDeserialize(builder = FallbackInworldVoice.Builder.class)
public final class FallbackInworldVoice {
    private final Optional<Boolean> cachingEnabled;

    private final FallbackInworldVoiceVoiceId voiceId;

    private final Optional<String> model;

    private final Optional<FallbackInworldVoiceLanguageCode> languageCode;

    private final Optional<ChunkPlan> chunkPlan;

    private final Map<String, Object> additionalProperties;

    private FallbackInworldVoice(
            Optional<Boolean> cachingEnabled,
            FallbackInworldVoiceVoiceId voiceId,
            Optional<String> model,
            Optional<FallbackInworldVoiceLanguageCode> languageCode,
            Optional<ChunkPlan> chunkPlan,
            Map<String, Object> additionalProperties) {
        this.cachingEnabled = cachingEnabled;
        this.voiceId = voiceId;
        this.model = model;
        this.languageCode = languageCode;
        this.chunkPlan = chunkPlan;
        this.additionalProperties = additionalProperties;
    }

    /**
     * @return This is the flag to toggle voice caching for the assistant.
     */
    @JsonProperty("cachingEnabled")
    public Optional<Boolean> getCachingEnabled() {
        return cachingEnabled;
    }

    /**
     * @return Available voices by language:
     * • en: Alex, Ashley, Craig, Deborah, Dennis, Edward, Elizabeth, Hades, Julia, Pixie, Mark, Olivia, Priya, Ronald, Sarah, Shaun, Theodore, Timothy, Wendy, Dominus
     * • zh: Yichen, Xiaoyin, Xinyi, Jing
     * • nl: Erik, Katrien, Lennart, Lore
     * • fr: Alain, Hélène, Mathieu, Étienne
     * • de: Johanna, Josef
     * • it: Gianni, Orietta
     * • ja: Asuka, Satoshi
     * • ko: Hyunwoo, Minji, Seojun, Yoona
     * • pl: Szymon, Wojciech
     * • pt: Heitor, Maitê
     * • es: Diego, Lupita, Miguel, Rafael
     */
    @JsonProperty("voiceId")
    public FallbackInworldVoiceVoiceId getVoiceId() {
        return voiceId;
    }

    /**
     * @return This is the model that will be used.
     */
    @JsonProperty("model")
    public Optional<String> getModel() {
        return model;
    }

    /**
     * @return Language code for Inworld TTS synthesis
     */
    @JsonProperty("languageCode")
    public Optional<FallbackInworldVoiceLanguageCode> getLanguageCode() {
        return languageCode;
    }

    /**
     * @return This is the plan for chunking the model output before it is sent to the voice provider.
     */
    @JsonProperty("chunkPlan")
    public Optional<ChunkPlan> getChunkPlan() {
        return chunkPlan;
    }

    @java.lang.Override
    public boolean equals(Object other) {
        if (this == other) return true;
        return other instanceof FallbackInworldVoice && equalTo((FallbackInworldVoice) other);
    }

    @JsonAnyGetter
    public Map<String, Object> getAdditionalProperties() {
        return this.additionalProperties;
    }

    private boolean equalTo(FallbackInworldVoice other) {
        return cachingEnabled.equals(other.cachingEnabled)
                && voiceId.equals(other.voiceId)
                && model.equals(other.model)
                && languageCode.equals(other.languageCode)
                && chunkPlan.equals(other.chunkPlan);
    }

    @java.lang.Override
    public int hashCode() {
        return Objects.hash(this.cachingEnabled, this.voiceId, this.model, this.languageCode, this.chunkPlan);
    }

    @java.lang.Override
    public String toString() {
        return ObjectMappers.stringify(this);
    }

    public static VoiceIdStage builder() {
        return new Builder();
    }

    public interface VoiceIdStage {
        /**
         * <p>Available voices by language:
         * • en: Alex, Ashley, Craig, Deborah, Dennis, Edward, Elizabeth, Hades, Julia, Pixie, Mark, Olivia, Priya, Ronald, Sarah, Shaun, Theodore, Timothy, Wendy, Dominus
         * • zh: Yichen, Xiaoyin, Xinyi, Jing
         * • nl: Erik, Katrien, Lennart, Lore
         * • fr: Alain, Hélène, Mathieu, Étienne
         * • de: Johanna, Josef
         * • it: Gianni, Orietta
         * • ja: Asuka, Satoshi
         * • ko: Hyunwoo, Minji, Seojun, Yoona
         * • pl: Szymon, Wojciech
         * • pt: Heitor, Maitê
         * • es: Diego, Lupita, Miguel, Rafael</p>
         */
        _FinalStage voiceId(@NotNull FallbackInworldVoiceVoiceId voiceId);

        Builder from(FallbackInworldVoice other);
    }

    public interface _FinalStage {
        FallbackInworldVoice build();

        /**
         * <p>This is the flag to toggle voice caching for the assistant.</p>
         */
        _FinalStage cachingEnabled(Optional<Boolean> cachingEnabled);

        _FinalStage cachingEnabled(Boolean cachingEnabled);

        /**
         * <p>This is the model that will be used.</p>
         */
        _FinalStage model(Optional<String> model);

        _FinalStage model(String model);

        /**
         * <p>Language code for Inworld TTS synthesis</p>
         */
        _FinalStage languageCode(Optional<FallbackInworldVoiceLanguageCode> languageCode);

        _FinalStage languageCode(FallbackInworldVoiceLanguageCode languageCode);

        /**
         * <p>This is the plan for chunking the model output before it is sent to the voice provider.</p>
         */
        _FinalStage chunkPlan(Optional<ChunkPlan> chunkPlan);

        _FinalStage chunkPlan(ChunkPlan chunkPlan);
    }

    @JsonIgnoreProperties(ignoreUnknown = true)
    public static final class Builder implements VoiceIdStage, _FinalStage {
        private FallbackInworldVoiceVoiceId voiceId;

        private Optional<ChunkPlan> chunkPlan = Optional.empty();

        private Optional<FallbackInworldVoiceLanguageCode> languageCode = Optional.empty();

        private Optional<String> model = Optional.empty();

        private Optional<Boolean> cachingEnabled = Optional.empty();

        @JsonAnySetter
        private Map<String, Object> additionalProperties = new HashMap<>();

        private Builder() {}

        @java.lang.Override
        public Builder from(FallbackInworldVoice other) {
            cachingEnabled(other.getCachingEnabled());
            voiceId(other.getVoiceId());
            model(other.getModel());
            languageCode(other.getLanguageCode());
            chunkPlan(other.getChunkPlan());
            return this;
        }

        /**
         * <p>Available voices by language:
         * • en: Alex, Ashley, Craig, Deborah, Dennis, Edward, Elizabeth, Hades, Julia, Pixie, Mark, Olivia, Priya, Ronald, Sarah, Shaun, Theodore, Timothy, Wendy, Dominus
         * • zh: Yichen, Xiaoyin, Xinyi, Jing
         * • nl: Erik, Katrien, Lennart, Lore
         * • fr: Alain, Hélène, Mathieu, Étienne
         * • de: Johanna, Josef
         * • it: Gianni, Orietta
         * • ja: Asuka, Satoshi
         * • ko: Hyunwoo, Minji, Seojun, Yoona
         * • pl: Szymon, Wojciech
         * • pt: Heitor, Maitê
         * • es: Diego, Lupita, Miguel, Rafael</p>
         * <p>Available voices by language:
         * • en: Alex, Ashley, Craig, Deborah, Dennis, Edward, Elizabeth, Hades, Julia, Pixie, Mark, Olivia, Priya, Ronald, Sarah, Shaun, Theodore, Timothy, Wendy, Dominus
         * • zh: Yichen, Xiaoyin, Xinyi, Jing
         * • nl: Erik, Katrien, Lennart, Lore
         * • fr: Alain, Hélène, Mathieu, Étienne
         * • de: Johanna, Josef
         * • it: Gianni, Orietta
         * • ja: Asuka, Satoshi
         * • ko: Hyunwoo, Minji, Seojun, Yoona
         * • pl: Szymon, Wojciech
         * • pt: Heitor, Maitê
         * • es: Diego, Lupita, Miguel, Rafael</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        @JsonSetter("voiceId")
        public _FinalStage voiceId(@NotNull FallbackInworldVoiceVoiceId voiceId) {
            this.voiceId = Objects.requireNonNull(voiceId, "voiceId must not be null");
            return this;
        }

        /**
         * <p>This is the plan for chunking the model output before it is sent to the voice provider.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        public _FinalStage chunkPlan(ChunkPlan chunkPlan) {
            this.chunkPlan = Optional.ofNullable(chunkPlan);
            return this;
        }

        /**
         * <p>This is the plan for chunking the model output before it is sent to the voice provider.</p>
         */
        @java.lang.Override
        @JsonSetter(value = "chunkPlan", nulls = Nulls.SKIP)
        public _FinalStage chunkPlan(Optional<ChunkPlan> chunkPlan) {
            this.chunkPlan = chunkPlan;
            return this;
        }

        /**
         * <p>Language code for Inworld TTS synthesis</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        public _FinalStage languageCode(FallbackInworldVoiceLanguageCode languageCode) {
            this.languageCode = Optional.ofNullable(languageCode);
            return this;
        }

        /**
         * <p>Language code for Inworld TTS synthesis</p>
         */
        @java.lang.Override
        @JsonSetter(value = "languageCode", nulls = Nulls.SKIP)
        public _FinalStage languageCode(Optional<FallbackInworldVoiceLanguageCode> languageCode) {
            this.languageCode = languageCode;
            return this;
        }

        /**
         * <p>This is the model that will be used.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        public _FinalStage model(String model) {
            this.model = Optional.ofNullable(model);
            return this;
        }

        /**
         * <p>This is the model that will be used.</p>
         */
        @java.lang.Override
        @JsonSetter(value = "model", nulls = Nulls.SKIP)
        public _FinalStage model(Optional<String> model) {
            this.model = model;
            return this;
        }

        /**
         * <p>This is the flag to toggle voice caching for the assistant.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        public _FinalStage cachingEnabled(Boolean cachingEnabled) {
            this.cachingEnabled = Optional.ofNullable(cachingEnabled);
            return this;
        }

        /**
         * <p>This is the flag to toggle voice caching for the assistant.</p>
         */
        @java.lang.Override
        @JsonSetter(value = "cachingEnabled", nulls = Nulls.SKIP)
        public _FinalStage cachingEnabled(Optional<Boolean> cachingEnabled) {
            this.cachingEnabled = cachingEnabled;
            return this;
        }

        @java.lang.Override
        public FallbackInworldVoice build() {
            return new FallbackInworldVoice(
                    cachingEnabled, voiceId, model, languageCode, chunkPlan, additionalProperties);
        }
    }
}
