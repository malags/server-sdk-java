/**
 * This file was auto-generated by Fern from our API Definition.
 */
package com.vapi.api.types;

import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.annotation.Nulls;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.vapi.api.core.ObjectMappers;
import java.util.HashMap;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import org.jetbrains.annotations.NotNull;

@JsonInclude(JsonInclude.Include.NON_ABSENT)
@JsonDeserialize(builder = Edge.Builder.class)
public final class Edge {
    private final Optional<AiEdgeCondition> condition;

    private final String from;

    private final String to;

    private final Optional<Map<String, Object>> metadata;

    private final Map<String, Object> additionalProperties;

    private Edge(
            Optional<AiEdgeCondition> condition,
            String from,
            String to,
            Optional<Map<String, Object>> metadata,
            Map<String, Object> additionalProperties) {
        this.condition = condition;
        this.from = from;
        this.to = to;
        this.metadata = metadata;
        this.additionalProperties = additionalProperties;
    }

    @JsonProperty("condition")
    public Optional<AiEdgeCondition> getCondition() {
        return condition;
    }

    @JsonProperty("from")
    public String getFrom() {
        return from;
    }

    @JsonProperty("to")
    public String getTo() {
        return to;
    }

    /**
     * @return This is for metadata you want to store on the edge.
     */
    @JsonProperty("metadata")
    public Optional<Map<String, Object>> getMetadata() {
        return metadata;
    }

    @java.lang.Override
    public boolean equals(Object other) {
        if (this == other) return true;
        return other instanceof Edge && equalTo((Edge) other);
    }

    @JsonAnyGetter
    public Map<String, Object> getAdditionalProperties() {
        return this.additionalProperties;
    }

    private boolean equalTo(Edge other) {
        return condition.equals(other.condition)
                && from.equals(other.from)
                && to.equals(other.to)
                && metadata.equals(other.metadata);
    }

    @java.lang.Override
    public int hashCode() {
        return Objects.hash(this.condition, this.from, this.to, this.metadata);
    }

    @java.lang.Override
    public String toString() {
        return ObjectMappers.stringify(this);
    }

    public static FromStage builder() {
        return new Builder();
    }

    public interface FromStage {
        ToStage from(@NotNull String from);

        Builder from(Edge other);
    }

    public interface ToStage {
        _FinalStage to(@NotNull String to);
    }

    public interface _FinalStage {
        Edge build();

        _FinalStage condition(Optional<AiEdgeCondition> condition);

        _FinalStage condition(AiEdgeCondition condition);

        /**
         * <p>This is for metadata you want to store on the edge.</p>
         */
        _FinalStage metadata(Optional<Map<String, Object>> metadata);

        _FinalStage metadata(Map<String, Object> metadata);
    }

    @JsonIgnoreProperties(ignoreUnknown = true)
    public static final class Builder implements FromStage, ToStage, _FinalStage {
        private String from;

        private String to;

        private Optional<Map<String, Object>> metadata = Optional.empty();

        private Optional<AiEdgeCondition> condition = Optional.empty();

        @JsonAnySetter
        private Map<String, Object> additionalProperties = new HashMap<>();

        private Builder() {}

        @java.lang.Override
        public Builder from(Edge other) {
            condition(other.getCondition());
            from(other.getFrom());
            to(other.getTo());
            metadata(other.getMetadata());
            return this;
        }

        @java.lang.Override
        @JsonSetter("from")
        public ToStage from(@NotNull String from) {
            this.from = Objects.requireNonNull(from, "from must not be null");
            return this;
        }

        @java.lang.Override
        @JsonSetter("to")
        public _FinalStage to(@NotNull String to) {
            this.to = Objects.requireNonNull(to, "to must not be null");
            return this;
        }

        /**
         * <p>This is for metadata you want to store on the edge.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        public _FinalStage metadata(Map<String, Object> metadata) {
            this.metadata = Optional.ofNullable(metadata);
            return this;
        }

        /**
         * <p>This is for metadata you want to store on the edge.</p>
         */
        @java.lang.Override
        @JsonSetter(value = "metadata", nulls = Nulls.SKIP)
        public _FinalStage metadata(Optional<Map<String, Object>> metadata) {
            this.metadata = metadata;
            return this;
        }

        @java.lang.Override
        public _FinalStage condition(AiEdgeCondition condition) {
            this.condition = Optional.ofNullable(condition);
            return this;
        }

        @java.lang.Override
        @JsonSetter(value = "condition", nulls = Nulls.SKIP)
        public _FinalStage condition(Optional<AiEdgeCondition> condition) {
            this.condition = condition;
            return this;
        }

        @java.lang.Override
        public Edge build() {
            return new Edge(condition, from, to, metadata, additionalProperties);
        }
    }
}
