/**
 * This file was auto-generated by Fern from our API Definition.
 */
package com.vapi.api.types;

import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.vapi.api.core.ObjectMappers;
import java.util.HashMap;
import java.util.Map;
import java.util.Objects;
import org.jetbrains.annotations.NotNull;

@JsonInclude(JsonInclude.Include.NON_ABSENT)
@JsonDeserialize(builder = TestSuiteTestScorerAi.Builder.class)
public final class TestSuiteTestScorerAi {
    private final String rubric;

    private final Map<String, Object> additionalProperties;

    private TestSuiteTestScorerAi(String rubric, Map<String, Object> additionalProperties) {
        this.rubric = rubric;
        this.additionalProperties = additionalProperties;
    }

    /**
     * @return This is the type of the scorer, which must be AI.
     */
    @JsonProperty("type")
    public String getType() {
        return "ai";
    }

    /**
     * @return This is the rubric used by the AI scorer.
     */
    @JsonProperty("rubric")
    public String getRubric() {
        return rubric;
    }

    @java.lang.Override
    public boolean equals(Object other) {
        if (this == other) return true;
        return other instanceof TestSuiteTestScorerAi && equalTo((TestSuiteTestScorerAi) other);
    }

    @JsonAnyGetter
    public Map<String, Object> getAdditionalProperties() {
        return this.additionalProperties;
    }

    private boolean equalTo(TestSuiteTestScorerAi other) {
        return rubric.equals(other.rubric);
    }

    @java.lang.Override
    public int hashCode() {
        return Objects.hash(this.rubric);
    }

    @java.lang.Override
    public String toString() {
        return ObjectMappers.stringify(this);
    }

    public static RubricStage builder() {
        return new Builder();
    }

    public interface RubricStage {
        /**
         * <p>This is the rubric used by the AI scorer.</p>
         */
        _FinalStage rubric(@NotNull String rubric);

        Builder from(TestSuiteTestScorerAi other);
    }

    public interface _FinalStage {
        TestSuiteTestScorerAi build();
    }

    @JsonIgnoreProperties(ignoreUnknown = true)
    public static final class Builder implements RubricStage, _FinalStage {
        private String rubric;

        @JsonAnySetter
        private Map<String, Object> additionalProperties = new HashMap<>();

        private Builder() {}

        @java.lang.Override
        public Builder from(TestSuiteTestScorerAi other) {
            rubric(other.getRubric());
            return this;
        }

        /**
         * <p>This is the rubric used by the AI scorer.</p>
         * <p>This is the rubric used by the AI scorer.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        @JsonSetter("rubric")
        public _FinalStage rubric(@NotNull String rubric) {
            this.rubric = Objects.requireNonNull(rubric, "rubric must not be null");
            return this;
        }

        @java.lang.Override
        public TestSuiteTestScorerAi build() {
            return new TestSuiteTestScorerAi(rubric, additionalProperties);
        }
    }
}
