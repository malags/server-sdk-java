/**
 * This file was auto-generated by Fern from our API Definition.
 */
package com.vapi.api.types;

import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.annotation.Nulls;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.vapi.api.core.ObjectMappers;
import java.util.HashMap;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;

@JsonInclude(JsonInclude.Include.NON_ABSENT)
@JsonDeserialize(builder = UpdateS3CredentialDto.Builder.class)
public final class UpdateS3CredentialDto {
    private final Optional<String> awsAccessKeyId;

    private final Optional<String> awsSecretAccessKey;

    private final Optional<String> region;

    private final Optional<String> s3BucketName;

    private final Optional<String> s3PathPrefix;

    private final Optional<Double> fallbackIndex;

    private final Optional<String> name;

    private final Map<String, Object> additionalProperties;

    private UpdateS3CredentialDto(
            Optional<String> awsAccessKeyId,
            Optional<String> awsSecretAccessKey,
            Optional<String> region,
            Optional<String> s3BucketName,
            Optional<String> s3PathPrefix,
            Optional<Double> fallbackIndex,
            Optional<String> name,
            Map<String, Object> additionalProperties) {
        this.awsAccessKeyId = awsAccessKeyId;
        this.awsSecretAccessKey = awsSecretAccessKey;
        this.region = region;
        this.s3BucketName = s3BucketName;
        this.s3PathPrefix = s3PathPrefix;
        this.fallbackIndex = fallbackIndex;
        this.name = name;
        this.additionalProperties = additionalProperties;
    }

    /**
     * @return AWS access key ID.
     */
    @JsonProperty("awsAccessKeyId")
    public Optional<String> getAwsAccessKeyId() {
        return awsAccessKeyId;
    }

    /**
     * @return AWS access key secret. This is not returned in the API.
     */
    @JsonProperty("awsSecretAccessKey")
    public Optional<String> getAwsSecretAccessKey() {
        return awsSecretAccessKey;
    }

    /**
     * @return AWS region in which the S3 bucket is located.
     */
    @JsonProperty("region")
    public Optional<String> getRegion() {
        return region;
    }

    /**
     * @return AWS S3 bucket name.
     */
    @JsonProperty("s3BucketName")
    public Optional<String> getS3BucketName() {
        return s3BucketName;
    }

    /**
     * @return The path prefix for the uploaded recording. Ex. &quot;recordings/&quot;
     */
    @JsonProperty("s3PathPrefix")
    public Optional<String> getS3PathPrefix() {
        return s3PathPrefix;
    }

    /**
     * @return This is the order in which this storage provider is tried during upload retries. Lower numbers are tried first in increasing order.
     */
    @JsonProperty("fallbackIndex")
    public Optional<Double> getFallbackIndex() {
        return fallbackIndex;
    }

    /**
     * @return This is the name of credential. This is just for your reference.
     */
    @JsonProperty("name")
    public Optional<String> getName() {
        return name;
    }

    @java.lang.Override
    public boolean equals(Object other) {
        if (this == other) return true;
        return other instanceof UpdateS3CredentialDto && equalTo((UpdateS3CredentialDto) other);
    }

    @JsonAnyGetter
    public Map<String, Object> getAdditionalProperties() {
        return this.additionalProperties;
    }

    private boolean equalTo(UpdateS3CredentialDto other) {
        return awsAccessKeyId.equals(other.awsAccessKeyId)
                && awsSecretAccessKey.equals(other.awsSecretAccessKey)
                && region.equals(other.region)
                && s3BucketName.equals(other.s3BucketName)
                && s3PathPrefix.equals(other.s3PathPrefix)
                && fallbackIndex.equals(other.fallbackIndex)
                && name.equals(other.name);
    }

    @java.lang.Override
    public int hashCode() {
        return Objects.hash(
                this.awsAccessKeyId,
                this.awsSecretAccessKey,
                this.region,
                this.s3BucketName,
                this.s3PathPrefix,
                this.fallbackIndex,
                this.name);
    }

    @java.lang.Override
    public String toString() {
        return ObjectMappers.stringify(this);
    }

    public static Builder builder() {
        return new Builder();
    }

    @JsonIgnoreProperties(ignoreUnknown = true)
    public static final class Builder {
        private Optional<String> awsAccessKeyId = Optional.empty();

        private Optional<String> awsSecretAccessKey = Optional.empty();

        private Optional<String> region = Optional.empty();

        private Optional<String> s3BucketName = Optional.empty();

        private Optional<String> s3PathPrefix = Optional.empty();

        private Optional<Double> fallbackIndex = Optional.empty();

        private Optional<String> name = Optional.empty();

        @JsonAnySetter
        private Map<String, Object> additionalProperties = new HashMap<>();

        private Builder() {}

        public Builder from(UpdateS3CredentialDto other) {
            awsAccessKeyId(other.getAwsAccessKeyId());
            awsSecretAccessKey(other.getAwsSecretAccessKey());
            region(other.getRegion());
            s3BucketName(other.getS3BucketName());
            s3PathPrefix(other.getS3PathPrefix());
            fallbackIndex(other.getFallbackIndex());
            name(other.getName());
            return this;
        }

        /**
         * <p>AWS access key ID.</p>
         */
        @JsonSetter(value = "awsAccessKeyId", nulls = Nulls.SKIP)
        public Builder awsAccessKeyId(Optional<String> awsAccessKeyId) {
            this.awsAccessKeyId = awsAccessKeyId;
            return this;
        }

        public Builder awsAccessKeyId(String awsAccessKeyId) {
            this.awsAccessKeyId = Optional.ofNullable(awsAccessKeyId);
            return this;
        }

        /**
         * <p>AWS access key secret. This is not returned in the API.</p>
         */
        @JsonSetter(value = "awsSecretAccessKey", nulls = Nulls.SKIP)
        public Builder awsSecretAccessKey(Optional<String> awsSecretAccessKey) {
            this.awsSecretAccessKey = awsSecretAccessKey;
            return this;
        }

        public Builder awsSecretAccessKey(String awsSecretAccessKey) {
            this.awsSecretAccessKey = Optional.ofNullable(awsSecretAccessKey);
            return this;
        }

        /**
         * <p>AWS region in which the S3 bucket is located.</p>
         */
        @JsonSetter(value = "region", nulls = Nulls.SKIP)
        public Builder region(Optional<String> region) {
            this.region = region;
            return this;
        }

        public Builder region(String region) {
            this.region = Optional.ofNullable(region);
            return this;
        }

        /**
         * <p>AWS S3 bucket name.</p>
         */
        @JsonSetter(value = "s3BucketName", nulls = Nulls.SKIP)
        public Builder s3BucketName(Optional<String> s3BucketName) {
            this.s3BucketName = s3BucketName;
            return this;
        }

        public Builder s3BucketName(String s3BucketName) {
            this.s3BucketName = Optional.ofNullable(s3BucketName);
            return this;
        }

        /**
         * <p>The path prefix for the uploaded recording. Ex. &quot;recordings/&quot;</p>
         */
        @JsonSetter(value = "s3PathPrefix", nulls = Nulls.SKIP)
        public Builder s3PathPrefix(Optional<String> s3PathPrefix) {
            this.s3PathPrefix = s3PathPrefix;
            return this;
        }

        public Builder s3PathPrefix(String s3PathPrefix) {
            this.s3PathPrefix = Optional.ofNullable(s3PathPrefix);
            return this;
        }

        /**
         * <p>This is the order in which this storage provider is tried during upload retries. Lower numbers are tried first in increasing order.</p>
         */
        @JsonSetter(value = "fallbackIndex", nulls = Nulls.SKIP)
        public Builder fallbackIndex(Optional<Double> fallbackIndex) {
            this.fallbackIndex = fallbackIndex;
            return this;
        }

        public Builder fallbackIndex(Double fallbackIndex) {
            this.fallbackIndex = Optional.ofNullable(fallbackIndex);
            return this;
        }

        /**
         * <p>This is the name of credential. This is just for your reference.</p>
         */
        @JsonSetter(value = "name", nulls = Nulls.SKIP)
        public Builder name(Optional<String> name) {
            this.name = name;
            return this;
        }

        public Builder name(String name) {
            this.name = Optional.ofNullable(name);
            return this;
        }

        public UpdateS3CredentialDto build() {
            return new UpdateS3CredentialDto(
                    awsAccessKeyId,
                    awsSecretAccessKey,
                    region,
                    s3BucketName,
                    s3PathPrefix,
                    fallbackIndex,
                    name,
                    additionalProperties);
        }
    }
}
