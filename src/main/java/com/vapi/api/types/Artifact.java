/**
 * This file was auto-generated by Fern from our API Definition.
 */
package com.vapi.api.types;

import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.annotation.Nulls;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.vapi.api.core.ObjectMappers;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;

@JsonInclude(JsonInclude.Include.NON_ABSENT)
@JsonDeserialize(builder = Artifact.Builder.class)
public final class Artifact {
    private final Optional<List<ArtifactMessagesItem>> messages;

    private final Optional<List<OpenAiMessage>> messagesOpenAiFormatted;

    private final Optional<String> recordingUrl;

    private final Optional<String> stereoRecordingUrl;

    private final Optional<String> videoRecordingUrl;

    private final Optional<Double> videoRecordingStartDelaySeconds;

    private final Optional<Recording> recording;

    private final Optional<String> transcript;

    private final Optional<String> pcapUrl;

    private final Optional<List<NodeArtifact>> nodes;

    private final Optional<Map<String, Object>> variableValues;

    private final Map<String, Object> additionalProperties;

    private Artifact(
            Optional<List<ArtifactMessagesItem>> messages,
            Optional<List<OpenAiMessage>> messagesOpenAiFormatted,
            Optional<String> recordingUrl,
            Optional<String> stereoRecordingUrl,
            Optional<String> videoRecordingUrl,
            Optional<Double> videoRecordingStartDelaySeconds,
            Optional<Recording> recording,
            Optional<String> transcript,
            Optional<String> pcapUrl,
            Optional<List<NodeArtifact>> nodes,
            Optional<Map<String, Object>> variableValues,
            Map<String, Object> additionalProperties) {
        this.messages = messages;
        this.messagesOpenAiFormatted = messagesOpenAiFormatted;
        this.recordingUrl = recordingUrl;
        this.stereoRecordingUrl = stereoRecordingUrl;
        this.videoRecordingUrl = videoRecordingUrl;
        this.videoRecordingStartDelaySeconds = videoRecordingStartDelaySeconds;
        this.recording = recording;
        this.transcript = transcript;
        this.pcapUrl = pcapUrl;
        this.nodes = nodes;
        this.variableValues = variableValues;
        this.additionalProperties = additionalProperties;
    }

    /**
     * @return These are the messages that were spoken during the call.
     */
    @JsonProperty("messages")
    public Optional<List<ArtifactMessagesItem>> getMessages() {
        return messages;
    }

    /**
     * @return These are the messages that were spoken during the call, formatted for OpenAI.
     */
    @JsonProperty("messagesOpenAIFormatted")
    public Optional<List<OpenAiMessage>> getMessagesOpenAiFormatted() {
        return messagesOpenAiFormatted;
    }

    /**
     * @return This is the recording url for the call. To enable, set <code>assistant.artifactPlan.recordingEnabled</code>.
     */
    @JsonProperty("recordingUrl")
    public Optional<String> getRecordingUrl() {
        return recordingUrl;
    }

    /**
     * @return This is the stereo recording url for the call. To enable, set <code>assistant.artifactPlan.recordingEnabled</code>.
     */
    @JsonProperty("stereoRecordingUrl")
    public Optional<String> getStereoRecordingUrl() {
        return stereoRecordingUrl;
    }

    /**
     * @return This is video recording url for the call. To enable, set <code>assistant.artifactPlan.videoRecordingEnabled</code>.
     */
    @JsonProperty("videoRecordingUrl")
    public Optional<String> getVideoRecordingUrl() {
        return videoRecordingUrl;
    }

    /**
     * @return This is video recording start delay in ms. To enable, set <code>assistant.artifactPlan.videoRecordingEnabled</code>. This can be used to align the playback of the recording with artifact.messages timestamps.
     */
    @JsonProperty("videoRecordingStartDelaySeconds")
    public Optional<Double> getVideoRecordingStartDelaySeconds() {
        return videoRecordingStartDelaySeconds;
    }

    /**
     * @return This is the recording url for the call. To enable, set <code>assistant.artifactPlan.recordingEnabled</code>.
     */
    @JsonProperty("recording")
    public Optional<Recording> getRecording() {
        return recording;
    }

    /**
     * @return This is the transcript of the call. This is derived from <code>artifact.messages</code> but provided for convenience.
     */
    @JsonProperty("transcript")
    public Optional<String> getTranscript() {
        return transcript;
    }

    /**
     * @return This is the packet capture url for the call. This is only available for <code>phone</code> type calls where phone number's provider is <code>vapi</code> or <code>byo-phone-number</code>.
     */
    @JsonProperty("pcapUrl")
    public Optional<String> getPcapUrl() {
        return pcapUrl;
    }

    /**
     * @return This is the history of workflow nodes that were executed during the call.
     */
    @JsonProperty("nodes")
    public Optional<List<NodeArtifact>> getNodes() {
        return nodes;
    }

    /**
     * @return These are the variable values at the end of the workflow execution.
     */
    @JsonProperty("variableValues")
    public Optional<Map<String, Object>> getVariableValues() {
        return variableValues;
    }

    @java.lang.Override
    public boolean equals(Object other) {
        if (this == other) return true;
        return other instanceof Artifact && equalTo((Artifact) other);
    }

    @JsonAnyGetter
    public Map<String, Object> getAdditionalProperties() {
        return this.additionalProperties;
    }

    private boolean equalTo(Artifact other) {
        return messages.equals(other.messages)
                && messagesOpenAiFormatted.equals(other.messagesOpenAiFormatted)
                && recordingUrl.equals(other.recordingUrl)
                && stereoRecordingUrl.equals(other.stereoRecordingUrl)
                && videoRecordingUrl.equals(other.videoRecordingUrl)
                && videoRecordingStartDelaySeconds.equals(other.videoRecordingStartDelaySeconds)
                && recording.equals(other.recording)
                && transcript.equals(other.transcript)
                && pcapUrl.equals(other.pcapUrl)
                && nodes.equals(other.nodes)
                && variableValues.equals(other.variableValues);
    }

    @java.lang.Override
    public int hashCode() {
        return Objects.hash(
                this.messages,
                this.messagesOpenAiFormatted,
                this.recordingUrl,
                this.stereoRecordingUrl,
                this.videoRecordingUrl,
                this.videoRecordingStartDelaySeconds,
                this.recording,
                this.transcript,
                this.pcapUrl,
                this.nodes,
                this.variableValues);
    }

    @java.lang.Override
    public String toString() {
        return ObjectMappers.stringify(this);
    }

    public static Builder builder() {
        return new Builder();
    }

    @JsonIgnoreProperties(ignoreUnknown = true)
    public static final class Builder {
        private Optional<List<ArtifactMessagesItem>> messages = Optional.empty();

        private Optional<List<OpenAiMessage>> messagesOpenAiFormatted = Optional.empty();

        private Optional<String> recordingUrl = Optional.empty();

        private Optional<String> stereoRecordingUrl = Optional.empty();

        private Optional<String> videoRecordingUrl = Optional.empty();

        private Optional<Double> videoRecordingStartDelaySeconds = Optional.empty();

        private Optional<Recording> recording = Optional.empty();

        private Optional<String> transcript = Optional.empty();

        private Optional<String> pcapUrl = Optional.empty();

        private Optional<List<NodeArtifact>> nodes = Optional.empty();

        private Optional<Map<String, Object>> variableValues = Optional.empty();

        @JsonAnySetter
        private Map<String, Object> additionalProperties = new HashMap<>();

        private Builder() {}

        public Builder from(Artifact other) {
            messages(other.getMessages());
            messagesOpenAiFormatted(other.getMessagesOpenAiFormatted());
            recordingUrl(other.getRecordingUrl());
            stereoRecordingUrl(other.getStereoRecordingUrl());
            videoRecordingUrl(other.getVideoRecordingUrl());
            videoRecordingStartDelaySeconds(other.getVideoRecordingStartDelaySeconds());
            recording(other.getRecording());
            transcript(other.getTranscript());
            pcapUrl(other.getPcapUrl());
            nodes(other.getNodes());
            variableValues(other.getVariableValues());
            return this;
        }

        /**
         * <p>These are the messages that were spoken during the call.</p>
         */
        @JsonSetter(value = "messages", nulls = Nulls.SKIP)
        public Builder messages(Optional<List<ArtifactMessagesItem>> messages) {
            this.messages = messages;
            return this;
        }

        public Builder messages(List<ArtifactMessagesItem> messages) {
            this.messages = Optional.ofNullable(messages);
            return this;
        }

        /**
         * <p>These are the messages that were spoken during the call, formatted for OpenAI.</p>
         */
        @JsonSetter(value = "messagesOpenAIFormatted", nulls = Nulls.SKIP)
        public Builder messagesOpenAiFormatted(Optional<List<OpenAiMessage>> messagesOpenAiFormatted) {
            this.messagesOpenAiFormatted = messagesOpenAiFormatted;
            return this;
        }

        public Builder messagesOpenAiFormatted(List<OpenAiMessage> messagesOpenAiFormatted) {
            this.messagesOpenAiFormatted = Optional.ofNullable(messagesOpenAiFormatted);
            return this;
        }

        /**
         * <p>This is the recording url for the call. To enable, set <code>assistant.artifactPlan.recordingEnabled</code>.</p>
         */
        @JsonSetter(value = "recordingUrl", nulls = Nulls.SKIP)
        public Builder recordingUrl(Optional<String> recordingUrl) {
            this.recordingUrl = recordingUrl;
            return this;
        }

        public Builder recordingUrl(String recordingUrl) {
            this.recordingUrl = Optional.ofNullable(recordingUrl);
            return this;
        }

        /**
         * <p>This is the stereo recording url for the call. To enable, set <code>assistant.artifactPlan.recordingEnabled</code>.</p>
         */
        @JsonSetter(value = "stereoRecordingUrl", nulls = Nulls.SKIP)
        public Builder stereoRecordingUrl(Optional<String> stereoRecordingUrl) {
            this.stereoRecordingUrl = stereoRecordingUrl;
            return this;
        }

        public Builder stereoRecordingUrl(String stereoRecordingUrl) {
            this.stereoRecordingUrl = Optional.ofNullable(stereoRecordingUrl);
            return this;
        }

        /**
         * <p>This is video recording url for the call. To enable, set <code>assistant.artifactPlan.videoRecordingEnabled</code>.</p>
         */
        @JsonSetter(value = "videoRecordingUrl", nulls = Nulls.SKIP)
        public Builder videoRecordingUrl(Optional<String> videoRecordingUrl) {
            this.videoRecordingUrl = videoRecordingUrl;
            return this;
        }

        public Builder videoRecordingUrl(String videoRecordingUrl) {
            this.videoRecordingUrl = Optional.ofNullable(videoRecordingUrl);
            return this;
        }

        /**
         * <p>This is video recording start delay in ms. To enable, set <code>assistant.artifactPlan.videoRecordingEnabled</code>. This can be used to align the playback of the recording with artifact.messages timestamps.</p>
         */
        @JsonSetter(value = "videoRecordingStartDelaySeconds", nulls = Nulls.SKIP)
        public Builder videoRecordingStartDelaySeconds(Optional<Double> videoRecordingStartDelaySeconds) {
            this.videoRecordingStartDelaySeconds = videoRecordingStartDelaySeconds;
            return this;
        }

        public Builder videoRecordingStartDelaySeconds(Double videoRecordingStartDelaySeconds) {
            this.videoRecordingStartDelaySeconds = Optional.ofNullable(videoRecordingStartDelaySeconds);
            return this;
        }

        /**
         * <p>This is the recording url for the call. To enable, set <code>assistant.artifactPlan.recordingEnabled</code>.</p>
         */
        @JsonSetter(value = "recording", nulls = Nulls.SKIP)
        public Builder recording(Optional<Recording> recording) {
            this.recording = recording;
            return this;
        }

        public Builder recording(Recording recording) {
            this.recording = Optional.ofNullable(recording);
            return this;
        }

        /**
         * <p>This is the transcript of the call. This is derived from <code>artifact.messages</code> but provided for convenience.</p>
         */
        @JsonSetter(value = "transcript", nulls = Nulls.SKIP)
        public Builder transcript(Optional<String> transcript) {
            this.transcript = transcript;
            return this;
        }

        public Builder transcript(String transcript) {
            this.transcript = Optional.ofNullable(transcript);
            return this;
        }

        /**
         * <p>This is the packet capture url for the call. This is only available for <code>phone</code> type calls where phone number's provider is <code>vapi</code> or <code>byo-phone-number</code>.</p>
         */
        @JsonSetter(value = "pcapUrl", nulls = Nulls.SKIP)
        public Builder pcapUrl(Optional<String> pcapUrl) {
            this.pcapUrl = pcapUrl;
            return this;
        }

        public Builder pcapUrl(String pcapUrl) {
            this.pcapUrl = Optional.ofNullable(pcapUrl);
            return this;
        }

        /**
         * <p>This is the history of workflow nodes that were executed during the call.</p>
         */
        @JsonSetter(value = "nodes", nulls = Nulls.SKIP)
        public Builder nodes(Optional<List<NodeArtifact>> nodes) {
            this.nodes = nodes;
            return this;
        }

        public Builder nodes(List<NodeArtifact> nodes) {
            this.nodes = Optional.ofNullable(nodes);
            return this;
        }

        /**
         * <p>These are the variable values at the end of the workflow execution.</p>
         */
        @JsonSetter(value = "variableValues", nulls = Nulls.SKIP)
        public Builder variableValues(Optional<Map<String, Object>> variableValues) {
            this.variableValues = variableValues;
            return this;
        }

        public Builder variableValues(Map<String, Object> variableValues) {
            this.variableValues = Optional.ofNullable(variableValues);
            return this;
        }

        public Artifact build() {
            return new Artifact(
                    messages,
                    messagesOpenAiFormatted,
                    recordingUrl,
                    stereoRecordingUrl,
                    videoRecordingUrl,
                    videoRecordingStartDelaySeconds,
                    recording,
                    transcript,
                    pcapUrl,
                    nodes,
                    variableValues,
                    additionalProperties);
        }
    }
}
