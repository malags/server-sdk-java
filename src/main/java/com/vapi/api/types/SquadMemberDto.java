/**
 * This file was auto-generated by Fern from our API Definition.
 */
package com.vapi.api.types;

import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.annotation.Nulls;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.vapi.api.core.Nullable;
import com.vapi.api.core.NullableNonemptyFilter;
import com.vapi.api.core.ObjectMappers;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;

@JsonInclude(JsonInclude.Include.NON_ABSENT)
@JsonDeserialize(builder = SquadMemberDto.Builder.class)
public final class SquadMemberDto {
    private final Optional<String> assistantId;

    private final Optional<CreateAssistantDto> assistant;

    private final Optional<AssistantOverrides> assistantOverrides;

    private final Optional<List<TransferDestinationAssistant>> assistantDestinations;

    private final Map<String, Object> additionalProperties;

    private SquadMemberDto(
            Optional<String> assistantId,
            Optional<CreateAssistantDto> assistant,
            Optional<AssistantOverrides> assistantOverrides,
            Optional<List<TransferDestinationAssistant>> assistantDestinations,
            Map<String, Object> additionalProperties) {
        this.assistantId = assistantId;
        this.assistant = assistant;
        this.assistantOverrides = assistantOverrides;
        this.assistantDestinations = assistantDestinations;
        this.additionalProperties = additionalProperties;
    }

    /**
     * @return This is the assistant that will be used for the call. To use a transient assistant, use <code>assistant</code> instead.
     */
    @JsonIgnore
    public Optional<String> getAssistantId() {
        if (assistantId == null) {
            return Optional.empty();
        }
        return assistantId;
    }

    /**
     * @return This is the assistant that will be used for the call. To use an existing assistant, use <code>assistantId</code> instead.
     */
    @JsonProperty("assistant")
    public Optional<CreateAssistantDto> getAssistant() {
        return assistant;
    }

    /**
     * @return This can be used to override the assistant's settings and provide values for it's template variables.
     */
    @JsonProperty("assistantOverrides")
    public Optional<AssistantOverrides> getAssistantOverrides() {
        return assistantOverrides;
    }

    /**
     * @return These are the others assistants that this assistant can transfer to.
     * <p>If the assistant already has transfer call tool, these destinations are just appended to existing ones.</p>
     */
    @JsonProperty("assistantDestinations")
    public Optional<List<TransferDestinationAssistant>> getAssistantDestinations() {
        return assistantDestinations;
    }

    @JsonInclude(value = JsonInclude.Include.CUSTOM, valueFilter = NullableNonemptyFilter.class)
    @JsonProperty("assistantId")
    private Optional<String> _getAssistantId() {
        return assistantId;
    }

    @java.lang.Override
    public boolean equals(Object other) {
        if (this == other) return true;
        return other instanceof SquadMemberDto && equalTo((SquadMemberDto) other);
    }

    @JsonAnyGetter
    public Map<String, Object> getAdditionalProperties() {
        return this.additionalProperties;
    }

    private boolean equalTo(SquadMemberDto other) {
        return assistantId.equals(other.assistantId)
                && assistant.equals(other.assistant)
                && assistantOverrides.equals(other.assistantOverrides)
                && assistantDestinations.equals(other.assistantDestinations);
    }

    @java.lang.Override
    public int hashCode() {
        return Objects.hash(this.assistantId, this.assistant, this.assistantOverrides, this.assistantDestinations);
    }

    @java.lang.Override
    public String toString() {
        return ObjectMappers.stringify(this);
    }

    public static Builder builder() {
        return new Builder();
    }

    @JsonIgnoreProperties(ignoreUnknown = true)
    public static final class Builder {
        private Optional<String> assistantId = Optional.empty();

        private Optional<CreateAssistantDto> assistant = Optional.empty();

        private Optional<AssistantOverrides> assistantOverrides = Optional.empty();

        private Optional<List<TransferDestinationAssistant>> assistantDestinations = Optional.empty();

        @JsonAnySetter
        private Map<String, Object> additionalProperties = new HashMap<>();

        private Builder() {}

        public Builder from(SquadMemberDto other) {
            assistantId(other.getAssistantId());
            assistant(other.getAssistant());
            assistantOverrides(other.getAssistantOverrides());
            assistantDestinations(other.getAssistantDestinations());
            return this;
        }

        /**
         * <p>This is the assistant that will be used for the call. To use a transient assistant, use <code>assistant</code> instead.</p>
         */
        @JsonSetter(value = "assistantId", nulls = Nulls.SKIP)
        public Builder assistantId(Optional<String> assistantId) {
            this.assistantId = assistantId;
            return this;
        }

        public Builder assistantId(String assistantId) {
            this.assistantId = Optional.ofNullable(assistantId);
            return this;
        }

        public Builder assistantId(Nullable<String> assistantId) {
            if (assistantId.isNull()) {
                this.assistantId = null;
            } else if (assistantId.isEmpty()) {
                this.assistantId = Optional.empty();
            } else {
                this.assistantId = Optional.of(assistantId.get());
            }
            return this;
        }

        /**
         * <p>This is the assistant that will be used for the call. To use an existing assistant, use <code>assistantId</code> instead.</p>
         */
        @JsonSetter(value = "assistant", nulls = Nulls.SKIP)
        public Builder assistant(Optional<CreateAssistantDto> assistant) {
            this.assistant = assistant;
            return this;
        }

        public Builder assistant(CreateAssistantDto assistant) {
            this.assistant = Optional.ofNullable(assistant);
            return this;
        }

        /**
         * <p>This can be used to override the assistant's settings and provide values for it's template variables.</p>
         */
        @JsonSetter(value = "assistantOverrides", nulls = Nulls.SKIP)
        public Builder assistantOverrides(Optional<AssistantOverrides> assistantOverrides) {
            this.assistantOverrides = assistantOverrides;
            return this;
        }

        public Builder assistantOverrides(AssistantOverrides assistantOverrides) {
            this.assistantOverrides = Optional.ofNullable(assistantOverrides);
            return this;
        }

        /**
         * <p>These are the others assistants that this assistant can transfer to.</p>
         * <p>If the assistant already has transfer call tool, these destinations are just appended to existing ones.</p>
         */
        @JsonSetter(value = "assistantDestinations", nulls = Nulls.SKIP)
        public Builder assistantDestinations(Optional<List<TransferDestinationAssistant>> assistantDestinations) {
            this.assistantDestinations = assistantDestinations;
            return this;
        }

        public Builder assistantDestinations(List<TransferDestinationAssistant> assistantDestinations) {
            this.assistantDestinations = Optional.ofNullable(assistantDestinations);
            return this;
        }

        public SquadMemberDto build() {
            return new SquadMemberDto(
                    assistantId, assistant, assistantOverrides, assistantDestinations, additionalProperties);
        }
    }
}
