/**
 * This file was auto-generated by Fern from our API Definition.
 */
package com.vapi.api.types;

import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.annotation.Nulls;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.vapi.api.core.ObjectMappers;
import java.util.HashMap;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;

@JsonInclude(JsonInclude.Include.NON_ABSENT)
@JsonDeserialize(builder = CreateCustomerDto.Builder.class)
public final class CreateCustomerDto {
    private final Optional<Boolean> numberE164CheckEnabled;

    private final Optional<String> extension;

    private final Optional<AssistantOverrides> assistantOverrides;

    private final Optional<String> number;

    private final Optional<String> sipUri;

    private final Optional<String> name;

    private final Optional<String> email;

    private final Optional<String> externalId;

    private final Map<String, Object> additionalProperties;

    private CreateCustomerDto(
            Optional<Boolean> numberE164CheckEnabled,
            Optional<String> extension,
            Optional<AssistantOverrides> assistantOverrides,
            Optional<String> number,
            Optional<String> sipUri,
            Optional<String> name,
            Optional<String> email,
            Optional<String> externalId,
            Map<String, Object> additionalProperties) {
        this.numberE164CheckEnabled = numberE164CheckEnabled;
        this.extension = extension;
        this.assistantOverrides = assistantOverrides;
        this.number = number;
        this.sipUri = sipUri;
        this.name = name;
        this.email = email;
        this.externalId = externalId;
        this.additionalProperties = additionalProperties;
    }

    /**
     * @return This is the flag to toggle the E164 check for the <code>number</code> field. This is an advanced property which should be used if you know your use case requires it.
     * <p>Use cases:</p>
     * <ul>
     * <li><code>false</code>: To allow non-E164 numbers like <code>+001234567890</code>, <code>1234</code>, or <code>abc</code>. This is useful for dialing out to non-E164 numbers on your SIP trunks.</li>
     * <li><code>true</code> (default): To allow only E164 numbers like <code>+14155551234</code>. This is standard for PSTN calls.</li>
     * </ul>
     * <p>If <code>false</code>, the <code>number</code> is still required to only contain alphanumeric characters (regex: <code>/^\+?[a-zA-Z0-9]+$/</code>).</p>
     * <p>@default true (E164 check is enabled)</p>
     */
    @JsonProperty("numberE164CheckEnabled")
    public Optional<Boolean> getNumberE164CheckEnabled() {
        return numberE164CheckEnabled;
    }

    /**
     * @return This is the extension that will be dialed after the call is answered.
     */
    @JsonProperty("extension")
    public Optional<String> getExtension() {
        return extension;
    }

    /**
     * @return These are the overrides for the assistant's settings and template variables specific to this customer.
     * This allows customization of the assistant's behavior for individual customers in batch calls.
     */
    @JsonProperty("assistantOverrides")
    public Optional<AssistantOverrides> getAssistantOverrides() {
        return assistantOverrides;
    }

    /**
     * @return This is the number of the customer.
     */
    @JsonProperty("number")
    public Optional<String> getNumber() {
        return number;
    }

    /**
     * @return This is the SIP URI of the customer.
     */
    @JsonProperty("sipUri")
    public Optional<String> getSipUri() {
        return sipUri;
    }

    /**
     * @return This is the name of the customer. This is just for your own reference.
     * <p>For SIP inbound calls, this is extracted from the <code>From</code> SIP header with format <code>&quot;Display Name&quot; &lt;sip:username@domain&gt;</code>.</p>
     */
    @JsonProperty("name")
    public Optional<String> getName() {
        return name;
    }

    /**
     * @return This is the email of the customer.
     */
    @JsonProperty("email")
    public Optional<String> getEmail() {
        return email;
    }

    /**
     * @return This is the external ID of the customer.
     */
    @JsonProperty("externalId")
    public Optional<String> getExternalId() {
        return externalId;
    }

    @java.lang.Override
    public boolean equals(Object other) {
        if (this == other) return true;
        return other instanceof CreateCustomerDto && equalTo((CreateCustomerDto) other);
    }

    @JsonAnyGetter
    public Map<String, Object> getAdditionalProperties() {
        return this.additionalProperties;
    }

    private boolean equalTo(CreateCustomerDto other) {
        return numberE164CheckEnabled.equals(other.numberE164CheckEnabled)
                && extension.equals(other.extension)
                && assistantOverrides.equals(other.assistantOverrides)
                && number.equals(other.number)
                && sipUri.equals(other.sipUri)
                && name.equals(other.name)
                && email.equals(other.email)
                && externalId.equals(other.externalId);
    }

    @java.lang.Override
    public int hashCode() {
        return Objects.hash(
                this.numberE164CheckEnabled,
                this.extension,
                this.assistantOverrides,
                this.number,
                this.sipUri,
                this.name,
                this.email,
                this.externalId);
    }

    @java.lang.Override
    public String toString() {
        return ObjectMappers.stringify(this);
    }

    public static Builder builder() {
        return new Builder();
    }

    @JsonIgnoreProperties(ignoreUnknown = true)
    public static final class Builder {
        private Optional<Boolean> numberE164CheckEnabled = Optional.empty();

        private Optional<String> extension = Optional.empty();

        private Optional<AssistantOverrides> assistantOverrides = Optional.empty();

        private Optional<String> number = Optional.empty();

        private Optional<String> sipUri = Optional.empty();

        private Optional<String> name = Optional.empty();

        private Optional<String> email = Optional.empty();

        private Optional<String> externalId = Optional.empty();

        @JsonAnySetter
        private Map<String, Object> additionalProperties = new HashMap<>();

        private Builder() {}

        public Builder from(CreateCustomerDto other) {
            numberE164CheckEnabled(other.getNumberE164CheckEnabled());
            extension(other.getExtension());
            assistantOverrides(other.getAssistantOverrides());
            number(other.getNumber());
            sipUri(other.getSipUri());
            name(other.getName());
            email(other.getEmail());
            externalId(other.getExternalId());
            return this;
        }

        /**
         * <p>This is the flag to toggle the E164 check for the <code>number</code> field. This is an advanced property which should be used if you know your use case requires it.</p>
         * <p>Use cases:</p>
         * <ul>
         * <li><code>false</code>: To allow non-E164 numbers like <code>+001234567890</code>, <code>1234</code>, or <code>abc</code>. This is useful for dialing out to non-E164 numbers on your SIP trunks.</li>
         * <li><code>true</code> (default): To allow only E164 numbers like <code>+14155551234</code>. This is standard for PSTN calls.</li>
         * </ul>
         * <p>If <code>false</code>, the <code>number</code> is still required to only contain alphanumeric characters (regex: <code>/^\+?[a-zA-Z0-9]+$/</code>).</p>
         * <p>@default true (E164 check is enabled)</p>
         */
        @JsonSetter(value = "numberE164CheckEnabled", nulls = Nulls.SKIP)
        public Builder numberE164CheckEnabled(Optional<Boolean> numberE164CheckEnabled) {
            this.numberE164CheckEnabled = numberE164CheckEnabled;
            return this;
        }

        public Builder numberE164CheckEnabled(Boolean numberE164CheckEnabled) {
            this.numberE164CheckEnabled = Optional.ofNullable(numberE164CheckEnabled);
            return this;
        }

        /**
         * <p>This is the extension that will be dialed after the call is answered.</p>
         */
        @JsonSetter(value = "extension", nulls = Nulls.SKIP)
        public Builder extension(Optional<String> extension) {
            this.extension = extension;
            return this;
        }

        public Builder extension(String extension) {
            this.extension = Optional.ofNullable(extension);
            return this;
        }

        /**
         * <p>These are the overrides for the assistant's settings and template variables specific to this customer.
         * This allows customization of the assistant's behavior for individual customers in batch calls.</p>
         */
        @JsonSetter(value = "assistantOverrides", nulls = Nulls.SKIP)
        public Builder assistantOverrides(Optional<AssistantOverrides> assistantOverrides) {
            this.assistantOverrides = assistantOverrides;
            return this;
        }

        public Builder assistantOverrides(AssistantOverrides assistantOverrides) {
            this.assistantOverrides = Optional.ofNullable(assistantOverrides);
            return this;
        }

        /**
         * <p>This is the number of the customer.</p>
         */
        @JsonSetter(value = "number", nulls = Nulls.SKIP)
        public Builder number(Optional<String> number) {
            this.number = number;
            return this;
        }

        public Builder number(String number) {
            this.number = Optional.ofNullable(number);
            return this;
        }

        /**
         * <p>This is the SIP URI of the customer.</p>
         */
        @JsonSetter(value = "sipUri", nulls = Nulls.SKIP)
        public Builder sipUri(Optional<String> sipUri) {
            this.sipUri = sipUri;
            return this;
        }

        public Builder sipUri(String sipUri) {
            this.sipUri = Optional.ofNullable(sipUri);
            return this;
        }

        /**
         * <p>This is the name of the customer. This is just for your own reference.</p>
         * <p>For SIP inbound calls, this is extracted from the <code>From</code> SIP header with format <code>&quot;Display Name&quot; &lt;sip:username@domain&gt;</code>.</p>
         */
        @JsonSetter(value = "name", nulls = Nulls.SKIP)
        public Builder name(Optional<String> name) {
            this.name = name;
            return this;
        }

        public Builder name(String name) {
            this.name = Optional.ofNullable(name);
            return this;
        }

        /**
         * <p>This is the email of the customer.</p>
         */
        @JsonSetter(value = "email", nulls = Nulls.SKIP)
        public Builder email(Optional<String> email) {
            this.email = email;
            return this;
        }

        public Builder email(String email) {
            this.email = Optional.ofNullable(email);
            return this;
        }

        /**
         * <p>This is the external ID of the customer.</p>
         */
        @JsonSetter(value = "externalId", nulls = Nulls.SKIP)
        public Builder externalId(Optional<String> externalId) {
            this.externalId = externalId;
            return this;
        }

        public Builder externalId(String externalId) {
            this.externalId = Optional.ofNullable(externalId);
            return this;
        }

        public CreateCustomerDto build() {
            return new CreateCustomerDto(
                    numberE164CheckEnabled,
                    extension,
                    assistantOverrides,
                    number,
                    sipUri,
                    name,
                    email,
                    externalId,
                    additionalProperties);
        }
    }
}
