/**
 * This file was auto-generated by Fern from our API Definition.
 */
package com.vapi.api.types;

import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.annotation.Nulls;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.vapi.api.core.ObjectMappers;
import java.util.HashMap;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import org.jetbrains.annotations.NotNull;

@JsonInclude(JsonInclude.Include.NON_ABSENT)
@JsonDeserialize(builder = OpenAiFunction.Builder.class)
public final class OpenAiFunction {
    private final Optional<Boolean> strict;

    private final String name;

    private final Optional<String> description;

    private final Optional<OpenAiFunctionParameters> parameters;

    private final Map<String, Object> additionalProperties;

    private OpenAiFunction(
            Optional<Boolean> strict,
            String name,
            Optional<String> description,
            Optional<OpenAiFunctionParameters> parameters,
            Map<String, Object> additionalProperties) {
        this.strict = strict;
        this.name = name;
        this.description = description;
        this.parameters = parameters;
        this.additionalProperties = additionalProperties;
    }

    /**
     * @return This is a boolean that controls whether to enable strict schema adherence when generating the function call. If set to true, the model will follow the exact schema defined in the parameters field. Only a subset of JSON Schema is supported when strict is true. Learn more about Structured Outputs in the <a href="https://openai.com/index/introducing-structured-outputs-in-the-api/">OpenAI guide</a>.
     * <p>@default false</p>
     */
    @JsonProperty("strict")
    public Optional<Boolean> getStrict() {
        return strict;
    }

    /**
     * @return This is the the name of the function to be called.
     * <p>Must be a-z, A-Z, 0-9, or contain underscores and dashes, with a maximum length of 64.</p>
     */
    @JsonProperty("name")
    public String getName() {
        return name;
    }

    /**
     * @return This is the description of what the function does, used by the AI to choose when and how to call the function.
     */
    @JsonProperty("description")
    public Optional<String> getDescription() {
        return description;
    }

    /**
     * @return These are the parameters the functions accepts, described as a JSON Schema object.
     * <p>See the <a href="https://platform.openai.com/docs/guides/function-calling">OpenAI guide</a> for examples, and the <a href="https://json-schema.org/understanding-json-schema">JSON Schema reference</a> for documentation about the format.</p>
     * <p>Omitting parameters defines a function with an empty parameter list.</p>
     */
    @JsonProperty("parameters")
    public Optional<OpenAiFunctionParameters> getParameters() {
        return parameters;
    }

    @java.lang.Override
    public boolean equals(Object other) {
        if (this == other) return true;
        return other instanceof OpenAiFunction && equalTo((OpenAiFunction) other);
    }

    @JsonAnyGetter
    public Map<String, Object> getAdditionalProperties() {
        return this.additionalProperties;
    }

    private boolean equalTo(OpenAiFunction other) {
        return strict.equals(other.strict)
                && name.equals(other.name)
                && description.equals(other.description)
                && parameters.equals(other.parameters);
    }

    @java.lang.Override
    public int hashCode() {
        return Objects.hash(this.strict, this.name, this.description, this.parameters);
    }

    @java.lang.Override
    public String toString() {
        return ObjectMappers.stringify(this);
    }

    public static NameStage builder() {
        return new Builder();
    }

    public interface NameStage {
        /**
         * <p>This is the the name of the function to be called.</p>
         * <p>Must be a-z, A-Z, 0-9, or contain underscores and dashes, with a maximum length of 64.</p>
         */
        _FinalStage name(@NotNull String name);

        Builder from(OpenAiFunction other);
    }

    public interface _FinalStage {
        OpenAiFunction build();

        /**
         * <p>This is a boolean that controls whether to enable strict schema adherence when generating the function call. If set to true, the model will follow the exact schema defined in the parameters field. Only a subset of JSON Schema is supported when strict is true. Learn more about Structured Outputs in the <a href="https://openai.com/index/introducing-structured-outputs-in-the-api/">OpenAI guide</a>.</p>
         * <p>@default false</p>
         */
        _FinalStage strict(Optional<Boolean> strict);

        _FinalStage strict(Boolean strict);

        /**
         * <p>This is the description of what the function does, used by the AI to choose when and how to call the function.</p>
         */
        _FinalStage description(Optional<String> description);

        _FinalStage description(String description);

        /**
         * <p>These are the parameters the functions accepts, described as a JSON Schema object.</p>
         * <p>See the <a href="https://platform.openai.com/docs/guides/function-calling">OpenAI guide</a> for examples, and the <a href="https://json-schema.org/understanding-json-schema">JSON Schema reference</a> for documentation about the format.</p>
         * <p>Omitting parameters defines a function with an empty parameter list.</p>
         */
        _FinalStage parameters(Optional<OpenAiFunctionParameters> parameters);

        _FinalStage parameters(OpenAiFunctionParameters parameters);
    }

    @JsonIgnoreProperties(ignoreUnknown = true)
    public static final class Builder implements NameStage, _FinalStage {
        private String name;

        private Optional<OpenAiFunctionParameters> parameters = Optional.empty();

        private Optional<String> description = Optional.empty();

        private Optional<Boolean> strict = Optional.empty();

        @JsonAnySetter
        private Map<String, Object> additionalProperties = new HashMap<>();

        private Builder() {}

        @java.lang.Override
        public Builder from(OpenAiFunction other) {
            strict(other.getStrict());
            name(other.getName());
            description(other.getDescription());
            parameters(other.getParameters());
            return this;
        }

        /**
         * <p>This is the the name of the function to be called.</p>
         * <p>Must be a-z, A-Z, 0-9, or contain underscores and dashes, with a maximum length of 64.</p>
         * <p>This is the the name of the function to be called.</p>
         * <p>Must be a-z, A-Z, 0-9, or contain underscores and dashes, with a maximum length of 64.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        @JsonSetter("name")
        public _FinalStage name(@NotNull String name) {
            this.name = Objects.requireNonNull(name, "name must not be null");
            return this;
        }

        /**
         * <p>These are the parameters the functions accepts, described as a JSON Schema object.</p>
         * <p>See the <a href="https://platform.openai.com/docs/guides/function-calling">OpenAI guide</a> for examples, and the <a href="https://json-schema.org/understanding-json-schema">JSON Schema reference</a> for documentation about the format.</p>
         * <p>Omitting parameters defines a function with an empty parameter list.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        public _FinalStage parameters(OpenAiFunctionParameters parameters) {
            this.parameters = Optional.ofNullable(parameters);
            return this;
        }

        /**
         * <p>These are the parameters the functions accepts, described as a JSON Schema object.</p>
         * <p>See the <a href="https://platform.openai.com/docs/guides/function-calling">OpenAI guide</a> for examples, and the <a href="https://json-schema.org/understanding-json-schema">JSON Schema reference</a> for documentation about the format.</p>
         * <p>Omitting parameters defines a function with an empty parameter list.</p>
         */
        @java.lang.Override
        @JsonSetter(value = "parameters", nulls = Nulls.SKIP)
        public _FinalStage parameters(Optional<OpenAiFunctionParameters> parameters) {
            this.parameters = parameters;
            return this;
        }

        /**
         * <p>This is the description of what the function does, used by the AI to choose when and how to call the function.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        public _FinalStage description(String description) {
            this.description = Optional.ofNullable(description);
            return this;
        }

        /**
         * <p>This is the description of what the function does, used by the AI to choose when and how to call the function.</p>
         */
        @java.lang.Override
        @JsonSetter(value = "description", nulls = Nulls.SKIP)
        public _FinalStage description(Optional<String> description) {
            this.description = description;
            return this;
        }

        /**
         * <p>This is a boolean that controls whether to enable strict schema adherence when generating the function call. If set to true, the model will follow the exact schema defined in the parameters field. Only a subset of JSON Schema is supported when strict is true. Learn more about Structured Outputs in the <a href="https://openai.com/index/introducing-structured-outputs-in-the-api/">OpenAI guide</a>.</p>
         * <p>@default false</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        public _FinalStage strict(Boolean strict) {
            this.strict = Optional.ofNullable(strict);
            return this;
        }

        /**
         * <p>This is a boolean that controls whether to enable strict schema adherence when generating the function call. If set to true, the model will follow the exact schema defined in the parameters field. Only a subset of JSON Schema is supported when strict is true. Learn more about Structured Outputs in the <a href="https://openai.com/index/introducing-structured-outputs-in-the-api/">OpenAI guide</a>.</p>
         * <p>@default false</p>
         */
        @java.lang.Override
        @JsonSetter(value = "strict", nulls = Nulls.SKIP)
        public _FinalStage strict(Optional<Boolean> strict) {
            this.strict = strict;
            return this;
        }

        @java.lang.Override
        public OpenAiFunction build() {
            return new OpenAiFunction(strict, name, description, parameters, additionalProperties);
        }
    }
}
