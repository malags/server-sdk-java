/**
 * This file was auto-generated by Fern from our API Definition.
 */
package com.vapi.api.resources.logs.requests;

import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.annotation.Nulls;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.vapi.api.core.Nullable;
import com.vapi.api.core.NullableNonemptyFilter;
import com.vapi.api.core.ObjectMappers;
import com.vapi.api.resources.logs.types.LoggingControllerLogsDeleteQueryRequestType;
import java.util.HashMap;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;

@JsonInclude(JsonInclude.Include.NON_ABSENT)
@JsonDeserialize(builder = LoggingControllerLogsDeleteQueryRequest.Builder.class)
public final class LoggingControllerLogsDeleteQueryRequest {
    private final Optional<LoggingControllerLogsDeleteQueryRequestType> type;

    private final Optional<String> assistantId;

    private final Optional<String> phoneNumberId;

    private final Optional<String> customerId;

    private final Optional<String> squadId;

    private final Optional<String> callId;

    private final Map<String, Object> additionalProperties;

    private LoggingControllerLogsDeleteQueryRequest(
            Optional<LoggingControllerLogsDeleteQueryRequestType> type,
            Optional<String> assistantId,
            Optional<String> phoneNumberId,
            Optional<String> customerId,
            Optional<String> squadId,
            Optional<String> callId,
            Map<String, Object> additionalProperties) {
        this.type = type;
        this.assistantId = assistantId;
        this.phoneNumberId = phoneNumberId;
        this.customerId = customerId;
        this.squadId = squadId;
        this.callId = callId;
        this.additionalProperties = additionalProperties;
    }

    /**
     * @return This is the type of the log.
     */
    @JsonIgnore
    public Optional<LoggingControllerLogsDeleteQueryRequestType> getType() {
        if (type == null) {
            return Optional.empty();
        }
        return type;
    }

    @JsonIgnore
    public Optional<String> getAssistantId() {
        if (assistantId == null) {
            return Optional.empty();
        }
        return assistantId;
    }

    /**
     * @return This is the ID of the phone number.
     */
    @JsonIgnore
    public Optional<String> getPhoneNumberId() {
        if (phoneNumberId == null) {
            return Optional.empty();
        }
        return phoneNumberId;
    }

    /**
     * @return This is the ID of the customer.
     */
    @JsonIgnore
    public Optional<String> getCustomerId() {
        if (customerId == null) {
            return Optional.empty();
        }
        return customerId;
    }

    /**
     * @return This is the ID of the squad.
     */
    @JsonIgnore
    public Optional<String> getSquadId() {
        if (squadId == null) {
            return Optional.empty();
        }
        return squadId;
    }

    /**
     * @return This is the ID of the call.
     */
    @JsonIgnore
    public Optional<String> getCallId() {
        if (callId == null) {
            return Optional.empty();
        }
        return callId;
    }

    @JsonInclude(value = JsonInclude.Include.CUSTOM, valueFilter = NullableNonemptyFilter.class)
    @JsonProperty("type")
    private Optional<LoggingControllerLogsDeleteQueryRequestType> _getType() {
        return type;
    }

    @JsonInclude(value = JsonInclude.Include.CUSTOM, valueFilter = NullableNonemptyFilter.class)
    @JsonProperty("assistantId")
    private Optional<String> _getAssistantId() {
        return assistantId;
    }

    @JsonInclude(value = JsonInclude.Include.CUSTOM, valueFilter = NullableNonemptyFilter.class)
    @JsonProperty("phoneNumberId")
    private Optional<String> _getPhoneNumberId() {
        return phoneNumberId;
    }

    @JsonInclude(value = JsonInclude.Include.CUSTOM, valueFilter = NullableNonemptyFilter.class)
    @JsonProperty("customerId")
    private Optional<String> _getCustomerId() {
        return customerId;
    }

    @JsonInclude(value = JsonInclude.Include.CUSTOM, valueFilter = NullableNonemptyFilter.class)
    @JsonProperty("squadId")
    private Optional<String> _getSquadId() {
        return squadId;
    }

    @JsonInclude(value = JsonInclude.Include.CUSTOM, valueFilter = NullableNonemptyFilter.class)
    @JsonProperty("callId")
    private Optional<String> _getCallId() {
        return callId;
    }

    @java.lang.Override
    public boolean equals(Object other) {
        if (this == other) return true;
        return other instanceof LoggingControllerLogsDeleteQueryRequest
                && equalTo((LoggingControllerLogsDeleteQueryRequest) other);
    }

    @JsonAnyGetter
    public Map<String, Object> getAdditionalProperties() {
        return this.additionalProperties;
    }

    private boolean equalTo(LoggingControllerLogsDeleteQueryRequest other) {
        return type.equals(other.type)
                && assistantId.equals(other.assistantId)
                && phoneNumberId.equals(other.phoneNumberId)
                && customerId.equals(other.customerId)
                && squadId.equals(other.squadId)
                && callId.equals(other.callId);
    }

    @java.lang.Override
    public int hashCode() {
        return Objects.hash(
                this.type, this.assistantId, this.phoneNumberId, this.customerId, this.squadId, this.callId);
    }

    @java.lang.Override
    public String toString() {
        return ObjectMappers.stringify(this);
    }

    public static Builder builder() {
        return new Builder();
    }

    @JsonIgnoreProperties(ignoreUnknown = true)
    public static final class Builder {
        private Optional<LoggingControllerLogsDeleteQueryRequestType> type = Optional.empty();

        private Optional<String> assistantId = Optional.empty();

        private Optional<String> phoneNumberId = Optional.empty();

        private Optional<String> customerId = Optional.empty();

        private Optional<String> squadId = Optional.empty();

        private Optional<String> callId = Optional.empty();

        @JsonAnySetter
        private Map<String, Object> additionalProperties = new HashMap<>();

        private Builder() {}

        public Builder from(LoggingControllerLogsDeleteQueryRequest other) {
            type(other.getType());
            assistantId(other.getAssistantId());
            phoneNumberId(other.getPhoneNumberId());
            customerId(other.getCustomerId());
            squadId(other.getSquadId());
            callId(other.getCallId());
            return this;
        }

        /**
         * <p>This is the type of the log.</p>
         */
        @JsonSetter(value = "type", nulls = Nulls.SKIP)
        public Builder type(Optional<LoggingControllerLogsDeleteQueryRequestType> type) {
            this.type = type;
            return this;
        }

        public Builder type(LoggingControllerLogsDeleteQueryRequestType type) {
            this.type = Optional.ofNullable(type);
            return this;
        }

        public Builder type(Nullable<LoggingControllerLogsDeleteQueryRequestType> type) {
            if (type.isNull()) {
                this.type = null;
            } else if (type.isEmpty()) {
                this.type = Optional.empty();
            } else {
                this.type = Optional.of(type.get());
            }
            return this;
        }

        @JsonSetter(value = "assistantId", nulls = Nulls.SKIP)
        public Builder assistantId(Optional<String> assistantId) {
            this.assistantId = assistantId;
            return this;
        }

        public Builder assistantId(String assistantId) {
            this.assistantId = Optional.ofNullable(assistantId);
            return this;
        }

        public Builder assistantId(Nullable<String> assistantId) {
            if (assistantId.isNull()) {
                this.assistantId = null;
            } else if (assistantId.isEmpty()) {
                this.assistantId = Optional.empty();
            } else {
                this.assistantId = Optional.of(assistantId.get());
            }
            return this;
        }

        /**
         * <p>This is the ID of the phone number.</p>
         */
        @JsonSetter(value = "phoneNumberId", nulls = Nulls.SKIP)
        public Builder phoneNumberId(Optional<String> phoneNumberId) {
            this.phoneNumberId = phoneNumberId;
            return this;
        }

        public Builder phoneNumberId(String phoneNumberId) {
            this.phoneNumberId = Optional.ofNullable(phoneNumberId);
            return this;
        }

        public Builder phoneNumberId(Nullable<String> phoneNumberId) {
            if (phoneNumberId.isNull()) {
                this.phoneNumberId = null;
            } else if (phoneNumberId.isEmpty()) {
                this.phoneNumberId = Optional.empty();
            } else {
                this.phoneNumberId = Optional.of(phoneNumberId.get());
            }
            return this;
        }

        /**
         * <p>This is the ID of the customer.</p>
         */
        @JsonSetter(value = "customerId", nulls = Nulls.SKIP)
        public Builder customerId(Optional<String> customerId) {
            this.customerId = customerId;
            return this;
        }

        public Builder customerId(String customerId) {
            this.customerId = Optional.ofNullable(customerId);
            return this;
        }

        public Builder customerId(Nullable<String> customerId) {
            if (customerId.isNull()) {
                this.customerId = null;
            } else if (customerId.isEmpty()) {
                this.customerId = Optional.empty();
            } else {
                this.customerId = Optional.of(customerId.get());
            }
            return this;
        }

        /**
         * <p>This is the ID of the squad.</p>
         */
        @JsonSetter(value = "squadId", nulls = Nulls.SKIP)
        public Builder squadId(Optional<String> squadId) {
            this.squadId = squadId;
            return this;
        }

        public Builder squadId(String squadId) {
            this.squadId = Optional.ofNullable(squadId);
            return this;
        }

        public Builder squadId(Nullable<String> squadId) {
            if (squadId.isNull()) {
                this.squadId = null;
            } else if (squadId.isEmpty()) {
                this.squadId = Optional.empty();
            } else {
                this.squadId = Optional.of(squadId.get());
            }
            return this;
        }

        /**
         * <p>This is the ID of the call.</p>
         */
        @JsonSetter(value = "callId", nulls = Nulls.SKIP)
        public Builder callId(Optional<String> callId) {
            this.callId = callId;
            return this;
        }

        public Builder callId(String callId) {
            this.callId = Optional.ofNullable(callId);
            return this;
        }

        public Builder callId(Nullable<String> callId) {
            if (callId.isNull()) {
                this.callId = null;
            } else if (callId.isEmpty()) {
                this.callId = Optional.empty();
            } else {
                this.callId = Optional.of(callId.get());
            }
            return this;
        }

        public LoggingControllerLogsDeleteQueryRequest build() {
            return new LoggingControllerLogsDeleteQueryRequest(
                    type, assistantId, phoneNumberId, customerId, squadId, callId, additionalProperties);
        }
    }
}
