/**
 * This file was auto-generated by Fern from our API Definition.
 */
package com.vapi.api.types;

import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.annotation.Nulls;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.vapi.api.core.ObjectMappers;
import java.util.HashMap;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;

@JsonInclude(JsonInclude.Include.NON_ABSENT)
@JsonDeserialize(builder = SipTrunkOutboundAuthenticationPlan.Builder.class)
public final class SipTrunkOutboundAuthenticationPlan {
    private final Optional<String> authPassword;

    private final Optional<String> authUsername;

    private final Optional<SipTrunkOutboundSipRegisterPlan> sipRegisterPlan;

    private final Map<String, Object> additionalProperties;

    private SipTrunkOutboundAuthenticationPlan(
            Optional<String> authPassword,
            Optional<String> authUsername,
            Optional<SipTrunkOutboundSipRegisterPlan> sipRegisterPlan,
            Map<String, Object> additionalProperties) {
        this.authPassword = authPassword;
        this.authUsername = authUsername;
        this.sipRegisterPlan = sipRegisterPlan;
        this.additionalProperties = additionalProperties;
    }

    /**
     * @return This is not returned in the API.
     */
    @JsonProperty("authPassword")
    public Optional<String> getAuthPassword() {
        return authPassword;
    }

    @JsonProperty("authUsername")
    public Optional<String> getAuthUsername() {
        return authUsername;
    }

    /**
     * @return This can be used to configure if SIP register is required by the SIP trunk. If not provided, no SIP registration will be attempted.
     */
    @JsonProperty("sipRegisterPlan")
    public Optional<SipTrunkOutboundSipRegisterPlan> getSipRegisterPlan() {
        return sipRegisterPlan;
    }

    @java.lang.Override
    public boolean equals(Object other) {
        if (this == other) return true;
        return other instanceof SipTrunkOutboundAuthenticationPlan
                && equalTo((SipTrunkOutboundAuthenticationPlan) other);
    }

    @JsonAnyGetter
    public Map<String, Object> getAdditionalProperties() {
        return this.additionalProperties;
    }

    private boolean equalTo(SipTrunkOutboundAuthenticationPlan other) {
        return authPassword.equals(other.authPassword)
                && authUsername.equals(other.authUsername)
                && sipRegisterPlan.equals(other.sipRegisterPlan);
    }

    @java.lang.Override
    public int hashCode() {
        return Objects.hash(this.authPassword, this.authUsername, this.sipRegisterPlan);
    }

    @java.lang.Override
    public String toString() {
        return ObjectMappers.stringify(this);
    }

    public static Builder builder() {
        return new Builder();
    }

    @JsonIgnoreProperties(ignoreUnknown = true)
    public static final class Builder {
        private Optional<String> authPassword = Optional.empty();

        private Optional<String> authUsername = Optional.empty();

        private Optional<SipTrunkOutboundSipRegisterPlan> sipRegisterPlan = Optional.empty();

        @JsonAnySetter
        private Map<String, Object> additionalProperties = new HashMap<>();

        private Builder() {}

        public Builder from(SipTrunkOutboundAuthenticationPlan other) {
            authPassword(other.getAuthPassword());
            authUsername(other.getAuthUsername());
            sipRegisterPlan(other.getSipRegisterPlan());
            return this;
        }

        /**
         * <p>This is not returned in the API.</p>
         */
        @JsonSetter(value = "authPassword", nulls = Nulls.SKIP)
        public Builder authPassword(Optional<String> authPassword) {
            this.authPassword = authPassword;
            return this;
        }

        public Builder authPassword(String authPassword) {
            this.authPassword = Optional.ofNullable(authPassword);
            return this;
        }

        @JsonSetter(value = "authUsername", nulls = Nulls.SKIP)
        public Builder authUsername(Optional<String> authUsername) {
            this.authUsername = authUsername;
            return this;
        }

        public Builder authUsername(String authUsername) {
            this.authUsername = Optional.ofNullable(authUsername);
            return this;
        }

        /**
         * <p>This can be used to configure if SIP register is required by the SIP trunk. If not provided, no SIP registration will be attempted.</p>
         */
        @JsonSetter(value = "sipRegisterPlan", nulls = Nulls.SKIP)
        public Builder sipRegisterPlan(Optional<SipTrunkOutboundSipRegisterPlan> sipRegisterPlan) {
            this.sipRegisterPlan = sipRegisterPlan;
            return this;
        }

        public Builder sipRegisterPlan(SipTrunkOutboundSipRegisterPlan sipRegisterPlan) {
            this.sipRegisterPlan = Optional.ofNullable(sipRegisterPlan);
            return this;
        }

        public SipTrunkOutboundAuthenticationPlan build() {
            return new SipTrunkOutboundAuthenticationPlan(
                    authPassword, authUsername, sipRegisterPlan, additionalProperties);
        }
    }
}
