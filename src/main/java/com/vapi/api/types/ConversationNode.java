/**
 * This file was auto-generated by Fern from our API Definition.
 */
package com.vapi.api.types;

import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.annotation.Nulls;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.vapi.api.core.ObjectMappers;
import java.util.HashMap;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import org.jetbrains.annotations.NotNull;

@JsonInclude(JsonInclude.Include.NON_ABSENT)
@JsonDeserialize(builder = ConversationNode.Builder.class)
public final class ConversationNode {
    private final Optional<ConversationNodeModel> model;

    private final Optional<ConversationNodeTranscriber> transcriber;

    private final Optional<ConversationNodeVoice> voice;

    private final Optional<String> prompt;

    private final Optional<GlobalNodePlan> globalNodePlan;

    private final Optional<VariableExtractionPlan> variableExtractionPlan;

    private final String name;

    private final Optional<Boolean> isStart;

    private final Optional<Map<String, Object>> metadata;

    private final Map<String, Object> additionalProperties;

    private ConversationNode(
            Optional<ConversationNodeModel> model,
            Optional<ConversationNodeTranscriber> transcriber,
            Optional<ConversationNodeVoice> voice,
            Optional<String> prompt,
            Optional<GlobalNodePlan> globalNodePlan,
            Optional<VariableExtractionPlan> variableExtractionPlan,
            String name,
            Optional<Boolean> isStart,
            Optional<Map<String, Object>> metadata,
            Map<String, Object> additionalProperties) {
        this.model = model;
        this.transcriber = transcriber;
        this.voice = voice;
        this.prompt = prompt;
        this.globalNodePlan = globalNodePlan;
        this.variableExtractionPlan = variableExtractionPlan;
        this.name = name;
        this.isStart = isStart;
        this.metadata = metadata;
        this.additionalProperties = additionalProperties;
    }

    /**
     * @return This is the model for the node.
     * <p>This overrides <code>workflow.model</code>.</p>
     */
    @JsonProperty("model")
    public Optional<ConversationNodeModel> getModel() {
        return model;
    }

    /**
     * @return This is the transcriber for the node.
     * <p>This overrides <code>workflow.transcriber</code>.</p>
     */
    @JsonProperty("transcriber")
    public Optional<ConversationNodeTranscriber> getTranscriber() {
        return transcriber;
    }

    /**
     * @return This is the voice for the node.
     * <p>This overrides <code>workflow.voice</code>.</p>
     */
    @JsonProperty("voice")
    public Optional<ConversationNodeVoice> getVoice() {
        return voice;
    }

    @JsonProperty("prompt")
    public Optional<String> getPrompt() {
        return prompt;
    }

    /**
     * @return This is the plan for the global node.
     */
    @JsonProperty("globalNodePlan")
    public Optional<GlobalNodePlan> getGlobalNodePlan() {
        return globalNodePlan;
    }

    /**
     * @return This is the plan that controls the variable extraction from the user's responses.
     * <p>Usage:
     * Use <code>schema</code> to specify what you want to extract from the user's responses.</p>
     * <pre><code class="language-json">{
     *   &quot;schema&quot;: {
     *     &quot;type&quot;: &quot;object&quot;,
     *     &quot;properties&quot;: {
     *       &quot;user&quot;: {
     *         &quot;type&quot;: &quot;object&quot;,
     *         &quot;properties&quot;: {
     *           &quot;name&quot;: {
     *             &quot;type&quot;: &quot;string&quot;
     *           },
     *           &quot;age&quot;: {
     *             &quot;type&quot;: &quot;number&quot;
     *           }
     *         }
     *       }
     *     }
     *   }
     * }
     * </code></pre>
     * <p>This will be extracted as <code>{{ user.name }}</code> and <code>{{ user.age }}</code> respectively.</p>
     * <p>(Optional) Use <code>aliases</code> to create new variables.</p>
     * <pre><code class="language-json">{
     *   &quot;aliases&quot;: [
     *     {
     *       &quot;key&quot;: &quot;userAge&quot;,
     *       &quot;value&quot;: &quot;{{user.age}}&quot;
     *     },
     *     {
     *       &quot;key&quot;: &quot;userName&quot;,
     *       &quot;value&quot;: &quot;{{user.name}}&quot;
     *     }
     *   ]
     * }
     * </code></pre>
     * <p>This will be extracted as <code>{{ userAge }}</code> and <code>{{ userName }}</code> respectively.</p>
     * <p>Note: The <code>schema</code> field is required for Conversation nodes if you want to extract variables from the user's responses. <code>aliases</code> is just a convenience.</p>
     */
    @JsonProperty("variableExtractionPlan")
    public Optional<VariableExtractionPlan> getVariableExtractionPlan() {
        return variableExtractionPlan;
    }

    @JsonProperty("name")
    public String getName() {
        return name;
    }

    /**
     * @return This is whether or not the node is the start of the workflow.
     */
    @JsonProperty("isStart")
    public Optional<Boolean> getIsStart() {
        return isStart;
    }

    /**
     * @return This is for metadata you want to store on the task.
     */
    @JsonProperty("metadata")
    public Optional<Map<String, Object>> getMetadata() {
        return metadata;
    }

    @java.lang.Override
    public boolean equals(Object other) {
        if (this == other) return true;
        return other instanceof ConversationNode && equalTo((ConversationNode) other);
    }

    @JsonAnyGetter
    public Map<String, Object> getAdditionalProperties() {
        return this.additionalProperties;
    }

    private boolean equalTo(ConversationNode other) {
        return model.equals(other.model)
                && transcriber.equals(other.transcriber)
                && voice.equals(other.voice)
                && prompt.equals(other.prompt)
                && globalNodePlan.equals(other.globalNodePlan)
                && variableExtractionPlan.equals(other.variableExtractionPlan)
                && name.equals(other.name)
                && isStart.equals(other.isStart)
                && metadata.equals(other.metadata);
    }

    @java.lang.Override
    public int hashCode() {
        return Objects.hash(
                this.model,
                this.transcriber,
                this.voice,
                this.prompt,
                this.globalNodePlan,
                this.variableExtractionPlan,
                this.name,
                this.isStart,
                this.metadata);
    }

    @java.lang.Override
    public String toString() {
        return ObjectMappers.stringify(this);
    }

    public static NameStage builder() {
        return new Builder();
    }

    public interface NameStage {
        _FinalStage name(@NotNull String name);

        Builder from(ConversationNode other);
    }

    public interface _FinalStage {
        ConversationNode build();

        /**
         * <p>This is the model for the node.</p>
         * <p>This overrides <code>workflow.model</code>.</p>
         */
        _FinalStage model(Optional<ConversationNodeModel> model);

        _FinalStage model(ConversationNodeModel model);

        /**
         * <p>This is the transcriber for the node.</p>
         * <p>This overrides <code>workflow.transcriber</code>.</p>
         */
        _FinalStage transcriber(Optional<ConversationNodeTranscriber> transcriber);

        _FinalStage transcriber(ConversationNodeTranscriber transcriber);

        /**
         * <p>This is the voice for the node.</p>
         * <p>This overrides <code>workflow.voice</code>.</p>
         */
        _FinalStage voice(Optional<ConversationNodeVoice> voice);

        _FinalStage voice(ConversationNodeVoice voice);

        _FinalStage prompt(Optional<String> prompt);

        _FinalStage prompt(String prompt);

        /**
         * <p>This is the plan for the global node.</p>
         */
        _FinalStage globalNodePlan(Optional<GlobalNodePlan> globalNodePlan);

        _FinalStage globalNodePlan(GlobalNodePlan globalNodePlan);

        /**
         * <p>This is the plan that controls the variable extraction from the user's responses.</p>
         * <p>Usage:
         * Use <code>schema</code> to specify what you want to extract from the user's responses.</p>
         * <pre><code class="language-json">{
         *   &quot;schema&quot;: {
         *     &quot;type&quot;: &quot;object&quot;,
         *     &quot;properties&quot;: {
         *       &quot;user&quot;: {
         *         &quot;type&quot;: &quot;object&quot;,
         *         &quot;properties&quot;: {
         *           &quot;name&quot;: {
         *             &quot;type&quot;: &quot;string&quot;
         *           },
         *           &quot;age&quot;: {
         *             &quot;type&quot;: &quot;number&quot;
         *           }
         *         }
         *       }
         *     }
         *   }
         * }
         * </code></pre>
         * <p>This will be extracted as <code>{{ user.name }}</code> and <code>{{ user.age }}</code> respectively.</p>
         * <p>(Optional) Use <code>aliases</code> to create new variables.</p>
         * <pre><code class="language-json">{
         *   &quot;aliases&quot;: [
         *     {
         *       &quot;key&quot;: &quot;userAge&quot;,
         *       &quot;value&quot;: &quot;{{user.age}}&quot;
         *     },
         *     {
         *       &quot;key&quot;: &quot;userName&quot;,
         *       &quot;value&quot;: &quot;{{user.name}}&quot;
         *     }
         *   ]
         * }
         * </code></pre>
         * <p>This will be extracted as <code>{{ userAge }}</code> and <code>{{ userName }}</code> respectively.</p>
         * <p>Note: The <code>schema</code> field is required for Conversation nodes if you want to extract variables from the user's responses. <code>aliases</code> is just a convenience.</p>
         */
        _FinalStage variableExtractionPlan(Optional<VariableExtractionPlan> variableExtractionPlan);

        _FinalStage variableExtractionPlan(VariableExtractionPlan variableExtractionPlan);

        /**
         * <p>This is whether or not the node is the start of the workflow.</p>
         */
        _FinalStage isStart(Optional<Boolean> isStart);

        _FinalStage isStart(Boolean isStart);

        /**
         * <p>This is for metadata you want to store on the task.</p>
         */
        _FinalStage metadata(Optional<Map<String, Object>> metadata);

        _FinalStage metadata(Map<String, Object> metadata);
    }

    @JsonIgnoreProperties(ignoreUnknown = true)
    public static final class Builder implements NameStage, _FinalStage {
        private String name;

        private Optional<Map<String, Object>> metadata = Optional.empty();

        private Optional<Boolean> isStart = Optional.empty();

        private Optional<VariableExtractionPlan> variableExtractionPlan = Optional.empty();

        private Optional<GlobalNodePlan> globalNodePlan = Optional.empty();

        private Optional<String> prompt = Optional.empty();

        private Optional<ConversationNodeVoice> voice = Optional.empty();

        private Optional<ConversationNodeTranscriber> transcriber = Optional.empty();

        private Optional<ConversationNodeModel> model = Optional.empty();

        @JsonAnySetter
        private Map<String, Object> additionalProperties = new HashMap<>();

        private Builder() {}

        @java.lang.Override
        public Builder from(ConversationNode other) {
            model(other.getModel());
            transcriber(other.getTranscriber());
            voice(other.getVoice());
            prompt(other.getPrompt());
            globalNodePlan(other.getGlobalNodePlan());
            variableExtractionPlan(other.getVariableExtractionPlan());
            name(other.getName());
            isStart(other.getIsStart());
            metadata(other.getMetadata());
            return this;
        }

        @java.lang.Override
        @JsonSetter("name")
        public _FinalStage name(@NotNull String name) {
            this.name = Objects.requireNonNull(name, "name must not be null");
            return this;
        }

        /**
         * <p>This is for metadata you want to store on the task.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        public _FinalStage metadata(Map<String, Object> metadata) {
            this.metadata = Optional.ofNullable(metadata);
            return this;
        }

        /**
         * <p>This is for metadata you want to store on the task.</p>
         */
        @java.lang.Override
        @JsonSetter(value = "metadata", nulls = Nulls.SKIP)
        public _FinalStage metadata(Optional<Map<String, Object>> metadata) {
            this.metadata = metadata;
            return this;
        }

        /**
         * <p>This is whether or not the node is the start of the workflow.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        public _FinalStage isStart(Boolean isStart) {
            this.isStart = Optional.ofNullable(isStart);
            return this;
        }

        /**
         * <p>This is whether or not the node is the start of the workflow.</p>
         */
        @java.lang.Override
        @JsonSetter(value = "isStart", nulls = Nulls.SKIP)
        public _FinalStage isStart(Optional<Boolean> isStart) {
            this.isStart = isStart;
            return this;
        }

        /**
         * <p>This is the plan that controls the variable extraction from the user's responses.</p>
         * <p>Usage:
         * Use <code>schema</code> to specify what you want to extract from the user's responses.</p>
         * <pre><code class="language-json">{
         *   &quot;schema&quot;: {
         *     &quot;type&quot;: &quot;object&quot;,
         *     &quot;properties&quot;: {
         *       &quot;user&quot;: {
         *         &quot;type&quot;: &quot;object&quot;,
         *         &quot;properties&quot;: {
         *           &quot;name&quot;: {
         *             &quot;type&quot;: &quot;string&quot;
         *           },
         *           &quot;age&quot;: {
         *             &quot;type&quot;: &quot;number&quot;
         *           }
         *         }
         *       }
         *     }
         *   }
         * }
         * </code></pre>
         * <p>This will be extracted as <code>{{ user.name }}</code> and <code>{{ user.age }}</code> respectively.</p>
         * <p>(Optional) Use <code>aliases</code> to create new variables.</p>
         * <pre><code class="language-json">{
         *   &quot;aliases&quot;: [
         *     {
         *       &quot;key&quot;: &quot;userAge&quot;,
         *       &quot;value&quot;: &quot;{{user.age}}&quot;
         *     },
         *     {
         *       &quot;key&quot;: &quot;userName&quot;,
         *       &quot;value&quot;: &quot;{{user.name}}&quot;
         *     }
         *   ]
         * }
         * </code></pre>
         * <p>This will be extracted as <code>{{ userAge }}</code> and <code>{{ userName }}</code> respectively.</p>
         * <p>Note: The <code>schema</code> field is required for Conversation nodes if you want to extract variables from the user's responses. <code>aliases</code> is just a convenience.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        public _FinalStage variableExtractionPlan(VariableExtractionPlan variableExtractionPlan) {
            this.variableExtractionPlan = Optional.ofNullable(variableExtractionPlan);
            return this;
        }

        /**
         * <p>This is the plan that controls the variable extraction from the user's responses.</p>
         * <p>Usage:
         * Use <code>schema</code> to specify what you want to extract from the user's responses.</p>
         * <pre><code class="language-json">{
         *   &quot;schema&quot;: {
         *     &quot;type&quot;: &quot;object&quot;,
         *     &quot;properties&quot;: {
         *       &quot;user&quot;: {
         *         &quot;type&quot;: &quot;object&quot;,
         *         &quot;properties&quot;: {
         *           &quot;name&quot;: {
         *             &quot;type&quot;: &quot;string&quot;
         *           },
         *           &quot;age&quot;: {
         *             &quot;type&quot;: &quot;number&quot;
         *           }
         *         }
         *       }
         *     }
         *   }
         * }
         * </code></pre>
         * <p>This will be extracted as <code>{{ user.name }}</code> and <code>{{ user.age }}</code> respectively.</p>
         * <p>(Optional) Use <code>aliases</code> to create new variables.</p>
         * <pre><code class="language-json">{
         *   &quot;aliases&quot;: [
         *     {
         *       &quot;key&quot;: &quot;userAge&quot;,
         *       &quot;value&quot;: &quot;{{user.age}}&quot;
         *     },
         *     {
         *       &quot;key&quot;: &quot;userName&quot;,
         *       &quot;value&quot;: &quot;{{user.name}}&quot;
         *     }
         *   ]
         * }
         * </code></pre>
         * <p>This will be extracted as <code>{{ userAge }}</code> and <code>{{ userName }}</code> respectively.</p>
         * <p>Note: The <code>schema</code> field is required for Conversation nodes if you want to extract variables from the user's responses. <code>aliases</code> is just a convenience.</p>
         */
        @java.lang.Override
        @JsonSetter(value = "variableExtractionPlan", nulls = Nulls.SKIP)
        public _FinalStage variableExtractionPlan(Optional<VariableExtractionPlan> variableExtractionPlan) {
            this.variableExtractionPlan = variableExtractionPlan;
            return this;
        }

        /**
         * <p>This is the plan for the global node.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        public _FinalStage globalNodePlan(GlobalNodePlan globalNodePlan) {
            this.globalNodePlan = Optional.ofNullable(globalNodePlan);
            return this;
        }

        /**
         * <p>This is the plan for the global node.</p>
         */
        @java.lang.Override
        @JsonSetter(value = "globalNodePlan", nulls = Nulls.SKIP)
        public _FinalStage globalNodePlan(Optional<GlobalNodePlan> globalNodePlan) {
            this.globalNodePlan = globalNodePlan;
            return this;
        }

        @java.lang.Override
        public _FinalStage prompt(String prompt) {
            this.prompt = Optional.ofNullable(prompt);
            return this;
        }

        @java.lang.Override
        @JsonSetter(value = "prompt", nulls = Nulls.SKIP)
        public _FinalStage prompt(Optional<String> prompt) {
            this.prompt = prompt;
            return this;
        }

        /**
         * <p>This is the voice for the node.</p>
         * <p>This overrides <code>workflow.voice</code>.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        public _FinalStage voice(ConversationNodeVoice voice) {
            this.voice = Optional.ofNullable(voice);
            return this;
        }

        /**
         * <p>This is the voice for the node.</p>
         * <p>This overrides <code>workflow.voice</code>.</p>
         */
        @java.lang.Override
        @JsonSetter(value = "voice", nulls = Nulls.SKIP)
        public _FinalStage voice(Optional<ConversationNodeVoice> voice) {
            this.voice = voice;
            return this;
        }

        /**
         * <p>This is the transcriber for the node.</p>
         * <p>This overrides <code>workflow.transcriber</code>.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        public _FinalStage transcriber(ConversationNodeTranscriber transcriber) {
            this.transcriber = Optional.ofNullable(transcriber);
            return this;
        }

        /**
         * <p>This is the transcriber for the node.</p>
         * <p>This overrides <code>workflow.transcriber</code>.</p>
         */
        @java.lang.Override
        @JsonSetter(value = "transcriber", nulls = Nulls.SKIP)
        public _FinalStage transcriber(Optional<ConversationNodeTranscriber> transcriber) {
            this.transcriber = transcriber;
            return this;
        }

        /**
         * <p>This is the model for the node.</p>
         * <p>This overrides <code>workflow.model</code>.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        public _FinalStage model(ConversationNodeModel model) {
            this.model = Optional.ofNullable(model);
            return this;
        }

        /**
         * <p>This is the model for the node.</p>
         * <p>This overrides <code>workflow.model</code>.</p>
         */
        @java.lang.Override
        @JsonSetter(value = "model", nulls = Nulls.SKIP)
        public _FinalStage model(Optional<ConversationNodeModel> model) {
            this.model = model;
            return this;
        }

        @java.lang.Override
        public ConversationNode build() {
            return new ConversationNode(
                    model,
                    transcriber,
                    voice,
                    prompt,
                    globalNodePlan,
                    variableExtractionPlan,
                    name,
                    isStart,
                    metadata,
                    additionalProperties);
        }
    }
}
