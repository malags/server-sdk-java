/**
 * This file was auto-generated by Fern from our API Definition.
 */
package com.vapi.api.types;

import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.annotation.Nulls;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.vapi.api.core.ObjectMappers;
import java.util.HashMap;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import org.jetbrains.annotations.NotNull;

@JsonInclude(JsonInclude.Include.NON_ABSENT)
@JsonDeserialize(builder = ToolMessage.Builder.class)
public final class ToolMessage {
    private final String content;

    private final String toolCallId;

    private final Optional<String> name;

    private final Map<String, Object> additionalProperties;

    private ToolMessage(
            String content, String toolCallId, Optional<String> name, Map<String, Object> additionalProperties) {
        this.content = content;
        this.toolCallId = toolCallId;
        this.name = name;
        this.additionalProperties = additionalProperties;
    }

    /**
     * @return This is the role of the message author
     */
    @JsonProperty("role")
    public String getRole() {
        return "tool";
    }

    /**
     * @return This is the content of the tool message
     */
    @JsonProperty("content")
    public String getContent() {
        return content;
    }

    /**
     * @return This is the ID of the tool call this message is responding to
     */
    @JsonProperty("tool_call_id")
    public String getToolCallId() {
        return toolCallId;
    }

    /**
     * @return This is an optional name for the participant
     */
    @JsonProperty("name")
    public Optional<String> getName() {
        return name;
    }

    @java.lang.Override
    public boolean equals(Object other) {
        if (this == other) return true;
        return other instanceof ToolMessage && equalTo((ToolMessage) other);
    }

    @JsonAnyGetter
    public Map<String, Object> getAdditionalProperties() {
        return this.additionalProperties;
    }

    private boolean equalTo(ToolMessage other) {
        return content.equals(other.content) && toolCallId.equals(other.toolCallId) && name.equals(other.name);
    }

    @java.lang.Override
    public int hashCode() {
        return Objects.hash(this.content, this.toolCallId, this.name);
    }

    @java.lang.Override
    public String toString() {
        return ObjectMappers.stringify(this);
    }

    public static ContentStage builder() {
        return new Builder();
    }

    public interface ContentStage {
        /**
         * <p>This is the content of the tool message</p>
         */
        ToolCallIdStage content(@NotNull String content);

        Builder from(ToolMessage other);
    }

    public interface ToolCallIdStage {
        /**
         * <p>This is the ID of the tool call this message is responding to</p>
         */
        _FinalStage toolCallId(@NotNull String toolCallId);
    }

    public interface _FinalStage {
        ToolMessage build();

        /**
         * <p>This is an optional name for the participant</p>
         */
        _FinalStage name(Optional<String> name);

        _FinalStage name(String name);
    }

    @JsonIgnoreProperties(ignoreUnknown = true)
    public static final class Builder implements ContentStage, ToolCallIdStage, _FinalStage {
        private String content;

        private String toolCallId;

        private Optional<String> name = Optional.empty();

        @JsonAnySetter
        private Map<String, Object> additionalProperties = new HashMap<>();

        private Builder() {}

        @java.lang.Override
        public Builder from(ToolMessage other) {
            content(other.getContent());
            toolCallId(other.getToolCallId());
            name(other.getName());
            return this;
        }

        /**
         * <p>This is the content of the tool message</p>
         * <p>This is the content of the tool message</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        @JsonSetter("content")
        public ToolCallIdStage content(@NotNull String content) {
            this.content = Objects.requireNonNull(content, "content must not be null");
            return this;
        }

        /**
         * <p>This is the ID of the tool call this message is responding to</p>
         * <p>This is the ID of the tool call this message is responding to</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        @JsonSetter("tool_call_id")
        public _FinalStage toolCallId(@NotNull String toolCallId) {
            this.toolCallId = Objects.requireNonNull(toolCallId, "toolCallId must not be null");
            return this;
        }

        /**
         * <p>This is an optional name for the participant</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        public _FinalStage name(String name) {
            this.name = Optional.ofNullable(name);
            return this;
        }

        /**
         * <p>This is an optional name for the participant</p>
         */
        @java.lang.Override
        @JsonSetter(value = "name", nulls = Nulls.SKIP)
        public _FinalStage name(Optional<String> name) {
            this.name = name;
            return this;
        }

        @java.lang.Override
        public ToolMessage build() {
            return new ToolMessage(content, toolCallId, name, additionalProperties);
        }
    }
}
