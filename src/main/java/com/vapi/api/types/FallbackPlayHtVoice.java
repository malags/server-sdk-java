/**
 * This file was auto-generated by Fern from our API Definition.
 */
package com.vapi.api.types;

import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.annotation.Nulls;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.vapi.api.core.ObjectMappers;
import java.util.HashMap;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import org.jetbrains.annotations.NotNull;

@JsonInclude(JsonInclude.Include.NON_ABSENT)
@JsonDeserialize(builder = FallbackPlayHtVoice.Builder.class)
public final class FallbackPlayHtVoice {
    private final Optional<Boolean> cachingEnabled;

    private final FallbackPlayHtVoiceId voiceId;

    private final Optional<Double> speed;

    private final Optional<Double> temperature;

    private final Optional<FallbackPlayHtVoiceEmotion> emotion;

    private final Optional<Double> voiceGuidance;

    private final Optional<Double> styleGuidance;

    private final Optional<Double> textGuidance;

    private final Optional<FallbackPlayHtVoiceModel> model;

    private final Optional<FallbackPlayHtVoiceLanguage> language;

    private final Optional<ChunkPlan> chunkPlan;

    private final Map<String, Object> additionalProperties;

    private FallbackPlayHtVoice(
            Optional<Boolean> cachingEnabled,
            FallbackPlayHtVoiceId voiceId,
            Optional<Double> speed,
            Optional<Double> temperature,
            Optional<FallbackPlayHtVoiceEmotion> emotion,
            Optional<Double> voiceGuidance,
            Optional<Double> styleGuidance,
            Optional<Double> textGuidance,
            Optional<FallbackPlayHtVoiceModel> model,
            Optional<FallbackPlayHtVoiceLanguage> language,
            Optional<ChunkPlan> chunkPlan,
            Map<String, Object> additionalProperties) {
        this.cachingEnabled = cachingEnabled;
        this.voiceId = voiceId;
        this.speed = speed;
        this.temperature = temperature;
        this.emotion = emotion;
        this.voiceGuidance = voiceGuidance;
        this.styleGuidance = styleGuidance;
        this.textGuidance = textGuidance;
        this.model = model;
        this.language = language;
        this.chunkPlan = chunkPlan;
        this.additionalProperties = additionalProperties;
    }

    /**
     * @return This is the flag to toggle voice caching for the assistant.
     */
    @JsonProperty("cachingEnabled")
    public Optional<Boolean> getCachingEnabled() {
        return cachingEnabled;
    }

    /**
     * @return This is the provider-specific ID that will be used.
     */
    @JsonProperty("voiceId")
    public FallbackPlayHtVoiceId getVoiceId() {
        return voiceId;
    }

    /**
     * @return This is the speed multiplier that will be used.
     */
    @JsonProperty("speed")
    public Optional<Double> getSpeed() {
        return speed;
    }

    /**
     * @return A floating point number between 0, exclusive, and 2, inclusive. If equal to null or not provided, the model's default temperature will be used. The temperature parameter controls variance. Lower temperatures result in more predictable results, higher temperatures allow each run to vary more, so the voice may sound less like the baseline voice.
     */
    @JsonProperty("temperature")
    public Optional<Double> getTemperature() {
        return temperature;
    }

    /**
     * @return An emotion to be applied to the speech.
     */
    @JsonProperty("emotion")
    public Optional<FallbackPlayHtVoiceEmotion> getEmotion() {
        return emotion;
    }

    /**
     * @return A number between 1 and 6. Use lower numbers to reduce how unique your chosen voice will be compared to other voices.
     */
    @JsonProperty("voiceGuidance")
    public Optional<Double> getVoiceGuidance() {
        return voiceGuidance;
    }

    /**
     * @return A number between 1 and 30. Use lower numbers to to reduce how strong your chosen emotion will be. Higher numbers will create a very emotional performance.
     */
    @JsonProperty("styleGuidance")
    public Optional<Double> getStyleGuidance() {
        return styleGuidance;
    }

    /**
     * @return A number between 1 and 2. This number influences how closely the generated speech adheres to the input text. Use lower values to create more fluid speech, but with a higher chance of deviating from the input text. Higher numbers will make the generated speech more accurate to the input text, ensuring that the words spoken align closely with the provided text.
     */
    @JsonProperty("textGuidance")
    public Optional<Double> getTextGuidance() {
        return textGuidance;
    }

    /**
     * @return Playht voice model/engine to use.
     */
    @JsonProperty("model")
    public Optional<FallbackPlayHtVoiceModel> getModel() {
        return model;
    }

    /**
     * @return The language to use for the speech.
     */
    @JsonProperty("language")
    public Optional<FallbackPlayHtVoiceLanguage> getLanguage() {
        return language;
    }

    /**
     * @return This is the plan for chunking the model output before it is sent to the voice provider.
     */
    @JsonProperty("chunkPlan")
    public Optional<ChunkPlan> getChunkPlan() {
        return chunkPlan;
    }

    @java.lang.Override
    public boolean equals(Object other) {
        if (this == other) return true;
        return other instanceof FallbackPlayHtVoice && equalTo((FallbackPlayHtVoice) other);
    }

    @JsonAnyGetter
    public Map<String, Object> getAdditionalProperties() {
        return this.additionalProperties;
    }

    private boolean equalTo(FallbackPlayHtVoice other) {
        return cachingEnabled.equals(other.cachingEnabled)
                && voiceId.equals(other.voiceId)
                && speed.equals(other.speed)
                && temperature.equals(other.temperature)
                && emotion.equals(other.emotion)
                && voiceGuidance.equals(other.voiceGuidance)
                && styleGuidance.equals(other.styleGuidance)
                && textGuidance.equals(other.textGuidance)
                && model.equals(other.model)
                && language.equals(other.language)
                && chunkPlan.equals(other.chunkPlan);
    }

    @java.lang.Override
    public int hashCode() {
        return Objects.hash(
                this.cachingEnabled,
                this.voiceId,
                this.speed,
                this.temperature,
                this.emotion,
                this.voiceGuidance,
                this.styleGuidance,
                this.textGuidance,
                this.model,
                this.language,
                this.chunkPlan);
    }

    @java.lang.Override
    public String toString() {
        return ObjectMappers.stringify(this);
    }

    public static VoiceIdStage builder() {
        return new Builder();
    }

    public interface VoiceIdStage {
        /**
         * <p>This is the provider-specific ID that will be used.</p>
         */
        _FinalStage voiceId(@NotNull FallbackPlayHtVoiceId voiceId);

        Builder from(FallbackPlayHtVoice other);
    }

    public interface _FinalStage {
        FallbackPlayHtVoice build();

        /**
         * <p>This is the flag to toggle voice caching for the assistant.</p>
         */
        _FinalStage cachingEnabled(Optional<Boolean> cachingEnabled);

        _FinalStage cachingEnabled(Boolean cachingEnabled);

        /**
         * <p>This is the speed multiplier that will be used.</p>
         */
        _FinalStage speed(Optional<Double> speed);

        _FinalStage speed(Double speed);

        /**
         * <p>A floating point number between 0, exclusive, and 2, inclusive. If equal to null or not provided, the model's default temperature will be used. The temperature parameter controls variance. Lower temperatures result in more predictable results, higher temperatures allow each run to vary more, so the voice may sound less like the baseline voice.</p>
         */
        _FinalStage temperature(Optional<Double> temperature);

        _FinalStage temperature(Double temperature);

        /**
         * <p>An emotion to be applied to the speech.</p>
         */
        _FinalStage emotion(Optional<FallbackPlayHtVoiceEmotion> emotion);

        _FinalStage emotion(FallbackPlayHtVoiceEmotion emotion);

        /**
         * <p>A number between 1 and 6. Use lower numbers to reduce how unique your chosen voice will be compared to other voices.</p>
         */
        _FinalStage voiceGuidance(Optional<Double> voiceGuidance);

        _FinalStage voiceGuidance(Double voiceGuidance);

        /**
         * <p>A number between 1 and 30. Use lower numbers to to reduce how strong your chosen emotion will be. Higher numbers will create a very emotional performance.</p>
         */
        _FinalStage styleGuidance(Optional<Double> styleGuidance);

        _FinalStage styleGuidance(Double styleGuidance);

        /**
         * <p>A number between 1 and 2. This number influences how closely the generated speech adheres to the input text. Use lower values to create more fluid speech, but with a higher chance of deviating from the input text. Higher numbers will make the generated speech more accurate to the input text, ensuring that the words spoken align closely with the provided text.</p>
         */
        _FinalStage textGuidance(Optional<Double> textGuidance);

        _FinalStage textGuidance(Double textGuidance);

        /**
         * <p>Playht voice model/engine to use.</p>
         */
        _FinalStage model(Optional<FallbackPlayHtVoiceModel> model);

        _FinalStage model(FallbackPlayHtVoiceModel model);

        /**
         * <p>The language to use for the speech.</p>
         */
        _FinalStage language(Optional<FallbackPlayHtVoiceLanguage> language);

        _FinalStage language(FallbackPlayHtVoiceLanguage language);

        /**
         * <p>This is the plan for chunking the model output before it is sent to the voice provider.</p>
         */
        _FinalStage chunkPlan(Optional<ChunkPlan> chunkPlan);

        _FinalStage chunkPlan(ChunkPlan chunkPlan);
    }

    @JsonIgnoreProperties(ignoreUnknown = true)
    public static final class Builder implements VoiceIdStage, _FinalStage {
        private FallbackPlayHtVoiceId voiceId;

        private Optional<ChunkPlan> chunkPlan = Optional.empty();

        private Optional<FallbackPlayHtVoiceLanguage> language = Optional.empty();

        private Optional<FallbackPlayHtVoiceModel> model = Optional.empty();

        private Optional<Double> textGuidance = Optional.empty();

        private Optional<Double> styleGuidance = Optional.empty();

        private Optional<Double> voiceGuidance = Optional.empty();

        private Optional<FallbackPlayHtVoiceEmotion> emotion = Optional.empty();

        private Optional<Double> temperature = Optional.empty();

        private Optional<Double> speed = Optional.empty();

        private Optional<Boolean> cachingEnabled = Optional.empty();

        @JsonAnySetter
        private Map<String, Object> additionalProperties = new HashMap<>();

        private Builder() {}

        @java.lang.Override
        public Builder from(FallbackPlayHtVoice other) {
            cachingEnabled(other.getCachingEnabled());
            voiceId(other.getVoiceId());
            speed(other.getSpeed());
            temperature(other.getTemperature());
            emotion(other.getEmotion());
            voiceGuidance(other.getVoiceGuidance());
            styleGuidance(other.getStyleGuidance());
            textGuidance(other.getTextGuidance());
            model(other.getModel());
            language(other.getLanguage());
            chunkPlan(other.getChunkPlan());
            return this;
        }

        /**
         * <p>This is the provider-specific ID that will be used.</p>
         * <p>This is the provider-specific ID that will be used.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        @JsonSetter("voiceId")
        public _FinalStage voiceId(@NotNull FallbackPlayHtVoiceId voiceId) {
            this.voiceId = Objects.requireNonNull(voiceId, "voiceId must not be null");
            return this;
        }

        /**
         * <p>This is the plan for chunking the model output before it is sent to the voice provider.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        public _FinalStage chunkPlan(ChunkPlan chunkPlan) {
            this.chunkPlan = Optional.ofNullable(chunkPlan);
            return this;
        }

        /**
         * <p>This is the plan for chunking the model output before it is sent to the voice provider.</p>
         */
        @java.lang.Override
        @JsonSetter(value = "chunkPlan", nulls = Nulls.SKIP)
        public _FinalStage chunkPlan(Optional<ChunkPlan> chunkPlan) {
            this.chunkPlan = chunkPlan;
            return this;
        }

        /**
         * <p>The language to use for the speech.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        public _FinalStage language(FallbackPlayHtVoiceLanguage language) {
            this.language = Optional.ofNullable(language);
            return this;
        }

        /**
         * <p>The language to use for the speech.</p>
         */
        @java.lang.Override
        @JsonSetter(value = "language", nulls = Nulls.SKIP)
        public _FinalStage language(Optional<FallbackPlayHtVoiceLanguage> language) {
            this.language = language;
            return this;
        }

        /**
         * <p>Playht voice model/engine to use.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        public _FinalStage model(FallbackPlayHtVoiceModel model) {
            this.model = Optional.ofNullable(model);
            return this;
        }

        /**
         * <p>Playht voice model/engine to use.</p>
         */
        @java.lang.Override
        @JsonSetter(value = "model", nulls = Nulls.SKIP)
        public _FinalStage model(Optional<FallbackPlayHtVoiceModel> model) {
            this.model = model;
            return this;
        }

        /**
         * <p>A number between 1 and 2. This number influences how closely the generated speech adheres to the input text. Use lower values to create more fluid speech, but with a higher chance of deviating from the input text. Higher numbers will make the generated speech more accurate to the input text, ensuring that the words spoken align closely with the provided text.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        public _FinalStage textGuidance(Double textGuidance) {
            this.textGuidance = Optional.ofNullable(textGuidance);
            return this;
        }

        /**
         * <p>A number between 1 and 2. This number influences how closely the generated speech adheres to the input text. Use lower values to create more fluid speech, but with a higher chance of deviating from the input text. Higher numbers will make the generated speech more accurate to the input text, ensuring that the words spoken align closely with the provided text.</p>
         */
        @java.lang.Override
        @JsonSetter(value = "textGuidance", nulls = Nulls.SKIP)
        public _FinalStage textGuidance(Optional<Double> textGuidance) {
            this.textGuidance = textGuidance;
            return this;
        }

        /**
         * <p>A number between 1 and 30. Use lower numbers to to reduce how strong your chosen emotion will be. Higher numbers will create a very emotional performance.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        public _FinalStage styleGuidance(Double styleGuidance) {
            this.styleGuidance = Optional.ofNullable(styleGuidance);
            return this;
        }

        /**
         * <p>A number between 1 and 30. Use lower numbers to to reduce how strong your chosen emotion will be. Higher numbers will create a very emotional performance.</p>
         */
        @java.lang.Override
        @JsonSetter(value = "styleGuidance", nulls = Nulls.SKIP)
        public _FinalStage styleGuidance(Optional<Double> styleGuidance) {
            this.styleGuidance = styleGuidance;
            return this;
        }

        /**
         * <p>A number between 1 and 6. Use lower numbers to reduce how unique your chosen voice will be compared to other voices.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        public _FinalStage voiceGuidance(Double voiceGuidance) {
            this.voiceGuidance = Optional.ofNullable(voiceGuidance);
            return this;
        }

        /**
         * <p>A number between 1 and 6. Use lower numbers to reduce how unique your chosen voice will be compared to other voices.</p>
         */
        @java.lang.Override
        @JsonSetter(value = "voiceGuidance", nulls = Nulls.SKIP)
        public _FinalStage voiceGuidance(Optional<Double> voiceGuidance) {
            this.voiceGuidance = voiceGuidance;
            return this;
        }

        /**
         * <p>An emotion to be applied to the speech.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        public _FinalStage emotion(FallbackPlayHtVoiceEmotion emotion) {
            this.emotion = Optional.ofNullable(emotion);
            return this;
        }

        /**
         * <p>An emotion to be applied to the speech.</p>
         */
        @java.lang.Override
        @JsonSetter(value = "emotion", nulls = Nulls.SKIP)
        public _FinalStage emotion(Optional<FallbackPlayHtVoiceEmotion> emotion) {
            this.emotion = emotion;
            return this;
        }

        /**
         * <p>A floating point number between 0, exclusive, and 2, inclusive. If equal to null or not provided, the model's default temperature will be used. The temperature parameter controls variance. Lower temperatures result in more predictable results, higher temperatures allow each run to vary more, so the voice may sound less like the baseline voice.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        public _FinalStage temperature(Double temperature) {
            this.temperature = Optional.ofNullable(temperature);
            return this;
        }

        /**
         * <p>A floating point number between 0, exclusive, and 2, inclusive. If equal to null or not provided, the model's default temperature will be used. The temperature parameter controls variance. Lower temperatures result in more predictable results, higher temperatures allow each run to vary more, so the voice may sound less like the baseline voice.</p>
         */
        @java.lang.Override
        @JsonSetter(value = "temperature", nulls = Nulls.SKIP)
        public _FinalStage temperature(Optional<Double> temperature) {
            this.temperature = temperature;
            return this;
        }

        /**
         * <p>This is the speed multiplier that will be used.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        public _FinalStage speed(Double speed) {
            this.speed = Optional.ofNullable(speed);
            return this;
        }

        /**
         * <p>This is the speed multiplier that will be used.</p>
         */
        @java.lang.Override
        @JsonSetter(value = "speed", nulls = Nulls.SKIP)
        public _FinalStage speed(Optional<Double> speed) {
            this.speed = speed;
            return this;
        }

        /**
         * <p>This is the flag to toggle voice caching for the assistant.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        public _FinalStage cachingEnabled(Boolean cachingEnabled) {
            this.cachingEnabled = Optional.ofNullable(cachingEnabled);
            return this;
        }

        /**
         * <p>This is the flag to toggle voice caching for the assistant.</p>
         */
        @java.lang.Override
        @JsonSetter(value = "cachingEnabled", nulls = Nulls.SKIP)
        public _FinalStage cachingEnabled(Optional<Boolean> cachingEnabled) {
            this.cachingEnabled = cachingEnabled;
            return this;
        }

        @java.lang.Override
        public FallbackPlayHtVoice build() {
            return new FallbackPlayHtVoice(
                    cachingEnabled,
                    voiceId,
                    speed,
                    temperature,
                    emotion,
                    voiceGuidance,
                    styleGuidance,
                    textGuidance,
                    model,
                    language,
                    chunkPlan,
                    additionalProperties);
        }
    }
}
