/**
 * This file was auto-generated by Fern from our API Definition.
 */
package com.vapi.api.resources.tools.types;

import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSubTypes;
import com.fasterxml.jackson.annotation.JsonTypeInfo;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonUnwrapped;
import com.fasterxml.jackson.annotation.JsonValue;
import com.vapi.api.types.ApiRequestTool;
import com.vapi.api.types.BashTool;
import com.vapi.api.types.ComputerTool;
import com.vapi.api.types.DtmfTool;
import com.vapi.api.types.EndCallTool;
import com.vapi.api.types.FunctionTool;
import com.vapi.api.types.GhlTool;
import com.vapi.api.types.GoHighLevelCalendarAvailabilityTool;
import com.vapi.api.types.GoHighLevelCalendarEventCreateTool;
import com.vapi.api.types.GoHighLevelContactCreateTool;
import com.vapi.api.types.GoHighLevelContactGetTool;
import com.vapi.api.types.GoogleCalendarCheckAvailabilityTool;
import com.vapi.api.types.GoogleCalendarCreateEventTool;
import com.vapi.api.types.GoogleSheetsRowAppendTool;
import com.vapi.api.types.MakeTool;
import com.vapi.api.types.McpTool;
import com.vapi.api.types.OutputTool;
import com.vapi.api.types.QueryTool;
import com.vapi.api.types.SlackSendMessageTool;
import com.vapi.api.types.SmsTool;
import com.vapi.api.types.TextEditorTool;
import com.vapi.api.types.TransferCallTool;
import java.util.Objects;
import java.util.Optional;

public final class ToolsUpdateResponse {
    private final Value value;

    @JsonCreator(mode = JsonCreator.Mode.DELEGATING)
    private ToolsUpdateResponse(Value value) {
        this.value = value;
    }

    public <T> T visit(Visitor<T> visitor) {
        return value.visit(visitor);
    }

    public static ToolsUpdateResponse apiRequest(ApiRequestTool value) {
        return new ToolsUpdateResponse(new ApiRequestValue(value));
    }

    public static ToolsUpdateResponse dtmf(DtmfTool value) {
        return new ToolsUpdateResponse(new DtmfValue(value));
    }

    public static ToolsUpdateResponse endCall(EndCallTool value) {
        return new ToolsUpdateResponse(new EndCallValue(value));
    }

    public static ToolsUpdateResponse function(FunctionTool value) {
        return new ToolsUpdateResponse(new FunctionValue(value));
    }

    public static ToolsUpdateResponse ghl(GhlTool value) {
        return new ToolsUpdateResponse(new GhlValue(value));
    }

    public static ToolsUpdateResponse make(MakeTool value) {
        return new ToolsUpdateResponse(new MakeValue(value));
    }

    public static ToolsUpdateResponse transferCall(TransferCallTool value) {
        return new ToolsUpdateResponse(new TransferCallValue(value));
    }

    public static ToolsUpdateResponse output(OutputTool value) {
        return new ToolsUpdateResponse(new OutputValue(value));
    }

    public static ToolsUpdateResponse bash(BashTool value) {
        return new ToolsUpdateResponse(new BashValue(value));
    }

    public static ToolsUpdateResponse computer(ComputerTool value) {
        return new ToolsUpdateResponse(new ComputerValue(value));
    }

    public static ToolsUpdateResponse textEditor(TextEditorTool value) {
        return new ToolsUpdateResponse(new TextEditorValue(value));
    }

    public static ToolsUpdateResponse query(QueryTool value) {
        return new ToolsUpdateResponse(new QueryValue(value));
    }

    public static ToolsUpdateResponse googleCalendarEventCreate(GoogleCalendarCreateEventTool value) {
        return new ToolsUpdateResponse(new GoogleCalendarEventCreateValue(value));
    }

    public static ToolsUpdateResponse googleSheetsRowAppend(GoogleSheetsRowAppendTool value) {
        return new ToolsUpdateResponse(new GoogleSheetsRowAppendValue(value));
    }

    public static ToolsUpdateResponse googleCalendarAvailabilityCheck(GoogleCalendarCheckAvailabilityTool value) {
        return new ToolsUpdateResponse(new GoogleCalendarAvailabilityCheckValue(value));
    }

    public static ToolsUpdateResponse slackMessageSend(SlackSendMessageTool value) {
        return new ToolsUpdateResponse(new SlackMessageSendValue(value));
    }

    public static ToolsUpdateResponse sms(SmsTool value) {
        return new ToolsUpdateResponse(new SmsValue(value));
    }

    public static ToolsUpdateResponse mcp(McpTool value) {
        return new ToolsUpdateResponse(new McpValue(value));
    }

    public static ToolsUpdateResponse gohighlevelCalendarAvailabilityCheck(GoHighLevelCalendarAvailabilityTool value) {
        return new ToolsUpdateResponse(new GohighlevelCalendarAvailabilityCheckValue(value));
    }

    public static ToolsUpdateResponse gohighlevelCalendarEventCreate(GoHighLevelCalendarEventCreateTool value) {
        return new ToolsUpdateResponse(new GohighlevelCalendarEventCreateValue(value));
    }

    public static ToolsUpdateResponse gohighlevelContactCreate(GoHighLevelContactCreateTool value) {
        return new ToolsUpdateResponse(new GohighlevelContactCreateValue(value));
    }

    public static ToolsUpdateResponse gohighlevelContactGet(GoHighLevelContactGetTool value) {
        return new ToolsUpdateResponse(new GohighlevelContactGetValue(value));
    }

    public boolean isApiRequest() {
        return value instanceof ApiRequestValue;
    }

    public boolean isDtmf() {
        return value instanceof DtmfValue;
    }

    public boolean isEndCall() {
        return value instanceof EndCallValue;
    }

    public boolean isFunction() {
        return value instanceof FunctionValue;
    }

    public boolean isGhl() {
        return value instanceof GhlValue;
    }

    public boolean isMake() {
        return value instanceof MakeValue;
    }

    public boolean isTransferCall() {
        return value instanceof TransferCallValue;
    }

    public boolean isOutput() {
        return value instanceof OutputValue;
    }

    public boolean isBash() {
        return value instanceof BashValue;
    }

    public boolean isComputer() {
        return value instanceof ComputerValue;
    }

    public boolean isTextEditor() {
        return value instanceof TextEditorValue;
    }

    public boolean isQuery() {
        return value instanceof QueryValue;
    }

    public boolean isGoogleCalendarEventCreate() {
        return value instanceof GoogleCalendarEventCreateValue;
    }

    public boolean isGoogleSheetsRowAppend() {
        return value instanceof GoogleSheetsRowAppendValue;
    }

    public boolean isGoogleCalendarAvailabilityCheck() {
        return value instanceof GoogleCalendarAvailabilityCheckValue;
    }

    public boolean isSlackMessageSend() {
        return value instanceof SlackMessageSendValue;
    }

    public boolean isSms() {
        return value instanceof SmsValue;
    }

    public boolean isMcp() {
        return value instanceof McpValue;
    }

    public boolean isGohighlevelCalendarAvailabilityCheck() {
        return value instanceof GohighlevelCalendarAvailabilityCheckValue;
    }

    public boolean isGohighlevelCalendarEventCreate() {
        return value instanceof GohighlevelCalendarEventCreateValue;
    }

    public boolean isGohighlevelContactCreate() {
        return value instanceof GohighlevelContactCreateValue;
    }

    public boolean isGohighlevelContactGet() {
        return value instanceof GohighlevelContactGetValue;
    }

    public boolean _isUnknown() {
        return value instanceof _UnknownValue;
    }

    public Optional<ApiRequestTool> getApiRequest() {
        if (isApiRequest()) {
            return Optional.of(((ApiRequestValue) value).value);
        }
        return Optional.empty();
    }

    public Optional<DtmfTool> getDtmf() {
        if (isDtmf()) {
            return Optional.of(((DtmfValue) value).value);
        }
        return Optional.empty();
    }

    public Optional<EndCallTool> getEndCall() {
        if (isEndCall()) {
            return Optional.of(((EndCallValue) value).value);
        }
        return Optional.empty();
    }

    public Optional<FunctionTool> getFunction() {
        if (isFunction()) {
            return Optional.of(((FunctionValue) value).value);
        }
        return Optional.empty();
    }

    public Optional<GhlTool> getGhl() {
        if (isGhl()) {
            return Optional.of(((GhlValue) value).value);
        }
        return Optional.empty();
    }

    public Optional<MakeTool> getMake() {
        if (isMake()) {
            return Optional.of(((MakeValue) value).value);
        }
        return Optional.empty();
    }

    public Optional<TransferCallTool> getTransferCall() {
        if (isTransferCall()) {
            return Optional.of(((TransferCallValue) value).value);
        }
        return Optional.empty();
    }

    public Optional<OutputTool> getOutput() {
        if (isOutput()) {
            return Optional.of(((OutputValue) value).value);
        }
        return Optional.empty();
    }

    public Optional<BashTool> getBash() {
        if (isBash()) {
            return Optional.of(((BashValue) value).value);
        }
        return Optional.empty();
    }

    public Optional<ComputerTool> getComputer() {
        if (isComputer()) {
            return Optional.of(((ComputerValue) value).value);
        }
        return Optional.empty();
    }

    public Optional<TextEditorTool> getTextEditor() {
        if (isTextEditor()) {
            return Optional.of(((TextEditorValue) value).value);
        }
        return Optional.empty();
    }

    public Optional<QueryTool> getQuery() {
        if (isQuery()) {
            return Optional.of(((QueryValue) value).value);
        }
        return Optional.empty();
    }

    public Optional<GoogleCalendarCreateEventTool> getGoogleCalendarEventCreate() {
        if (isGoogleCalendarEventCreate()) {
            return Optional.of(((GoogleCalendarEventCreateValue) value).value);
        }
        return Optional.empty();
    }

    public Optional<GoogleSheetsRowAppendTool> getGoogleSheetsRowAppend() {
        if (isGoogleSheetsRowAppend()) {
            return Optional.of(((GoogleSheetsRowAppendValue) value).value);
        }
        return Optional.empty();
    }

    public Optional<GoogleCalendarCheckAvailabilityTool> getGoogleCalendarAvailabilityCheck() {
        if (isGoogleCalendarAvailabilityCheck()) {
            return Optional.of(((GoogleCalendarAvailabilityCheckValue) value).value);
        }
        return Optional.empty();
    }

    public Optional<SlackSendMessageTool> getSlackMessageSend() {
        if (isSlackMessageSend()) {
            return Optional.of(((SlackMessageSendValue) value).value);
        }
        return Optional.empty();
    }

    public Optional<SmsTool> getSms() {
        if (isSms()) {
            return Optional.of(((SmsValue) value).value);
        }
        return Optional.empty();
    }

    public Optional<McpTool> getMcp() {
        if (isMcp()) {
            return Optional.of(((McpValue) value).value);
        }
        return Optional.empty();
    }

    public Optional<GoHighLevelCalendarAvailabilityTool> getGohighlevelCalendarAvailabilityCheck() {
        if (isGohighlevelCalendarAvailabilityCheck()) {
            return Optional.of(((GohighlevelCalendarAvailabilityCheckValue) value).value);
        }
        return Optional.empty();
    }

    public Optional<GoHighLevelCalendarEventCreateTool> getGohighlevelCalendarEventCreate() {
        if (isGohighlevelCalendarEventCreate()) {
            return Optional.of(((GohighlevelCalendarEventCreateValue) value).value);
        }
        return Optional.empty();
    }

    public Optional<GoHighLevelContactCreateTool> getGohighlevelContactCreate() {
        if (isGohighlevelContactCreate()) {
            return Optional.of(((GohighlevelContactCreateValue) value).value);
        }
        return Optional.empty();
    }

    public Optional<GoHighLevelContactGetTool> getGohighlevelContactGet() {
        if (isGohighlevelContactGet()) {
            return Optional.of(((GohighlevelContactGetValue) value).value);
        }
        return Optional.empty();
    }

    public Optional<Object> _getUnknown() {
        if (_isUnknown()) {
            return Optional.of(((_UnknownValue) value).value);
        }
        return Optional.empty();
    }

    @JsonValue
    private Value getValue() {
        return this.value;
    }

    public interface Visitor<T> {
        T visitApiRequest(ApiRequestTool apiRequest);

        T visitDtmf(DtmfTool dtmf);

        T visitEndCall(EndCallTool endCall);

        T visitFunction(FunctionTool function);

        T visitGhl(GhlTool ghl);

        T visitMake(MakeTool make);

        T visitTransferCall(TransferCallTool transferCall);

        T visitOutput(OutputTool output);

        T visitBash(BashTool bash);

        T visitComputer(ComputerTool computer);

        T visitTextEditor(TextEditorTool textEditor);

        T visitQuery(QueryTool query);

        T visitGoogleCalendarEventCreate(GoogleCalendarCreateEventTool googleCalendarEventCreate);

        T visitGoogleSheetsRowAppend(GoogleSheetsRowAppendTool googleSheetsRowAppend);

        T visitGoogleCalendarAvailabilityCheck(GoogleCalendarCheckAvailabilityTool googleCalendarAvailabilityCheck);

        T visitSlackMessageSend(SlackSendMessageTool slackMessageSend);

        T visitSms(SmsTool sms);

        T visitMcp(McpTool mcp);

        T visitGohighlevelCalendarAvailabilityCheck(
                GoHighLevelCalendarAvailabilityTool gohighlevelCalendarAvailabilityCheck);

        T visitGohighlevelCalendarEventCreate(GoHighLevelCalendarEventCreateTool gohighlevelCalendarEventCreate);

        T visitGohighlevelContactCreate(GoHighLevelContactCreateTool gohighlevelContactCreate);

        T visitGohighlevelContactGet(GoHighLevelContactGetTool gohighlevelContactGet);

        T _visitUnknown(Object unknownType);
    }

    @JsonTypeInfo(use = JsonTypeInfo.Id.NAME, property = "type", visible = true, defaultImpl = _UnknownValue.class)
    @JsonSubTypes({
        @JsonSubTypes.Type(ApiRequestValue.class),
        @JsonSubTypes.Type(DtmfValue.class),
        @JsonSubTypes.Type(EndCallValue.class),
        @JsonSubTypes.Type(FunctionValue.class),
        @JsonSubTypes.Type(GhlValue.class),
        @JsonSubTypes.Type(MakeValue.class),
        @JsonSubTypes.Type(TransferCallValue.class),
        @JsonSubTypes.Type(OutputValue.class),
        @JsonSubTypes.Type(BashValue.class),
        @JsonSubTypes.Type(ComputerValue.class),
        @JsonSubTypes.Type(TextEditorValue.class),
        @JsonSubTypes.Type(QueryValue.class),
        @JsonSubTypes.Type(GoogleCalendarEventCreateValue.class),
        @JsonSubTypes.Type(GoogleSheetsRowAppendValue.class),
        @JsonSubTypes.Type(GoogleCalendarAvailabilityCheckValue.class),
        @JsonSubTypes.Type(SlackMessageSendValue.class),
        @JsonSubTypes.Type(SmsValue.class),
        @JsonSubTypes.Type(McpValue.class),
        @JsonSubTypes.Type(GohighlevelCalendarAvailabilityCheckValue.class),
        @JsonSubTypes.Type(GohighlevelCalendarEventCreateValue.class),
        @JsonSubTypes.Type(GohighlevelContactCreateValue.class),
        @JsonSubTypes.Type(GohighlevelContactGetValue.class)
    })
    @JsonIgnoreProperties(ignoreUnknown = true)
    private interface Value {
        <T> T visit(Visitor<T> visitor);
    }

    @JsonTypeName("apiRequest")
    @JsonIgnoreProperties("type")
    private static final class ApiRequestValue implements Value {
        @JsonUnwrapped
        private ApiRequestTool value;

        @JsonCreator(mode = JsonCreator.Mode.PROPERTIES)
        private ApiRequestValue() {}

        private ApiRequestValue(ApiRequestTool value) {
            this.value = value;
        }

        @java.lang.Override
        public <T> T visit(Visitor<T> visitor) {
            return visitor.visitApiRequest(value);
        }

        @java.lang.Override
        public boolean equals(Object other) {
            if (this == other) return true;
            return other instanceof ApiRequestValue && equalTo((ApiRequestValue) other);
        }

        private boolean equalTo(ApiRequestValue other) {
            return value.equals(other.value);
        }

        @java.lang.Override
        public int hashCode() {
            return Objects.hash(this.value);
        }

        @java.lang.Override
        public String toString() {
            return "ToolsUpdateResponse{" + "value: " + value + "}";
        }
    }

    @JsonTypeName("dtmf")
    @JsonIgnoreProperties("type")
    private static final class DtmfValue implements Value {
        @JsonUnwrapped
        private DtmfTool value;

        @JsonCreator(mode = JsonCreator.Mode.PROPERTIES)
        private DtmfValue() {}

        private DtmfValue(DtmfTool value) {
            this.value = value;
        }

        @java.lang.Override
        public <T> T visit(Visitor<T> visitor) {
            return visitor.visitDtmf(value);
        }

        @java.lang.Override
        public boolean equals(Object other) {
            if (this == other) return true;
            return other instanceof DtmfValue && equalTo((DtmfValue) other);
        }

        private boolean equalTo(DtmfValue other) {
            return value.equals(other.value);
        }

        @java.lang.Override
        public int hashCode() {
            return Objects.hash(this.value);
        }

        @java.lang.Override
        public String toString() {
            return "ToolsUpdateResponse{" + "value: " + value + "}";
        }
    }

    @JsonTypeName("endCall")
    @JsonIgnoreProperties("type")
    private static final class EndCallValue implements Value {
        @JsonUnwrapped
        private EndCallTool value;

        @JsonCreator(mode = JsonCreator.Mode.PROPERTIES)
        private EndCallValue() {}

        private EndCallValue(EndCallTool value) {
            this.value = value;
        }

        @java.lang.Override
        public <T> T visit(Visitor<T> visitor) {
            return visitor.visitEndCall(value);
        }

        @java.lang.Override
        public boolean equals(Object other) {
            if (this == other) return true;
            return other instanceof EndCallValue && equalTo((EndCallValue) other);
        }

        private boolean equalTo(EndCallValue other) {
            return value.equals(other.value);
        }

        @java.lang.Override
        public int hashCode() {
            return Objects.hash(this.value);
        }

        @java.lang.Override
        public String toString() {
            return "ToolsUpdateResponse{" + "value: " + value + "}";
        }
    }

    @JsonTypeName("function")
    @JsonIgnoreProperties("type")
    private static final class FunctionValue implements Value {
        @JsonUnwrapped
        private FunctionTool value;

        @JsonCreator(mode = JsonCreator.Mode.PROPERTIES)
        private FunctionValue() {}

        private FunctionValue(FunctionTool value) {
            this.value = value;
        }

        @java.lang.Override
        public <T> T visit(Visitor<T> visitor) {
            return visitor.visitFunction(value);
        }

        @java.lang.Override
        public boolean equals(Object other) {
            if (this == other) return true;
            return other instanceof FunctionValue && equalTo((FunctionValue) other);
        }

        private boolean equalTo(FunctionValue other) {
            return value.equals(other.value);
        }

        @java.lang.Override
        public int hashCode() {
            return Objects.hash(this.value);
        }

        @java.lang.Override
        public String toString() {
            return "ToolsUpdateResponse{" + "value: " + value + "}";
        }
    }

    @JsonTypeName("ghl")
    @JsonIgnoreProperties("type")
    private static final class GhlValue implements Value {
        @JsonUnwrapped
        private GhlTool value;

        @JsonCreator(mode = JsonCreator.Mode.PROPERTIES)
        private GhlValue() {}

        private GhlValue(GhlTool value) {
            this.value = value;
        }

        @java.lang.Override
        public <T> T visit(Visitor<T> visitor) {
            return visitor.visitGhl(value);
        }

        @java.lang.Override
        public boolean equals(Object other) {
            if (this == other) return true;
            return other instanceof GhlValue && equalTo((GhlValue) other);
        }

        private boolean equalTo(GhlValue other) {
            return value.equals(other.value);
        }

        @java.lang.Override
        public int hashCode() {
            return Objects.hash(this.value);
        }

        @java.lang.Override
        public String toString() {
            return "ToolsUpdateResponse{" + "value: " + value + "}";
        }
    }

    @JsonTypeName("make")
    @JsonIgnoreProperties("type")
    private static final class MakeValue implements Value {
        @JsonUnwrapped
        private MakeTool value;

        @JsonCreator(mode = JsonCreator.Mode.PROPERTIES)
        private MakeValue() {}

        private MakeValue(MakeTool value) {
            this.value = value;
        }

        @java.lang.Override
        public <T> T visit(Visitor<T> visitor) {
            return visitor.visitMake(value);
        }

        @java.lang.Override
        public boolean equals(Object other) {
            if (this == other) return true;
            return other instanceof MakeValue && equalTo((MakeValue) other);
        }

        private boolean equalTo(MakeValue other) {
            return value.equals(other.value);
        }

        @java.lang.Override
        public int hashCode() {
            return Objects.hash(this.value);
        }

        @java.lang.Override
        public String toString() {
            return "ToolsUpdateResponse{" + "value: " + value + "}";
        }
    }

    @JsonTypeName("transferCall")
    @JsonIgnoreProperties("type")
    private static final class TransferCallValue implements Value {
        @JsonUnwrapped
        private TransferCallTool value;

        @JsonCreator(mode = JsonCreator.Mode.PROPERTIES)
        private TransferCallValue() {}

        private TransferCallValue(TransferCallTool value) {
            this.value = value;
        }

        @java.lang.Override
        public <T> T visit(Visitor<T> visitor) {
            return visitor.visitTransferCall(value);
        }

        @java.lang.Override
        public boolean equals(Object other) {
            if (this == other) return true;
            return other instanceof TransferCallValue && equalTo((TransferCallValue) other);
        }

        private boolean equalTo(TransferCallValue other) {
            return value.equals(other.value);
        }

        @java.lang.Override
        public int hashCode() {
            return Objects.hash(this.value);
        }

        @java.lang.Override
        public String toString() {
            return "ToolsUpdateResponse{" + "value: " + value + "}";
        }
    }

    @JsonTypeName("output")
    @JsonIgnoreProperties("type")
    private static final class OutputValue implements Value {
        @JsonUnwrapped
        private OutputTool value;

        @JsonCreator(mode = JsonCreator.Mode.PROPERTIES)
        private OutputValue() {}

        private OutputValue(OutputTool value) {
            this.value = value;
        }

        @java.lang.Override
        public <T> T visit(Visitor<T> visitor) {
            return visitor.visitOutput(value);
        }

        @java.lang.Override
        public boolean equals(Object other) {
            if (this == other) return true;
            return other instanceof OutputValue && equalTo((OutputValue) other);
        }

        private boolean equalTo(OutputValue other) {
            return value.equals(other.value);
        }

        @java.lang.Override
        public int hashCode() {
            return Objects.hash(this.value);
        }

        @java.lang.Override
        public String toString() {
            return "ToolsUpdateResponse{" + "value: " + value + "}";
        }
    }

    @JsonTypeName("bash")
    @JsonIgnoreProperties("type")
    private static final class BashValue implements Value {
        @JsonUnwrapped
        private BashTool value;

        @JsonCreator(mode = JsonCreator.Mode.PROPERTIES)
        private BashValue() {}

        private BashValue(BashTool value) {
            this.value = value;
        }

        @java.lang.Override
        public <T> T visit(Visitor<T> visitor) {
            return visitor.visitBash(value);
        }

        @java.lang.Override
        public boolean equals(Object other) {
            if (this == other) return true;
            return other instanceof BashValue && equalTo((BashValue) other);
        }

        private boolean equalTo(BashValue other) {
            return value.equals(other.value);
        }

        @java.lang.Override
        public int hashCode() {
            return Objects.hash(this.value);
        }

        @java.lang.Override
        public String toString() {
            return "ToolsUpdateResponse{" + "value: " + value + "}";
        }
    }

    @JsonTypeName("computer")
    @JsonIgnoreProperties("type")
    private static final class ComputerValue implements Value {
        @JsonUnwrapped
        private ComputerTool value;

        @JsonCreator(mode = JsonCreator.Mode.PROPERTIES)
        private ComputerValue() {}

        private ComputerValue(ComputerTool value) {
            this.value = value;
        }

        @java.lang.Override
        public <T> T visit(Visitor<T> visitor) {
            return visitor.visitComputer(value);
        }

        @java.lang.Override
        public boolean equals(Object other) {
            if (this == other) return true;
            return other instanceof ComputerValue && equalTo((ComputerValue) other);
        }

        private boolean equalTo(ComputerValue other) {
            return value.equals(other.value);
        }

        @java.lang.Override
        public int hashCode() {
            return Objects.hash(this.value);
        }

        @java.lang.Override
        public String toString() {
            return "ToolsUpdateResponse{" + "value: " + value + "}";
        }
    }

    @JsonTypeName("textEditor")
    @JsonIgnoreProperties("type")
    private static final class TextEditorValue implements Value {
        @JsonUnwrapped
        private TextEditorTool value;

        @JsonCreator(mode = JsonCreator.Mode.PROPERTIES)
        private TextEditorValue() {}

        private TextEditorValue(TextEditorTool value) {
            this.value = value;
        }

        @java.lang.Override
        public <T> T visit(Visitor<T> visitor) {
            return visitor.visitTextEditor(value);
        }

        @java.lang.Override
        public boolean equals(Object other) {
            if (this == other) return true;
            return other instanceof TextEditorValue && equalTo((TextEditorValue) other);
        }

        private boolean equalTo(TextEditorValue other) {
            return value.equals(other.value);
        }

        @java.lang.Override
        public int hashCode() {
            return Objects.hash(this.value);
        }

        @java.lang.Override
        public String toString() {
            return "ToolsUpdateResponse{" + "value: " + value + "}";
        }
    }

    @JsonTypeName("query")
    @JsonIgnoreProperties("type")
    private static final class QueryValue implements Value {
        @JsonUnwrapped
        private QueryTool value;

        @JsonCreator(mode = JsonCreator.Mode.PROPERTIES)
        private QueryValue() {}

        private QueryValue(QueryTool value) {
            this.value = value;
        }

        @java.lang.Override
        public <T> T visit(Visitor<T> visitor) {
            return visitor.visitQuery(value);
        }

        @java.lang.Override
        public boolean equals(Object other) {
            if (this == other) return true;
            return other instanceof QueryValue && equalTo((QueryValue) other);
        }

        private boolean equalTo(QueryValue other) {
            return value.equals(other.value);
        }

        @java.lang.Override
        public int hashCode() {
            return Objects.hash(this.value);
        }

        @java.lang.Override
        public String toString() {
            return "ToolsUpdateResponse{" + "value: " + value + "}";
        }
    }

    @JsonTypeName("google.calendar.event.create")
    @JsonIgnoreProperties("type")
    private static final class GoogleCalendarEventCreateValue implements Value {
        @JsonUnwrapped
        private GoogleCalendarCreateEventTool value;

        @JsonCreator(mode = JsonCreator.Mode.PROPERTIES)
        private GoogleCalendarEventCreateValue() {}

        private GoogleCalendarEventCreateValue(GoogleCalendarCreateEventTool value) {
            this.value = value;
        }

        @java.lang.Override
        public <T> T visit(Visitor<T> visitor) {
            return visitor.visitGoogleCalendarEventCreate(value);
        }

        @java.lang.Override
        public boolean equals(Object other) {
            if (this == other) return true;
            return other instanceof GoogleCalendarEventCreateValue && equalTo((GoogleCalendarEventCreateValue) other);
        }

        private boolean equalTo(GoogleCalendarEventCreateValue other) {
            return value.equals(other.value);
        }

        @java.lang.Override
        public int hashCode() {
            return Objects.hash(this.value);
        }

        @java.lang.Override
        public String toString() {
            return "ToolsUpdateResponse{" + "value: " + value + "}";
        }
    }

    @JsonTypeName("google.sheets.row.append")
    @JsonIgnoreProperties("type")
    private static final class GoogleSheetsRowAppendValue implements Value {
        @JsonUnwrapped
        private GoogleSheetsRowAppendTool value;

        @JsonCreator(mode = JsonCreator.Mode.PROPERTIES)
        private GoogleSheetsRowAppendValue() {}

        private GoogleSheetsRowAppendValue(GoogleSheetsRowAppendTool value) {
            this.value = value;
        }

        @java.lang.Override
        public <T> T visit(Visitor<T> visitor) {
            return visitor.visitGoogleSheetsRowAppend(value);
        }

        @java.lang.Override
        public boolean equals(Object other) {
            if (this == other) return true;
            return other instanceof GoogleSheetsRowAppendValue && equalTo((GoogleSheetsRowAppendValue) other);
        }

        private boolean equalTo(GoogleSheetsRowAppendValue other) {
            return value.equals(other.value);
        }

        @java.lang.Override
        public int hashCode() {
            return Objects.hash(this.value);
        }

        @java.lang.Override
        public String toString() {
            return "ToolsUpdateResponse{" + "value: " + value + "}";
        }
    }

    @JsonTypeName("google.calendar.availability.check")
    @JsonIgnoreProperties("type")
    private static final class GoogleCalendarAvailabilityCheckValue implements Value {
        @JsonUnwrapped
        private GoogleCalendarCheckAvailabilityTool value;

        @JsonCreator(mode = JsonCreator.Mode.PROPERTIES)
        private GoogleCalendarAvailabilityCheckValue() {}

        private GoogleCalendarAvailabilityCheckValue(GoogleCalendarCheckAvailabilityTool value) {
            this.value = value;
        }

        @java.lang.Override
        public <T> T visit(Visitor<T> visitor) {
            return visitor.visitGoogleCalendarAvailabilityCheck(value);
        }

        @java.lang.Override
        public boolean equals(Object other) {
            if (this == other) return true;
            return other instanceof GoogleCalendarAvailabilityCheckValue
                    && equalTo((GoogleCalendarAvailabilityCheckValue) other);
        }

        private boolean equalTo(GoogleCalendarAvailabilityCheckValue other) {
            return value.equals(other.value);
        }

        @java.lang.Override
        public int hashCode() {
            return Objects.hash(this.value);
        }

        @java.lang.Override
        public String toString() {
            return "ToolsUpdateResponse{" + "value: " + value + "}";
        }
    }

    @JsonTypeName("slack.message.send")
    @JsonIgnoreProperties("type")
    private static final class SlackMessageSendValue implements Value {
        @JsonUnwrapped
        private SlackSendMessageTool value;

        @JsonCreator(mode = JsonCreator.Mode.PROPERTIES)
        private SlackMessageSendValue() {}

        private SlackMessageSendValue(SlackSendMessageTool value) {
            this.value = value;
        }

        @java.lang.Override
        public <T> T visit(Visitor<T> visitor) {
            return visitor.visitSlackMessageSend(value);
        }

        @java.lang.Override
        public boolean equals(Object other) {
            if (this == other) return true;
            return other instanceof SlackMessageSendValue && equalTo((SlackMessageSendValue) other);
        }

        private boolean equalTo(SlackMessageSendValue other) {
            return value.equals(other.value);
        }

        @java.lang.Override
        public int hashCode() {
            return Objects.hash(this.value);
        }

        @java.lang.Override
        public String toString() {
            return "ToolsUpdateResponse{" + "value: " + value + "}";
        }
    }

    @JsonTypeName("sms")
    @JsonIgnoreProperties("type")
    private static final class SmsValue implements Value {
        @JsonUnwrapped
        private SmsTool value;

        @JsonCreator(mode = JsonCreator.Mode.PROPERTIES)
        private SmsValue() {}

        private SmsValue(SmsTool value) {
            this.value = value;
        }

        @java.lang.Override
        public <T> T visit(Visitor<T> visitor) {
            return visitor.visitSms(value);
        }

        @java.lang.Override
        public boolean equals(Object other) {
            if (this == other) return true;
            return other instanceof SmsValue && equalTo((SmsValue) other);
        }

        private boolean equalTo(SmsValue other) {
            return value.equals(other.value);
        }

        @java.lang.Override
        public int hashCode() {
            return Objects.hash(this.value);
        }

        @java.lang.Override
        public String toString() {
            return "ToolsUpdateResponse{" + "value: " + value + "}";
        }
    }

    @JsonTypeName("mcp")
    @JsonIgnoreProperties("type")
    private static final class McpValue implements Value {
        @JsonUnwrapped
        private McpTool value;

        @JsonCreator(mode = JsonCreator.Mode.PROPERTIES)
        private McpValue() {}

        private McpValue(McpTool value) {
            this.value = value;
        }

        @java.lang.Override
        public <T> T visit(Visitor<T> visitor) {
            return visitor.visitMcp(value);
        }

        @java.lang.Override
        public boolean equals(Object other) {
            if (this == other) return true;
            return other instanceof McpValue && equalTo((McpValue) other);
        }

        private boolean equalTo(McpValue other) {
            return value.equals(other.value);
        }

        @java.lang.Override
        public int hashCode() {
            return Objects.hash(this.value);
        }

        @java.lang.Override
        public String toString() {
            return "ToolsUpdateResponse{" + "value: " + value + "}";
        }
    }

    @JsonTypeName("gohighlevel.calendar.availability.check")
    @JsonIgnoreProperties("type")
    private static final class GohighlevelCalendarAvailabilityCheckValue implements Value {
        @JsonUnwrapped
        private GoHighLevelCalendarAvailabilityTool value;

        @JsonCreator(mode = JsonCreator.Mode.PROPERTIES)
        private GohighlevelCalendarAvailabilityCheckValue() {}

        private GohighlevelCalendarAvailabilityCheckValue(GoHighLevelCalendarAvailabilityTool value) {
            this.value = value;
        }

        @java.lang.Override
        public <T> T visit(Visitor<T> visitor) {
            return visitor.visitGohighlevelCalendarAvailabilityCheck(value);
        }

        @java.lang.Override
        public boolean equals(Object other) {
            if (this == other) return true;
            return other instanceof GohighlevelCalendarAvailabilityCheckValue
                    && equalTo((GohighlevelCalendarAvailabilityCheckValue) other);
        }

        private boolean equalTo(GohighlevelCalendarAvailabilityCheckValue other) {
            return value.equals(other.value);
        }

        @java.lang.Override
        public int hashCode() {
            return Objects.hash(this.value);
        }

        @java.lang.Override
        public String toString() {
            return "ToolsUpdateResponse{" + "value: " + value + "}";
        }
    }

    @JsonTypeName("gohighlevel.calendar.event.create")
    @JsonIgnoreProperties("type")
    private static final class GohighlevelCalendarEventCreateValue implements Value {
        @JsonUnwrapped
        private GoHighLevelCalendarEventCreateTool value;

        @JsonCreator(mode = JsonCreator.Mode.PROPERTIES)
        private GohighlevelCalendarEventCreateValue() {}

        private GohighlevelCalendarEventCreateValue(GoHighLevelCalendarEventCreateTool value) {
            this.value = value;
        }

        @java.lang.Override
        public <T> T visit(Visitor<T> visitor) {
            return visitor.visitGohighlevelCalendarEventCreate(value);
        }

        @java.lang.Override
        public boolean equals(Object other) {
            if (this == other) return true;
            return other instanceof GohighlevelCalendarEventCreateValue
                    && equalTo((GohighlevelCalendarEventCreateValue) other);
        }

        private boolean equalTo(GohighlevelCalendarEventCreateValue other) {
            return value.equals(other.value);
        }

        @java.lang.Override
        public int hashCode() {
            return Objects.hash(this.value);
        }

        @java.lang.Override
        public String toString() {
            return "ToolsUpdateResponse{" + "value: " + value + "}";
        }
    }

    @JsonTypeName("gohighlevel.contact.create")
    @JsonIgnoreProperties("type")
    private static final class GohighlevelContactCreateValue implements Value {
        @JsonUnwrapped
        private GoHighLevelContactCreateTool value;

        @JsonCreator(mode = JsonCreator.Mode.PROPERTIES)
        private GohighlevelContactCreateValue() {}

        private GohighlevelContactCreateValue(GoHighLevelContactCreateTool value) {
            this.value = value;
        }

        @java.lang.Override
        public <T> T visit(Visitor<T> visitor) {
            return visitor.visitGohighlevelContactCreate(value);
        }

        @java.lang.Override
        public boolean equals(Object other) {
            if (this == other) return true;
            return other instanceof GohighlevelContactCreateValue && equalTo((GohighlevelContactCreateValue) other);
        }

        private boolean equalTo(GohighlevelContactCreateValue other) {
            return value.equals(other.value);
        }

        @java.lang.Override
        public int hashCode() {
            return Objects.hash(this.value);
        }

        @java.lang.Override
        public String toString() {
            return "ToolsUpdateResponse{" + "value: " + value + "}";
        }
    }

    @JsonTypeName("gohighlevel.contact.get")
    @JsonIgnoreProperties("type")
    private static final class GohighlevelContactGetValue implements Value {
        @JsonUnwrapped
        private GoHighLevelContactGetTool value;

        @JsonCreator(mode = JsonCreator.Mode.PROPERTIES)
        private GohighlevelContactGetValue() {}

        private GohighlevelContactGetValue(GoHighLevelContactGetTool value) {
            this.value = value;
        }

        @java.lang.Override
        public <T> T visit(Visitor<T> visitor) {
            return visitor.visitGohighlevelContactGet(value);
        }

        @java.lang.Override
        public boolean equals(Object other) {
            if (this == other) return true;
            return other instanceof GohighlevelContactGetValue && equalTo((GohighlevelContactGetValue) other);
        }

        private boolean equalTo(GohighlevelContactGetValue other) {
            return value.equals(other.value);
        }

        @java.lang.Override
        public int hashCode() {
            return Objects.hash(this.value);
        }

        @java.lang.Override
        public String toString() {
            return "ToolsUpdateResponse{" + "value: " + value + "}";
        }
    }

    @JsonIgnoreProperties("type")
    private static final class _UnknownValue implements Value {
        private String type;

        @JsonValue
        private Object value;

        @JsonCreator(mode = JsonCreator.Mode.PROPERTIES)
        private _UnknownValue(@JsonProperty("value") Object value) {}

        @java.lang.Override
        public <T> T visit(Visitor<T> visitor) {
            return visitor._visitUnknown(value);
        }

        @java.lang.Override
        public boolean equals(Object other) {
            if (this == other) return true;
            return other instanceof _UnknownValue && equalTo((_UnknownValue) other);
        }

        private boolean equalTo(_UnknownValue other) {
            return type.equals(other.type) && value.equals(other.value);
        }

        @java.lang.Override
        public int hashCode() {
            return Objects.hash(this.type, this.value);
        }

        @java.lang.Override
        public String toString() {
            return "ToolsUpdateResponse{" + "type: " + type + ", value: " + value + "}";
        }
    }
}
