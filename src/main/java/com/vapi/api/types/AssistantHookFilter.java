/**
 * This file was auto-generated by Fern from our API Definition.
 */
package com.vapi.api.types;

import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.annotation.Nulls;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.vapi.api.core.ObjectMappers;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import org.jetbrains.annotations.NotNull;

@JsonInclude(JsonInclude.Include.NON_ABSENT)
@JsonDeserialize(builder = AssistantHookFilter.Builder.class)
public final class AssistantHookFilter {
    private final String key;

    private final List<String> oneOf;

    private final Map<String, Object> additionalProperties;

    private AssistantHookFilter(String key, List<String> oneOf, Map<String, Object> additionalProperties) {
        this.key = key;
        this.oneOf = oneOf;
        this.additionalProperties = additionalProperties;
    }

    /**
     * @return This is the type of filter - currently only &quot;oneOf&quot; is supported
     */
    @JsonProperty("type")
    public String getType() {
        return "oneOf";
    }

    /**
     * @return This is the key to filter on (e.g. &quot;call.endedReason&quot;)
     */
    @JsonProperty("key")
    public String getKey() {
        return key;
    }

    /**
     * @return This is the array of possible values to match against
     */
    @JsonProperty("oneOf")
    public List<String> getOneOf() {
        return oneOf;
    }

    @java.lang.Override
    public boolean equals(Object other) {
        if (this == other) return true;
        return other instanceof AssistantHookFilter && equalTo((AssistantHookFilter) other);
    }

    @JsonAnyGetter
    public Map<String, Object> getAdditionalProperties() {
        return this.additionalProperties;
    }

    private boolean equalTo(AssistantHookFilter other) {
        return key.equals(other.key) && oneOf.equals(other.oneOf);
    }

    @java.lang.Override
    public int hashCode() {
        return Objects.hash(this.key, this.oneOf);
    }

    @java.lang.Override
    public String toString() {
        return ObjectMappers.stringify(this);
    }

    public static KeyStage builder() {
        return new Builder();
    }

    public interface KeyStage {
        /**
         * <p>This is the key to filter on (e.g. &quot;call.endedReason&quot;)</p>
         */
        _FinalStage key(@NotNull String key);

        Builder from(AssistantHookFilter other);
    }

    public interface _FinalStage {
        AssistantHookFilter build();

        /**
         * <p>This is the array of possible values to match against</p>
         */
        _FinalStage oneOf(List<String> oneOf);

        _FinalStage addOneOf(String oneOf);

        _FinalStage addAllOneOf(List<String> oneOf);
    }

    @JsonIgnoreProperties(ignoreUnknown = true)
    public static final class Builder implements KeyStage, _FinalStage {
        private String key;

        private List<String> oneOf = new ArrayList<>();

        @JsonAnySetter
        private Map<String, Object> additionalProperties = new HashMap<>();

        private Builder() {}

        @java.lang.Override
        public Builder from(AssistantHookFilter other) {
            key(other.getKey());
            oneOf(other.getOneOf());
            return this;
        }

        /**
         * <p>This is the key to filter on (e.g. &quot;call.endedReason&quot;)</p>
         * <p>This is the key to filter on (e.g. &quot;call.endedReason&quot;)</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        @JsonSetter("key")
        public _FinalStage key(@NotNull String key) {
            this.key = Objects.requireNonNull(key, "key must not be null");
            return this;
        }

        /**
         * <p>This is the array of possible values to match against</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        public _FinalStage addAllOneOf(List<String> oneOf) {
            this.oneOf.addAll(oneOf);
            return this;
        }

        /**
         * <p>This is the array of possible values to match against</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        public _FinalStage addOneOf(String oneOf) {
            this.oneOf.add(oneOf);
            return this;
        }

        /**
         * <p>This is the array of possible values to match against</p>
         */
        @java.lang.Override
        @JsonSetter(value = "oneOf", nulls = Nulls.SKIP)
        public _FinalStage oneOf(List<String> oneOf) {
            this.oneOf.clear();
            this.oneOf.addAll(oneOf);
            return this;
        }

        @java.lang.Override
        public AssistantHookFilter build() {
            return new AssistantHookFilter(key, oneOf, additionalProperties);
        }
    }
}
