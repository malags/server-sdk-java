/**
 * This file was auto-generated by Fern from our API Definition.
 */
package com.vapi.api.types;

import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.annotation.Nulls;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.vapi.api.core.ObjectMappers;
import java.util.HashMap;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import org.jetbrains.annotations.NotNull;

@JsonInclude(JsonInclude.Include.NON_ABSENT)
@JsonDeserialize(builder = TrieveKnowledgeBaseSearchPlan.Builder.class)
public final class TrieveKnowledgeBaseSearchPlan {
    private final Optional<Double> topK;

    private final Optional<Boolean> removeStopWords;

    private final Optional<Double> scoreThreshold;

    private final TrieveKnowledgeBaseSearchPlanSearchType searchType;

    private final Map<String, Object> additionalProperties;

    private TrieveKnowledgeBaseSearchPlan(
            Optional<Double> topK,
            Optional<Boolean> removeStopWords,
            Optional<Double> scoreThreshold,
            TrieveKnowledgeBaseSearchPlanSearchType searchType,
            Map<String, Object> additionalProperties) {
        this.topK = topK;
        this.removeStopWords = removeStopWords;
        this.scoreThreshold = scoreThreshold;
        this.searchType = searchType;
        this.additionalProperties = additionalProperties;
    }

    /**
     * @return Specifies the number of top chunks to return. This corresponds to the <code>page_size</code> parameter in Trieve.
     */
    @JsonProperty("topK")
    public Optional<Double> getTopK() {
        return topK;
    }

    /**
     * @return If true, stop words (specified in server/src/stop-words.txt in the git repo) will be removed. This will preserve queries that are entirely stop words.
     */
    @JsonProperty("removeStopWords")
    public Optional<Boolean> getRemoveStopWords() {
        return removeStopWords;
    }

    /**
     * @return This is the score threshold to filter out chunks with a score below the threshold for cosine distance metric. For Manhattan Distance, Euclidean Distance, and Dot Product, it will filter out scores above the threshold distance. This threshold applies before weight and bias modifications. If not specified, this defaults to no threshold. A threshold of 0 will default to no threshold.
     */
    @JsonProperty("scoreThreshold")
    public Optional<Double> getScoreThreshold() {
        return scoreThreshold;
    }

    /**
     * @return This is the search method used when searching for relevant chunks from the vector store.
     */
    @JsonProperty("searchType")
    public TrieveKnowledgeBaseSearchPlanSearchType getSearchType() {
        return searchType;
    }

    @java.lang.Override
    public boolean equals(Object other) {
        if (this == other) return true;
        return other instanceof TrieveKnowledgeBaseSearchPlan && equalTo((TrieveKnowledgeBaseSearchPlan) other);
    }

    @JsonAnyGetter
    public Map<String, Object> getAdditionalProperties() {
        return this.additionalProperties;
    }

    private boolean equalTo(TrieveKnowledgeBaseSearchPlan other) {
        return topK.equals(other.topK)
                && removeStopWords.equals(other.removeStopWords)
                && scoreThreshold.equals(other.scoreThreshold)
                && searchType.equals(other.searchType);
    }

    @java.lang.Override
    public int hashCode() {
        return Objects.hash(this.topK, this.removeStopWords, this.scoreThreshold, this.searchType);
    }

    @java.lang.Override
    public String toString() {
        return ObjectMappers.stringify(this);
    }

    public static SearchTypeStage builder() {
        return new Builder();
    }

    public interface SearchTypeStage {
        /**
         * <p>This is the search method used when searching for relevant chunks from the vector store.</p>
         */
        _FinalStage searchType(@NotNull TrieveKnowledgeBaseSearchPlanSearchType searchType);

        Builder from(TrieveKnowledgeBaseSearchPlan other);
    }

    public interface _FinalStage {
        TrieveKnowledgeBaseSearchPlan build();

        /**
         * <p>Specifies the number of top chunks to return. This corresponds to the <code>page_size</code> parameter in Trieve.</p>
         */
        _FinalStage topK(Optional<Double> topK);

        _FinalStage topK(Double topK);

        /**
         * <p>If true, stop words (specified in server/src/stop-words.txt in the git repo) will be removed. This will preserve queries that are entirely stop words.</p>
         */
        _FinalStage removeStopWords(Optional<Boolean> removeStopWords);

        _FinalStage removeStopWords(Boolean removeStopWords);

        /**
         * <p>This is the score threshold to filter out chunks with a score below the threshold for cosine distance metric. For Manhattan Distance, Euclidean Distance, and Dot Product, it will filter out scores above the threshold distance. This threshold applies before weight and bias modifications. If not specified, this defaults to no threshold. A threshold of 0 will default to no threshold.</p>
         */
        _FinalStage scoreThreshold(Optional<Double> scoreThreshold);

        _FinalStage scoreThreshold(Double scoreThreshold);
    }

    @JsonIgnoreProperties(ignoreUnknown = true)
    public static final class Builder implements SearchTypeStage, _FinalStage {
        private TrieveKnowledgeBaseSearchPlanSearchType searchType;

        private Optional<Double> scoreThreshold = Optional.empty();

        private Optional<Boolean> removeStopWords = Optional.empty();

        private Optional<Double> topK = Optional.empty();

        @JsonAnySetter
        private Map<String, Object> additionalProperties = new HashMap<>();

        private Builder() {}

        @java.lang.Override
        public Builder from(TrieveKnowledgeBaseSearchPlan other) {
            topK(other.getTopK());
            removeStopWords(other.getRemoveStopWords());
            scoreThreshold(other.getScoreThreshold());
            searchType(other.getSearchType());
            return this;
        }

        /**
         * <p>This is the search method used when searching for relevant chunks from the vector store.</p>
         * <p>This is the search method used when searching for relevant chunks from the vector store.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        @JsonSetter("searchType")
        public _FinalStage searchType(@NotNull TrieveKnowledgeBaseSearchPlanSearchType searchType) {
            this.searchType = Objects.requireNonNull(searchType, "searchType must not be null");
            return this;
        }

        /**
         * <p>This is the score threshold to filter out chunks with a score below the threshold for cosine distance metric. For Manhattan Distance, Euclidean Distance, and Dot Product, it will filter out scores above the threshold distance. This threshold applies before weight and bias modifications. If not specified, this defaults to no threshold. A threshold of 0 will default to no threshold.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        public _FinalStage scoreThreshold(Double scoreThreshold) {
            this.scoreThreshold = Optional.ofNullable(scoreThreshold);
            return this;
        }

        /**
         * <p>This is the score threshold to filter out chunks with a score below the threshold for cosine distance metric. For Manhattan Distance, Euclidean Distance, and Dot Product, it will filter out scores above the threshold distance. This threshold applies before weight and bias modifications. If not specified, this defaults to no threshold. A threshold of 0 will default to no threshold.</p>
         */
        @java.lang.Override
        @JsonSetter(value = "scoreThreshold", nulls = Nulls.SKIP)
        public _FinalStage scoreThreshold(Optional<Double> scoreThreshold) {
            this.scoreThreshold = scoreThreshold;
            return this;
        }

        /**
         * <p>If true, stop words (specified in server/src/stop-words.txt in the git repo) will be removed. This will preserve queries that are entirely stop words.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        public _FinalStage removeStopWords(Boolean removeStopWords) {
            this.removeStopWords = Optional.ofNullable(removeStopWords);
            return this;
        }

        /**
         * <p>If true, stop words (specified in server/src/stop-words.txt in the git repo) will be removed. This will preserve queries that are entirely stop words.</p>
         */
        @java.lang.Override
        @JsonSetter(value = "removeStopWords", nulls = Nulls.SKIP)
        public _FinalStage removeStopWords(Optional<Boolean> removeStopWords) {
            this.removeStopWords = removeStopWords;
            return this;
        }

        /**
         * <p>Specifies the number of top chunks to return. This corresponds to the <code>page_size</code> parameter in Trieve.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        public _FinalStage topK(Double topK) {
            this.topK = Optional.ofNullable(topK);
            return this;
        }

        /**
         * <p>Specifies the number of top chunks to return. This corresponds to the <code>page_size</code> parameter in Trieve.</p>
         */
        @java.lang.Override
        @JsonSetter(value = "topK", nulls = Nulls.SKIP)
        public _FinalStage topK(Optional<Double> topK) {
            this.topK = topK;
            return this;
        }

        @java.lang.Override
        public TrieveKnowledgeBaseSearchPlan build() {
            return new TrieveKnowledgeBaseSearchPlan(
                    topK, removeStopWords, scoreThreshold, searchType, additionalProperties);
        }
    }
}
