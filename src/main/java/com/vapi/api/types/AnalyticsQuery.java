/**
 * This file was auto-generated by Fern from our API Definition.
 */
package com.vapi.api.types;

import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.annotation.Nulls;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.vapi.api.core.ObjectMappers;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import org.jetbrains.annotations.NotNull;

@JsonInclude(JsonInclude.Include.NON_ABSENT)
@JsonDeserialize(builder = AnalyticsQuery.Builder.class)
public final class AnalyticsQuery {
    private final AnalyticsQueryTable table;

    private final Optional<List<AnalyticsQueryGroupByItem>> groupBy;

    private final String name;

    private final Optional<TimeRange> timeRange;

    private final List<AnalyticsOperation> operations;

    private final Map<String, Object> additionalProperties;

    private AnalyticsQuery(
            AnalyticsQueryTable table,
            Optional<List<AnalyticsQueryGroupByItem>> groupBy,
            String name,
            Optional<TimeRange> timeRange,
            List<AnalyticsOperation> operations,
            Map<String, Object> additionalProperties) {
        this.table = table;
        this.groupBy = groupBy;
        this.name = name;
        this.timeRange = timeRange;
        this.operations = operations;
        this.additionalProperties = additionalProperties;
    }

    /**
     * @return This is the table you want to query.
     */
    @JsonProperty("table")
    public AnalyticsQueryTable getTable() {
        return table;
    }

    /**
     * @return This is the list of columns you want to group by.
     */
    @JsonProperty("groupBy")
    public Optional<List<AnalyticsQueryGroupByItem>> getGroupBy() {
        return groupBy;
    }

    /**
     * @return This is the name of the query. This will be used to identify the query in the response.
     */
    @JsonProperty("name")
    public String getName() {
        return name;
    }

    /**
     * @return This is the time range for the query.
     */
    @JsonProperty("timeRange")
    public Optional<TimeRange> getTimeRange() {
        return timeRange;
    }

    /**
     * @return This is the list of operations you want to perform.
     */
    @JsonProperty("operations")
    public List<AnalyticsOperation> getOperations() {
        return operations;
    }

    @java.lang.Override
    public boolean equals(Object other) {
        if (this == other) return true;
        return other instanceof AnalyticsQuery && equalTo((AnalyticsQuery) other);
    }

    @JsonAnyGetter
    public Map<String, Object> getAdditionalProperties() {
        return this.additionalProperties;
    }

    private boolean equalTo(AnalyticsQuery other) {
        return table.equals(other.table)
                && groupBy.equals(other.groupBy)
                && name.equals(other.name)
                && timeRange.equals(other.timeRange)
                && operations.equals(other.operations);
    }

    @java.lang.Override
    public int hashCode() {
        return Objects.hash(this.table, this.groupBy, this.name, this.timeRange, this.operations);
    }

    @java.lang.Override
    public String toString() {
        return ObjectMappers.stringify(this);
    }

    public static TableStage builder() {
        return new Builder();
    }

    public interface TableStage {
        /**
         * <p>This is the table you want to query.</p>
         */
        NameStage table(@NotNull AnalyticsQueryTable table);

        Builder from(AnalyticsQuery other);
    }

    public interface NameStage {
        /**
         * <p>This is the name of the query. This will be used to identify the query in the response.</p>
         */
        _FinalStage name(@NotNull String name);
    }

    public interface _FinalStage {
        AnalyticsQuery build();

        /**
         * <p>This is the list of columns you want to group by.</p>
         */
        _FinalStage groupBy(Optional<List<AnalyticsQueryGroupByItem>> groupBy);

        _FinalStage groupBy(List<AnalyticsQueryGroupByItem> groupBy);

        /**
         * <p>This is the time range for the query.</p>
         */
        _FinalStage timeRange(Optional<TimeRange> timeRange);

        _FinalStage timeRange(TimeRange timeRange);

        /**
         * <p>This is the list of operations you want to perform.</p>
         */
        _FinalStage operations(List<AnalyticsOperation> operations);

        _FinalStage addOperations(AnalyticsOperation operations);

        _FinalStage addAllOperations(List<AnalyticsOperation> operations);
    }

    @JsonIgnoreProperties(ignoreUnknown = true)
    public static final class Builder implements TableStage, NameStage, _FinalStage {
        private AnalyticsQueryTable table;

        private String name;

        private List<AnalyticsOperation> operations = new ArrayList<>();

        private Optional<TimeRange> timeRange = Optional.empty();

        private Optional<List<AnalyticsQueryGroupByItem>> groupBy = Optional.empty();

        @JsonAnySetter
        private Map<String, Object> additionalProperties = new HashMap<>();

        private Builder() {}

        @java.lang.Override
        public Builder from(AnalyticsQuery other) {
            table(other.getTable());
            groupBy(other.getGroupBy());
            name(other.getName());
            timeRange(other.getTimeRange());
            operations(other.getOperations());
            return this;
        }

        /**
         * <p>This is the table you want to query.</p>
         * <p>This is the table you want to query.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        @JsonSetter("table")
        public NameStage table(@NotNull AnalyticsQueryTable table) {
            this.table = Objects.requireNonNull(table, "table must not be null");
            return this;
        }

        /**
         * <p>This is the name of the query. This will be used to identify the query in the response.</p>
         * <p>This is the name of the query. This will be used to identify the query in the response.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        @JsonSetter("name")
        public _FinalStage name(@NotNull String name) {
            this.name = Objects.requireNonNull(name, "name must not be null");
            return this;
        }

        /**
         * <p>This is the list of operations you want to perform.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        public _FinalStage addAllOperations(List<AnalyticsOperation> operations) {
            this.operations.addAll(operations);
            return this;
        }

        /**
         * <p>This is the list of operations you want to perform.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        public _FinalStage addOperations(AnalyticsOperation operations) {
            this.operations.add(operations);
            return this;
        }

        /**
         * <p>This is the list of operations you want to perform.</p>
         */
        @java.lang.Override
        @JsonSetter(value = "operations", nulls = Nulls.SKIP)
        public _FinalStage operations(List<AnalyticsOperation> operations) {
            this.operations.clear();
            this.operations.addAll(operations);
            return this;
        }

        /**
         * <p>This is the time range for the query.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        public _FinalStage timeRange(TimeRange timeRange) {
            this.timeRange = Optional.ofNullable(timeRange);
            return this;
        }

        /**
         * <p>This is the time range for the query.</p>
         */
        @java.lang.Override
        @JsonSetter(value = "timeRange", nulls = Nulls.SKIP)
        public _FinalStage timeRange(Optional<TimeRange> timeRange) {
            this.timeRange = timeRange;
            return this;
        }

        /**
         * <p>This is the list of columns you want to group by.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        public _FinalStage groupBy(List<AnalyticsQueryGroupByItem> groupBy) {
            this.groupBy = Optional.ofNullable(groupBy);
            return this;
        }

        /**
         * <p>This is the list of columns you want to group by.</p>
         */
        @java.lang.Override
        @JsonSetter(value = "groupBy", nulls = Nulls.SKIP)
        public _FinalStage groupBy(Optional<List<AnalyticsQueryGroupByItem>> groupBy) {
            this.groupBy = groupBy;
            return this;
        }

        @java.lang.Override
        public AnalyticsQuery build() {
            return new AnalyticsQuery(table, groupBy, name, timeRange, operations, additionalProperties);
        }
    }
}
