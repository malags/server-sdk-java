/**
 * This file was auto-generated by Fern from our API Definition.
 */
package com.vapi.api.types;

import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.annotation.Nulls;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.vapi.api.core.ObjectMappers;
import java.util.HashMap;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;

@JsonInclude(JsonInclude.Include.NON_ABSENT)
@JsonDeserialize(builder = UpdateToolTemplateDto.Builder.class)
public final class UpdateToolTemplateDto {
    private final Optional<UpdateToolTemplateDtoDetails> details;

    private final Optional<UpdateToolTemplateDtoProviderDetails> providerDetails;

    private final Optional<ToolTemplateMetadata> metadata;

    private final Optional<UpdateToolTemplateDtoVisibility> visibility;

    private final Optional<String> name;

    private final Optional<UpdateToolTemplateDtoProvider> provider;

    private final Map<String, Object> additionalProperties;

    private UpdateToolTemplateDto(
            Optional<UpdateToolTemplateDtoDetails> details,
            Optional<UpdateToolTemplateDtoProviderDetails> providerDetails,
            Optional<ToolTemplateMetadata> metadata,
            Optional<UpdateToolTemplateDtoVisibility> visibility,
            Optional<String> name,
            Optional<UpdateToolTemplateDtoProvider> provider,
            Map<String, Object> additionalProperties) {
        this.details = details;
        this.providerDetails = providerDetails;
        this.metadata = metadata;
        this.visibility = visibility;
        this.name = name;
        this.provider = provider;
        this.additionalProperties = additionalProperties;
    }

    @JsonProperty("details")
    public Optional<UpdateToolTemplateDtoDetails> getDetails() {
        return details;
    }

    @JsonProperty("providerDetails")
    public Optional<UpdateToolTemplateDtoProviderDetails> getProviderDetails() {
        return providerDetails;
    }

    @JsonProperty("metadata")
    public Optional<ToolTemplateMetadata> getMetadata() {
        return metadata;
    }

    @JsonProperty("visibility")
    public Optional<UpdateToolTemplateDtoVisibility> getVisibility() {
        return visibility;
    }

    @JsonProperty("type")
    public String getType() {
        return "tool";
    }

    /**
     * @return The name of the template. This is just for your own reference.
     */
    @JsonProperty("name")
    public Optional<String> getName() {
        return name;
    }

    @JsonProperty("provider")
    public Optional<UpdateToolTemplateDtoProvider> getProvider() {
        return provider;
    }

    @java.lang.Override
    public boolean equals(Object other) {
        if (this == other) return true;
        return other instanceof UpdateToolTemplateDto && equalTo((UpdateToolTemplateDto) other);
    }

    @JsonAnyGetter
    public Map<String, Object> getAdditionalProperties() {
        return this.additionalProperties;
    }

    private boolean equalTo(UpdateToolTemplateDto other) {
        return details.equals(other.details)
                && providerDetails.equals(other.providerDetails)
                && metadata.equals(other.metadata)
                && visibility.equals(other.visibility)
                && name.equals(other.name)
                && provider.equals(other.provider);
    }

    @java.lang.Override
    public int hashCode() {
        return Objects.hash(
                this.details, this.providerDetails, this.metadata, this.visibility, this.name, this.provider);
    }

    @java.lang.Override
    public String toString() {
        return ObjectMappers.stringify(this);
    }

    public static Builder builder() {
        return new Builder();
    }

    @JsonIgnoreProperties(ignoreUnknown = true)
    public static final class Builder {
        private Optional<UpdateToolTemplateDtoDetails> details = Optional.empty();

        private Optional<UpdateToolTemplateDtoProviderDetails> providerDetails = Optional.empty();

        private Optional<ToolTemplateMetadata> metadata = Optional.empty();

        private Optional<UpdateToolTemplateDtoVisibility> visibility = Optional.empty();

        private Optional<String> name = Optional.empty();

        private Optional<UpdateToolTemplateDtoProvider> provider = Optional.empty();

        @JsonAnySetter
        private Map<String, Object> additionalProperties = new HashMap<>();

        private Builder() {}

        public Builder from(UpdateToolTemplateDto other) {
            details(other.getDetails());
            providerDetails(other.getProviderDetails());
            metadata(other.getMetadata());
            visibility(other.getVisibility());
            name(other.getName());
            provider(other.getProvider());
            return this;
        }

        @JsonSetter(value = "details", nulls = Nulls.SKIP)
        public Builder details(Optional<UpdateToolTemplateDtoDetails> details) {
            this.details = details;
            return this;
        }

        public Builder details(UpdateToolTemplateDtoDetails details) {
            this.details = Optional.ofNullable(details);
            return this;
        }

        @JsonSetter(value = "providerDetails", nulls = Nulls.SKIP)
        public Builder providerDetails(Optional<UpdateToolTemplateDtoProviderDetails> providerDetails) {
            this.providerDetails = providerDetails;
            return this;
        }

        public Builder providerDetails(UpdateToolTemplateDtoProviderDetails providerDetails) {
            this.providerDetails = Optional.ofNullable(providerDetails);
            return this;
        }

        @JsonSetter(value = "metadata", nulls = Nulls.SKIP)
        public Builder metadata(Optional<ToolTemplateMetadata> metadata) {
            this.metadata = metadata;
            return this;
        }

        public Builder metadata(ToolTemplateMetadata metadata) {
            this.metadata = Optional.ofNullable(metadata);
            return this;
        }

        @JsonSetter(value = "visibility", nulls = Nulls.SKIP)
        public Builder visibility(Optional<UpdateToolTemplateDtoVisibility> visibility) {
            this.visibility = visibility;
            return this;
        }

        public Builder visibility(UpdateToolTemplateDtoVisibility visibility) {
            this.visibility = Optional.ofNullable(visibility);
            return this;
        }

        /**
         * <p>The name of the template. This is just for your own reference.</p>
         */
        @JsonSetter(value = "name", nulls = Nulls.SKIP)
        public Builder name(Optional<String> name) {
            this.name = name;
            return this;
        }

        public Builder name(String name) {
            this.name = Optional.ofNullable(name);
            return this;
        }

        @JsonSetter(value = "provider", nulls = Nulls.SKIP)
        public Builder provider(Optional<UpdateToolTemplateDtoProvider> provider) {
            this.provider = provider;
            return this;
        }

        public Builder provider(UpdateToolTemplateDtoProvider provider) {
            this.provider = Optional.ofNullable(provider);
            return this;
        }

        public UpdateToolTemplateDto build() {
            return new UpdateToolTemplateDto(
                    details, providerDetails, metadata, visibility, name, provider, additionalProperties);
        }
    }
}
