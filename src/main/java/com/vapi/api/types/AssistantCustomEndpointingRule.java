/**
 * This file was auto-generated by Fern from our API Definition.
 */
package com.vapi.api.types;

import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.annotation.Nulls;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.vapi.api.core.ObjectMappers;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import org.jetbrains.annotations.NotNull;

@JsonInclude(JsonInclude.Include.NON_ABSENT)
@JsonDeserialize(builder = AssistantCustomEndpointingRule.Builder.class)
public final class AssistantCustomEndpointingRule {
    private final String regex;

    private final Optional<List<RegexOption>> regexOptions;

    private final double timeoutSeconds;

    private final Map<String, Object> additionalProperties;

    private AssistantCustomEndpointingRule(
            String regex,
            Optional<List<RegexOption>> regexOptions,
            double timeoutSeconds,
            Map<String, Object> additionalProperties) {
        this.regex = regex;
        this.regexOptions = regexOptions;
        this.timeoutSeconds = timeoutSeconds;
        this.additionalProperties = additionalProperties;
    }

    /**
     * @return This is the regex pattern to match.
     * <p>Note:</p>
     * <ul>
     * <li>This works by using the <code>RegExp.test</code> method in Node.JS. Eg. <code>/hello/.test(&quot;hello there&quot;)</code> will return <code>true</code>.</li>
     * </ul>
     * <p>Hot tip:</p>
     * <ul>
     * <li>In JavaScript, escape <code>\</code> when sending the regex pattern. Eg. <code>&quot;hello\sthere&quot;</code> will be sent over the wire as <code>&quot;hellosthere&quot;</code>. Send <code>&quot;hello\\sthere&quot;</code> instead.</li>
     * <li><code>RegExp.test</code> does substring matching, so <code>/cat/.test(&quot;I love cats&quot;)</code> will return <code>true</code>. To do full string matching, send &quot;^cat$&quot;.</li>
     * </ul>
     */
    @JsonProperty("regex")
    public String getRegex() {
        return regex;
    }

    /**
     * @return These are the options for the regex match. Defaults to all disabled.
     * <p>@default []</p>
     */
    @JsonProperty("regexOptions")
    public Optional<List<RegexOption>> getRegexOptions() {
        return regexOptions;
    }

    /**
     * @return This is the endpointing timeout in seconds, if the rule is matched.
     */
    @JsonProperty("timeoutSeconds")
    public double getTimeoutSeconds() {
        return timeoutSeconds;
    }

    @java.lang.Override
    public boolean equals(Object other) {
        if (this == other) return true;
        return other instanceof AssistantCustomEndpointingRule && equalTo((AssistantCustomEndpointingRule) other);
    }

    @JsonAnyGetter
    public Map<String, Object> getAdditionalProperties() {
        return this.additionalProperties;
    }

    private boolean equalTo(AssistantCustomEndpointingRule other) {
        return regex.equals(other.regex)
                && regexOptions.equals(other.regexOptions)
                && timeoutSeconds == other.timeoutSeconds;
    }

    @java.lang.Override
    public int hashCode() {
        return Objects.hash(this.regex, this.regexOptions, this.timeoutSeconds);
    }

    @java.lang.Override
    public String toString() {
        return ObjectMappers.stringify(this);
    }

    public static RegexStage builder() {
        return new Builder();
    }

    public interface RegexStage {
        /**
         * <p>This is the regex pattern to match.</p>
         * <p>Note:</p>
         * <ul>
         * <li>This works by using the <code>RegExp.test</code> method in Node.JS. Eg. <code>/hello/.test(&quot;hello there&quot;)</code> will return <code>true</code>.</li>
         * </ul>
         * <p>Hot tip:</p>
         * <ul>
         * <li>In JavaScript, escape <code>\</code> when sending the regex pattern. Eg. <code>&quot;hello\sthere&quot;</code> will be sent over the wire as <code>&quot;hellosthere&quot;</code>. Send <code>&quot;hello\\sthere&quot;</code> instead.</li>
         * <li><code>RegExp.test</code> does substring matching, so <code>/cat/.test(&quot;I love cats&quot;)</code> will return <code>true</code>. To do full string matching, send &quot;^cat$&quot;.</li>
         * </ul>
         */
        TimeoutSecondsStage regex(@NotNull String regex);

        Builder from(AssistantCustomEndpointingRule other);
    }

    public interface TimeoutSecondsStage {
        /**
         * <p>This is the endpointing timeout in seconds, if the rule is matched.</p>
         */
        _FinalStage timeoutSeconds(double timeoutSeconds);
    }

    public interface _FinalStage {
        AssistantCustomEndpointingRule build();

        /**
         * <p>These are the options for the regex match. Defaults to all disabled.</p>
         * <p>@default []</p>
         */
        _FinalStage regexOptions(Optional<List<RegexOption>> regexOptions);

        _FinalStage regexOptions(List<RegexOption> regexOptions);
    }

    @JsonIgnoreProperties(ignoreUnknown = true)
    public static final class Builder implements RegexStage, TimeoutSecondsStage, _FinalStage {
        private String regex;

        private double timeoutSeconds;

        private Optional<List<RegexOption>> regexOptions = Optional.empty();

        @JsonAnySetter
        private Map<String, Object> additionalProperties = new HashMap<>();

        private Builder() {}

        @java.lang.Override
        public Builder from(AssistantCustomEndpointingRule other) {
            regex(other.getRegex());
            regexOptions(other.getRegexOptions());
            timeoutSeconds(other.getTimeoutSeconds());
            return this;
        }

        /**
         * <p>This is the regex pattern to match.</p>
         * <p>Note:</p>
         * <ul>
         * <li>This works by using the <code>RegExp.test</code> method in Node.JS. Eg. <code>/hello/.test(&quot;hello there&quot;)</code> will return <code>true</code>.</li>
         * </ul>
         * <p>Hot tip:</p>
         * <ul>
         * <li>In JavaScript, escape <code>\</code> when sending the regex pattern. Eg. <code>&quot;hello\sthere&quot;</code> will be sent over the wire as <code>&quot;hellosthere&quot;</code>. Send <code>&quot;hello\\sthere&quot;</code> instead.</li>
         * <li><code>RegExp.test</code> does substring matching, so <code>/cat/.test(&quot;I love cats&quot;)</code> will return <code>true</code>. To do full string matching, send &quot;^cat$&quot;.</li>
         * </ul>
         * <p>This is the regex pattern to match.</p>
         * <p>Note:</p>
         * <ul>
         * <li>This works by using the <code>RegExp.test</code> method in Node.JS. Eg. <code>/hello/.test(&quot;hello there&quot;)</code> will return <code>true</code>.</li>
         * </ul>
         * <p>Hot tip:</p>
         * <ul>
         * <li>In JavaScript, escape <code>\</code> when sending the regex pattern. Eg. <code>&quot;hello\sthere&quot;</code> will be sent over the wire as <code>&quot;hellosthere&quot;</code>. Send <code>&quot;hello\\sthere&quot;</code> instead.</li>
         * <li><code>RegExp.test</code> does substring matching, so <code>/cat/.test(&quot;I love cats&quot;)</code> will return <code>true</code>. To do full string matching, send &quot;^cat$&quot;.</li>
         * </ul>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        @JsonSetter("regex")
        public TimeoutSecondsStage regex(@NotNull String regex) {
            this.regex = Objects.requireNonNull(regex, "regex must not be null");
            return this;
        }

        /**
         * <p>This is the endpointing timeout in seconds, if the rule is matched.</p>
         * <p>This is the endpointing timeout in seconds, if the rule is matched.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        @JsonSetter("timeoutSeconds")
        public _FinalStage timeoutSeconds(double timeoutSeconds) {
            this.timeoutSeconds = timeoutSeconds;
            return this;
        }

        /**
         * <p>These are the options for the regex match. Defaults to all disabled.</p>
         * <p>@default []</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        public _FinalStage regexOptions(List<RegexOption> regexOptions) {
            this.regexOptions = Optional.ofNullable(regexOptions);
            return this;
        }

        /**
         * <p>These are the options for the regex match. Defaults to all disabled.</p>
         * <p>@default []</p>
         */
        @java.lang.Override
        @JsonSetter(value = "regexOptions", nulls = Nulls.SKIP)
        public _FinalStage regexOptions(Optional<List<RegexOption>> regexOptions) {
            this.regexOptions = regexOptions;
            return this;
        }

        @java.lang.Override
        public AssistantCustomEndpointingRule build() {
            return new AssistantCustomEndpointingRule(regex, regexOptions, timeoutSeconds, additionalProperties);
        }
    }
}
