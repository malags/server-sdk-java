/**
 * This file was auto-generated by Fern from our API Definition.
 */
package com.vapi.api.types;

import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.annotation.Nulls;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.vapi.api.core.ObjectMappers;
import java.time.OffsetDateTime;
import java.util.HashMap;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;

@JsonInclude(JsonInclude.Include.NON_ABSENT)
@JsonDeserialize(builder = TimeRange.Builder.class)
public final class TimeRange {
    private final Optional<TimeRangeStep> step;

    private final Optional<OffsetDateTime> start;

    private final Optional<OffsetDateTime> end;

    private final Optional<String> timezone;

    private final Map<String, Object> additionalProperties;

    private TimeRange(
            Optional<TimeRangeStep> step,
            Optional<OffsetDateTime> start,
            Optional<OffsetDateTime> end,
            Optional<String> timezone,
            Map<String, Object> additionalProperties) {
        this.step = step;
        this.start = start;
        this.end = end;
        this.timezone = timezone;
        this.additionalProperties = additionalProperties;
    }

    /**
     * @return This is the time step for aggregations.
     * <p>If not provided, defaults to returning for the entire time range.</p>
     */
    @JsonProperty("step")
    public Optional<TimeRangeStep> getStep() {
        return step;
    }

    /**
     * @return This is the start date for the time range.
     * <p>If not provided, defaults to the 7 days ago.</p>
     */
    @JsonProperty("start")
    public Optional<OffsetDateTime> getStart() {
        return start;
    }

    /**
     * @return This is the end date for the time range.
     * <p>If not provided, defaults to now.</p>
     */
    @JsonProperty("end")
    public Optional<OffsetDateTime> getEnd() {
        return end;
    }

    /**
     * @return This is the timezone you want to set for the query.
     * <p>If not provided, defaults to UTC.</p>
     */
    @JsonProperty("timezone")
    public Optional<String> getTimezone() {
        return timezone;
    }

    @java.lang.Override
    public boolean equals(Object other) {
        if (this == other) return true;
        return other instanceof TimeRange && equalTo((TimeRange) other);
    }

    @JsonAnyGetter
    public Map<String, Object> getAdditionalProperties() {
        return this.additionalProperties;
    }

    private boolean equalTo(TimeRange other) {
        return step.equals(other.step)
                && start.equals(other.start)
                && end.equals(other.end)
                && timezone.equals(other.timezone);
    }

    @java.lang.Override
    public int hashCode() {
        return Objects.hash(this.step, this.start, this.end, this.timezone);
    }

    @java.lang.Override
    public String toString() {
        return ObjectMappers.stringify(this);
    }

    public static Builder builder() {
        return new Builder();
    }

    @JsonIgnoreProperties(ignoreUnknown = true)
    public static final class Builder {
        private Optional<TimeRangeStep> step = Optional.empty();

        private Optional<OffsetDateTime> start = Optional.empty();

        private Optional<OffsetDateTime> end = Optional.empty();

        private Optional<String> timezone = Optional.empty();

        @JsonAnySetter
        private Map<String, Object> additionalProperties = new HashMap<>();

        private Builder() {}

        public Builder from(TimeRange other) {
            step(other.getStep());
            start(other.getStart());
            end(other.getEnd());
            timezone(other.getTimezone());
            return this;
        }

        /**
         * <p>This is the time step for aggregations.</p>
         * <p>If not provided, defaults to returning for the entire time range.</p>
         */
        @JsonSetter(value = "step", nulls = Nulls.SKIP)
        public Builder step(Optional<TimeRangeStep> step) {
            this.step = step;
            return this;
        }

        public Builder step(TimeRangeStep step) {
            this.step = Optional.ofNullable(step);
            return this;
        }

        /**
         * <p>This is the start date for the time range.</p>
         * <p>If not provided, defaults to the 7 days ago.</p>
         */
        @JsonSetter(value = "start", nulls = Nulls.SKIP)
        public Builder start(Optional<OffsetDateTime> start) {
            this.start = start;
            return this;
        }

        public Builder start(OffsetDateTime start) {
            this.start = Optional.ofNullable(start);
            return this;
        }

        /**
         * <p>This is the end date for the time range.</p>
         * <p>If not provided, defaults to now.</p>
         */
        @JsonSetter(value = "end", nulls = Nulls.SKIP)
        public Builder end(Optional<OffsetDateTime> end) {
            this.end = end;
            return this;
        }

        public Builder end(OffsetDateTime end) {
            this.end = Optional.ofNullable(end);
            return this;
        }

        /**
         * <p>This is the timezone you want to set for the query.</p>
         * <p>If not provided, defaults to UTC.</p>
         */
        @JsonSetter(value = "timezone", nulls = Nulls.SKIP)
        public Builder timezone(Optional<String> timezone) {
            this.timezone = timezone;
            return this;
        }

        public Builder timezone(String timezone) {
            this.timezone = Optional.ofNullable(timezone);
            return this;
        }

        public TimeRange build() {
            return new TimeRange(step, start, end, timezone, additionalProperties);
        }
    }
}
