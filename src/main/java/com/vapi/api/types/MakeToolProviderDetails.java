/**
 * This file was auto-generated by Fern from our API Definition.
 */
package com.vapi.api.types;

import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.annotation.Nulls;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.vapi.api.core.ObjectMappers;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;

@JsonInclude(JsonInclude.Include.NON_ABSENT)
@JsonDeserialize(builder = MakeToolProviderDetails.Builder.class)
public final class MakeToolProviderDetails {
    private final Optional<String> templateUrl;

    private final Optional<List<ToolTemplateSetup>> setupInstructions;

    private final Optional<Double> scenarioId;

    private final Optional<String> scenarioName;

    private final Optional<Double> triggerHookId;

    private final Optional<String> triggerHookName;

    private final Map<String, Object> additionalProperties;

    private MakeToolProviderDetails(
            Optional<String> templateUrl,
            Optional<List<ToolTemplateSetup>> setupInstructions,
            Optional<Double> scenarioId,
            Optional<String> scenarioName,
            Optional<Double> triggerHookId,
            Optional<String> triggerHookName,
            Map<String, Object> additionalProperties) {
        this.templateUrl = templateUrl;
        this.setupInstructions = setupInstructions;
        this.scenarioId = scenarioId;
        this.scenarioName = scenarioName;
        this.triggerHookId = triggerHookId;
        this.triggerHookName = triggerHookName;
        this.additionalProperties = additionalProperties;
    }

    /**
     * @return This is the Template URL or the Snapshot URL corresponding to the Template.
     */
    @JsonProperty("templateUrl")
    public Optional<String> getTemplateUrl() {
        return templateUrl;
    }

    @JsonProperty("setupInstructions")
    public Optional<List<ToolTemplateSetup>> getSetupInstructions() {
        return setupInstructions;
    }

    @JsonProperty("scenarioId")
    public Optional<Double> getScenarioId() {
        return scenarioId;
    }

    @JsonProperty("scenarioName")
    public Optional<String> getScenarioName() {
        return scenarioName;
    }

    @JsonProperty("triggerHookId")
    public Optional<Double> getTriggerHookId() {
        return triggerHookId;
    }

    @JsonProperty("triggerHookName")
    public Optional<String> getTriggerHookName() {
        return triggerHookName;
    }

    @java.lang.Override
    public boolean equals(Object other) {
        if (this == other) return true;
        return other instanceof MakeToolProviderDetails && equalTo((MakeToolProviderDetails) other);
    }

    @JsonAnyGetter
    public Map<String, Object> getAdditionalProperties() {
        return this.additionalProperties;
    }

    private boolean equalTo(MakeToolProviderDetails other) {
        return templateUrl.equals(other.templateUrl)
                && setupInstructions.equals(other.setupInstructions)
                && scenarioId.equals(other.scenarioId)
                && scenarioName.equals(other.scenarioName)
                && triggerHookId.equals(other.triggerHookId)
                && triggerHookName.equals(other.triggerHookName);
    }

    @java.lang.Override
    public int hashCode() {
        return Objects.hash(
                this.templateUrl,
                this.setupInstructions,
                this.scenarioId,
                this.scenarioName,
                this.triggerHookId,
                this.triggerHookName);
    }

    @java.lang.Override
    public String toString() {
        return ObjectMappers.stringify(this);
    }

    public static Builder builder() {
        return new Builder();
    }

    @JsonIgnoreProperties(ignoreUnknown = true)
    public static final class Builder {
        private Optional<String> templateUrl = Optional.empty();

        private Optional<List<ToolTemplateSetup>> setupInstructions = Optional.empty();

        private Optional<Double> scenarioId = Optional.empty();

        private Optional<String> scenarioName = Optional.empty();

        private Optional<Double> triggerHookId = Optional.empty();

        private Optional<String> triggerHookName = Optional.empty();

        @JsonAnySetter
        private Map<String, Object> additionalProperties = new HashMap<>();

        private Builder() {}

        public Builder from(MakeToolProviderDetails other) {
            templateUrl(other.getTemplateUrl());
            setupInstructions(other.getSetupInstructions());
            scenarioId(other.getScenarioId());
            scenarioName(other.getScenarioName());
            triggerHookId(other.getTriggerHookId());
            triggerHookName(other.getTriggerHookName());
            return this;
        }

        /**
         * <p>This is the Template URL or the Snapshot URL corresponding to the Template.</p>
         */
        @JsonSetter(value = "templateUrl", nulls = Nulls.SKIP)
        public Builder templateUrl(Optional<String> templateUrl) {
            this.templateUrl = templateUrl;
            return this;
        }

        public Builder templateUrl(String templateUrl) {
            this.templateUrl = Optional.ofNullable(templateUrl);
            return this;
        }

        @JsonSetter(value = "setupInstructions", nulls = Nulls.SKIP)
        public Builder setupInstructions(Optional<List<ToolTemplateSetup>> setupInstructions) {
            this.setupInstructions = setupInstructions;
            return this;
        }

        public Builder setupInstructions(List<ToolTemplateSetup> setupInstructions) {
            this.setupInstructions = Optional.ofNullable(setupInstructions);
            return this;
        }

        @JsonSetter(value = "scenarioId", nulls = Nulls.SKIP)
        public Builder scenarioId(Optional<Double> scenarioId) {
            this.scenarioId = scenarioId;
            return this;
        }

        public Builder scenarioId(Double scenarioId) {
            this.scenarioId = Optional.ofNullable(scenarioId);
            return this;
        }

        @JsonSetter(value = "scenarioName", nulls = Nulls.SKIP)
        public Builder scenarioName(Optional<String> scenarioName) {
            this.scenarioName = scenarioName;
            return this;
        }

        public Builder scenarioName(String scenarioName) {
            this.scenarioName = Optional.ofNullable(scenarioName);
            return this;
        }

        @JsonSetter(value = "triggerHookId", nulls = Nulls.SKIP)
        public Builder triggerHookId(Optional<Double> triggerHookId) {
            this.triggerHookId = triggerHookId;
            return this;
        }

        public Builder triggerHookId(Double triggerHookId) {
            this.triggerHookId = Optional.ofNullable(triggerHookId);
            return this;
        }

        @JsonSetter(value = "triggerHookName", nulls = Nulls.SKIP)
        public Builder triggerHookName(Optional<String> triggerHookName) {
            this.triggerHookName = triggerHookName;
            return this;
        }

        public Builder triggerHookName(String triggerHookName) {
            this.triggerHookName = Optional.ofNullable(triggerHookName);
            return this;
        }

        public MakeToolProviderDetails build() {
            return new MakeToolProviderDetails(
                    templateUrl,
                    setupInstructions,
                    scenarioId,
                    scenarioName,
                    triggerHookId,
                    triggerHookName,
                    additionalProperties);
        }
    }
}
