/**
 * This file was auto-generated by Fern from our API Definition.
 */
package com.vapi.api.types;

import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.annotation.Nulls;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.vapi.api.core.ObjectMappers;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import org.jetbrains.annotations.NotNull;

@JsonInclude(JsonInclude.Include.NON_ABSENT)
@JsonDeserialize(builder = BothCustomEndpointingRule.Builder.class)
public final class BothCustomEndpointingRule {
    private final String assistantRegex;

    private final Optional<List<RegexOption>> assistantRegexOptions;

    private final String customerRegex;

    private final Optional<List<RegexOption>> customerRegexOptions;

    private final double timeoutSeconds;

    private final Map<String, Object> additionalProperties;

    private BothCustomEndpointingRule(
            String assistantRegex,
            Optional<List<RegexOption>> assistantRegexOptions,
            String customerRegex,
            Optional<List<RegexOption>> customerRegexOptions,
            double timeoutSeconds,
            Map<String, Object> additionalProperties) {
        this.assistantRegex = assistantRegex;
        this.assistantRegexOptions = assistantRegexOptions;
        this.customerRegex = customerRegex;
        this.customerRegexOptions = customerRegexOptions;
        this.timeoutSeconds = timeoutSeconds;
        this.additionalProperties = additionalProperties;
    }

    /**
     * @return This is the regex pattern to match the assistant's message.
     * <p>Note:</p>
     * <ul>
     * <li>This works by using the <code>RegExp.test</code> method in Node.JS. Eg. <code>/hello/.test(&quot;hello there&quot;)</code> will return <code>true</code>.</li>
     * </ul>
     * <p>Hot tip:</p>
     * <ul>
     * <li>In JavaScript, escape <code>\</code> when sending the regex pattern. Eg. <code>&quot;hello\sthere&quot;</code> will be sent over the wire as <code>&quot;hellosthere&quot;</code>. Send <code>&quot;hello\\sthere&quot;</code> instead.</li>
     * <li><code>RegExp.test</code> does substring matching, so <code>/cat/.test(&quot;I love cats&quot;)</code> will return <code>true</code>. To do full string matching, send &quot;^cat$&quot;.</li>
     * </ul>
     */
    @JsonProperty("assistantRegex")
    public String getAssistantRegex() {
        return assistantRegex;
    }

    /**
     * @return These are the options for the assistant's message regex match. Defaults to all disabled.
     * <p>@default []</p>
     */
    @JsonProperty("assistantRegexOptions")
    public Optional<List<RegexOption>> getAssistantRegexOptions() {
        return assistantRegexOptions;
    }

    @JsonProperty("customerRegex")
    public String getCustomerRegex() {
        return customerRegex;
    }

    /**
     * @return These are the options for the customer's message regex match. Defaults to all disabled.
     * <p>@default []</p>
     */
    @JsonProperty("customerRegexOptions")
    public Optional<List<RegexOption>> getCustomerRegexOptions() {
        return customerRegexOptions;
    }

    /**
     * @return This is the endpointing timeout in seconds, if the rule is matched.
     */
    @JsonProperty("timeoutSeconds")
    public double getTimeoutSeconds() {
        return timeoutSeconds;
    }

    @java.lang.Override
    public boolean equals(Object other) {
        if (this == other) return true;
        return other instanceof BothCustomEndpointingRule && equalTo((BothCustomEndpointingRule) other);
    }

    @JsonAnyGetter
    public Map<String, Object> getAdditionalProperties() {
        return this.additionalProperties;
    }

    private boolean equalTo(BothCustomEndpointingRule other) {
        return assistantRegex.equals(other.assistantRegex)
                && assistantRegexOptions.equals(other.assistantRegexOptions)
                && customerRegex.equals(other.customerRegex)
                && customerRegexOptions.equals(other.customerRegexOptions)
                && timeoutSeconds == other.timeoutSeconds;
    }

    @java.lang.Override
    public int hashCode() {
        return Objects.hash(
                this.assistantRegex,
                this.assistantRegexOptions,
                this.customerRegex,
                this.customerRegexOptions,
                this.timeoutSeconds);
    }

    @java.lang.Override
    public String toString() {
        return ObjectMappers.stringify(this);
    }

    public static AssistantRegexStage builder() {
        return new Builder();
    }

    public interface AssistantRegexStage {
        /**
         * <p>This is the regex pattern to match the assistant's message.</p>
         * <p>Note:</p>
         * <ul>
         * <li>This works by using the <code>RegExp.test</code> method in Node.JS. Eg. <code>/hello/.test(&quot;hello there&quot;)</code> will return <code>true</code>.</li>
         * </ul>
         * <p>Hot tip:</p>
         * <ul>
         * <li>In JavaScript, escape <code>\</code> when sending the regex pattern. Eg. <code>&quot;hello\sthere&quot;</code> will be sent over the wire as <code>&quot;hellosthere&quot;</code>. Send <code>&quot;hello\\sthere&quot;</code> instead.</li>
         * <li><code>RegExp.test</code> does substring matching, so <code>/cat/.test(&quot;I love cats&quot;)</code> will return <code>true</code>. To do full string matching, send &quot;^cat$&quot;.</li>
         * </ul>
         */
        CustomerRegexStage assistantRegex(@NotNull String assistantRegex);

        Builder from(BothCustomEndpointingRule other);
    }

    public interface CustomerRegexStage {
        TimeoutSecondsStage customerRegex(@NotNull String customerRegex);
    }

    public interface TimeoutSecondsStage {
        /**
         * <p>This is the endpointing timeout in seconds, if the rule is matched.</p>
         */
        _FinalStage timeoutSeconds(double timeoutSeconds);
    }

    public interface _FinalStage {
        BothCustomEndpointingRule build();

        /**
         * <p>These are the options for the assistant's message regex match. Defaults to all disabled.</p>
         * <p>@default []</p>
         */
        _FinalStage assistantRegexOptions(Optional<List<RegexOption>> assistantRegexOptions);

        _FinalStage assistantRegexOptions(List<RegexOption> assistantRegexOptions);

        /**
         * <p>These are the options for the customer's message regex match. Defaults to all disabled.</p>
         * <p>@default []</p>
         */
        _FinalStage customerRegexOptions(Optional<List<RegexOption>> customerRegexOptions);

        _FinalStage customerRegexOptions(List<RegexOption> customerRegexOptions);
    }

    @JsonIgnoreProperties(ignoreUnknown = true)
    public static final class Builder
            implements AssistantRegexStage, CustomerRegexStage, TimeoutSecondsStage, _FinalStage {
        private String assistantRegex;

        private String customerRegex;

        private double timeoutSeconds;

        private Optional<List<RegexOption>> customerRegexOptions = Optional.empty();

        private Optional<List<RegexOption>> assistantRegexOptions = Optional.empty();

        @JsonAnySetter
        private Map<String, Object> additionalProperties = new HashMap<>();

        private Builder() {}

        @java.lang.Override
        public Builder from(BothCustomEndpointingRule other) {
            assistantRegex(other.getAssistantRegex());
            assistantRegexOptions(other.getAssistantRegexOptions());
            customerRegex(other.getCustomerRegex());
            customerRegexOptions(other.getCustomerRegexOptions());
            timeoutSeconds(other.getTimeoutSeconds());
            return this;
        }

        /**
         * <p>This is the regex pattern to match the assistant's message.</p>
         * <p>Note:</p>
         * <ul>
         * <li>This works by using the <code>RegExp.test</code> method in Node.JS. Eg. <code>/hello/.test(&quot;hello there&quot;)</code> will return <code>true</code>.</li>
         * </ul>
         * <p>Hot tip:</p>
         * <ul>
         * <li>In JavaScript, escape <code>\</code> when sending the regex pattern. Eg. <code>&quot;hello\sthere&quot;</code> will be sent over the wire as <code>&quot;hellosthere&quot;</code>. Send <code>&quot;hello\\sthere&quot;</code> instead.</li>
         * <li><code>RegExp.test</code> does substring matching, so <code>/cat/.test(&quot;I love cats&quot;)</code> will return <code>true</code>. To do full string matching, send &quot;^cat$&quot;.</li>
         * </ul>
         * <p>This is the regex pattern to match the assistant's message.</p>
         * <p>Note:</p>
         * <ul>
         * <li>This works by using the <code>RegExp.test</code> method in Node.JS. Eg. <code>/hello/.test(&quot;hello there&quot;)</code> will return <code>true</code>.</li>
         * </ul>
         * <p>Hot tip:</p>
         * <ul>
         * <li>In JavaScript, escape <code>\</code> when sending the regex pattern. Eg. <code>&quot;hello\sthere&quot;</code> will be sent over the wire as <code>&quot;hellosthere&quot;</code>. Send <code>&quot;hello\\sthere&quot;</code> instead.</li>
         * <li><code>RegExp.test</code> does substring matching, so <code>/cat/.test(&quot;I love cats&quot;)</code> will return <code>true</code>. To do full string matching, send &quot;^cat$&quot;.</li>
         * </ul>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        @JsonSetter("assistantRegex")
        public CustomerRegexStage assistantRegex(@NotNull String assistantRegex) {
            this.assistantRegex = Objects.requireNonNull(assistantRegex, "assistantRegex must not be null");
            return this;
        }

        @java.lang.Override
        @JsonSetter("customerRegex")
        public TimeoutSecondsStage customerRegex(@NotNull String customerRegex) {
            this.customerRegex = Objects.requireNonNull(customerRegex, "customerRegex must not be null");
            return this;
        }

        /**
         * <p>This is the endpointing timeout in seconds, if the rule is matched.</p>
         * <p>This is the endpointing timeout in seconds, if the rule is matched.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        @JsonSetter("timeoutSeconds")
        public _FinalStage timeoutSeconds(double timeoutSeconds) {
            this.timeoutSeconds = timeoutSeconds;
            return this;
        }

        /**
         * <p>These are the options for the customer's message regex match. Defaults to all disabled.</p>
         * <p>@default []</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        public _FinalStage customerRegexOptions(List<RegexOption> customerRegexOptions) {
            this.customerRegexOptions = Optional.ofNullable(customerRegexOptions);
            return this;
        }

        /**
         * <p>These are the options for the customer's message regex match. Defaults to all disabled.</p>
         * <p>@default []</p>
         */
        @java.lang.Override
        @JsonSetter(value = "customerRegexOptions", nulls = Nulls.SKIP)
        public _FinalStage customerRegexOptions(Optional<List<RegexOption>> customerRegexOptions) {
            this.customerRegexOptions = customerRegexOptions;
            return this;
        }

        /**
         * <p>These are the options for the assistant's message regex match. Defaults to all disabled.</p>
         * <p>@default []</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        public _FinalStage assistantRegexOptions(List<RegexOption> assistantRegexOptions) {
            this.assistantRegexOptions = Optional.ofNullable(assistantRegexOptions);
            return this;
        }

        /**
         * <p>These are the options for the assistant's message regex match. Defaults to all disabled.</p>
         * <p>@default []</p>
         */
        @java.lang.Override
        @JsonSetter(value = "assistantRegexOptions", nulls = Nulls.SKIP)
        public _FinalStage assistantRegexOptions(Optional<List<RegexOption>> assistantRegexOptions) {
            this.assistantRegexOptions = assistantRegexOptions;
            return this;
        }

        @java.lang.Override
        public BothCustomEndpointingRule build() {
            return new BothCustomEndpointingRule(
                    assistantRegex,
                    assistantRegexOptions,
                    customerRegex,
                    customerRegexOptions,
                    timeoutSeconds,
                    additionalProperties);
        }
    }
}
