/**
 * This file was auto-generated by Fern from our API Definition.
 */
package com.vapi.api.types;

import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.annotation.Nulls;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.vapi.api.core.ObjectMappers;
import java.util.HashMap;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;

@JsonInclude(JsonInclude.Include.NON_ABSENT)
@JsonDeserialize(builder = ClientInboundMessageTransfer.Builder.class)
public final class ClientInboundMessageTransfer {
    private final Optional<ClientInboundMessageTransferDestination> destination;

    private final Optional<String> content;

    private final Map<String, Object> additionalProperties;

    private ClientInboundMessageTransfer(
            Optional<ClientInboundMessageTransferDestination> destination,
            Optional<String> content,
            Map<String, Object> additionalProperties) {
        this.destination = destination;
        this.content = content;
        this.additionalProperties = additionalProperties;
    }

    /**
     * @return This is the destination to transfer the call to.
     */
    @JsonProperty("destination")
    public Optional<ClientInboundMessageTransferDestination> getDestination() {
        return destination;
    }

    /**
     * @return This is the content to say.
     */
    @JsonProperty("content")
    public Optional<String> getContent() {
        return content;
    }

    @java.lang.Override
    public boolean equals(Object other) {
        if (this == other) return true;
        return other instanceof ClientInboundMessageTransfer && equalTo((ClientInboundMessageTransfer) other);
    }

    @JsonAnyGetter
    public Map<String, Object> getAdditionalProperties() {
        return this.additionalProperties;
    }

    private boolean equalTo(ClientInboundMessageTransfer other) {
        return destination.equals(other.destination) && content.equals(other.content);
    }

    @java.lang.Override
    public int hashCode() {
        return Objects.hash(this.destination, this.content);
    }

    @java.lang.Override
    public String toString() {
        return ObjectMappers.stringify(this);
    }

    public static Builder builder() {
        return new Builder();
    }

    @JsonIgnoreProperties(ignoreUnknown = true)
    public static final class Builder {
        private Optional<ClientInboundMessageTransferDestination> destination = Optional.empty();

        private Optional<String> content = Optional.empty();

        @JsonAnySetter
        private Map<String, Object> additionalProperties = new HashMap<>();

        private Builder() {}

        public Builder from(ClientInboundMessageTransfer other) {
            destination(other.getDestination());
            content(other.getContent());
            return this;
        }

        /**
         * <p>This is the destination to transfer the call to.</p>
         */
        @JsonSetter(value = "destination", nulls = Nulls.SKIP)
        public Builder destination(Optional<ClientInboundMessageTransferDestination> destination) {
            this.destination = destination;
            return this;
        }

        public Builder destination(ClientInboundMessageTransferDestination destination) {
            this.destination = Optional.ofNullable(destination);
            return this;
        }

        /**
         * <p>This is the content to say.</p>
         */
        @JsonSetter(value = "content", nulls = Nulls.SKIP)
        public Builder content(Optional<String> content) {
            this.content = content;
            return this;
        }

        public Builder content(String content) {
            this.content = Optional.ofNullable(content);
            return this;
        }

        public ClientInboundMessageTransfer build() {
            return new ClientInboundMessageTransfer(destination, content, additionalProperties);
        }
    }
}
