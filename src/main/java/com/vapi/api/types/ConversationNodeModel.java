/**
 * This file was auto-generated by Fern from our API Definition.
 */
package com.vapi.api.types;

import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSubTypes;
import com.fasterxml.jackson.annotation.JsonTypeInfo;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonUnwrapped;
import com.fasterxml.jackson.annotation.JsonValue;
import java.util.Objects;
import java.util.Optional;

public final class ConversationNodeModel {
    private final Value value;

    @JsonCreator(mode = JsonCreator.Mode.DELEGATING)
    private ConversationNodeModel(Value value) {
        this.value = value;
    }

    public <T> T visit(Visitor<T> visitor) {
        return value.visit(visitor);
    }

    public static ConversationNodeModel openai(WorkflowOpenAiModel value) {
        return new ConversationNodeModel(new OpenaiValue(value));
    }

    public static ConversationNodeModel anthropic(WorkflowAnthropicModel value) {
        return new ConversationNodeModel(new AnthropicValue(value));
    }

    public static ConversationNodeModel google(WorkflowGoogleModel value) {
        return new ConversationNodeModel(new GoogleValue(value));
    }

    public static ConversationNodeModel customLlm(WorkflowCustomModel value) {
        return new ConversationNodeModel(new CustomLlmValue(value));
    }

    public boolean isOpenai() {
        return value instanceof OpenaiValue;
    }

    public boolean isAnthropic() {
        return value instanceof AnthropicValue;
    }

    public boolean isGoogle() {
        return value instanceof GoogleValue;
    }

    public boolean isCustomLlm() {
        return value instanceof CustomLlmValue;
    }

    public boolean _isUnknown() {
        return value instanceof _UnknownValue;
    }

    public Optional<WorkflowOpenAiModel> getOpenai() {
        if (isOpenai()) {
            return Optional.of(((OpenaiValue) value).value);
        }
        return Optional.empty();
    }

    public Optional<WorkflowAnthropicModel> getAnthropic() {
        if (isAnthropic()) {
            return Optional.of(((AnthropicValue) value).value);
        }
        return Optional.empty();
    }

    public Optional<WorkflowGoogleModel> getGoogle() {
        if (isGoogle()) {
            return Optional.of(((GoogleValue) value).value);
        }
        return Optional.empty();
    }

    public Optional<WorkflowCustomModel> getCustomLlm() {
        if (isCustomLlm()) {
            return Optional.of(((CustomLlmValue) value).value);
        }
        return Optional.empty();
    }

    public Optional<Object> _getUnknown() {
        if (_isUnknown()) {
            return Optional.of(((_UnknownValue) value).value);
        }
        return Optional.empty();
    }

    @JsonValue
    private Value getValue() {
        return this.value;
    }

    public interface Visitor<T> {
        T visitOpenai(WorkflowOpenAiModel openai);

        T visitAnthropic(WorkflowAnthropicModel anthropic);

        T visitGoogle(WorkflowGoogleModel google);

        T visitCustomLlm(WorkflowCustomModel customLlm);

        T _visitUnknown(Object unknownType);
    }

    @JsonTypeInfo(use = JsonTypeInfo.Id.NAME, property = "provider", visible = true, defaultImpl = _UnknownValue.class)
    @JsonSubTypes({
        @JsonSubTypes.Type(OpenaiValue.class),
        @JsonSubTypes.Type(AnthropicValue.class),
        @JsonSubTypes.Type(GoogleValue.class),
        @JsonSubTypes.Type(CustomLlmValue.class)
    })
    @JsonIgnoreProperties(ignoreUnknown = true)
    private interface Value {
        <T> T visit(Visitor<T> visitor);
    }

    @JsonTypeName("openai")
    @JsonIgnoreProperties("provider")
    private static final class OpenaiValue implements Value {
        @JsonUnwrapped
        private WorkflowOpenAiModel value;

        @JsonCreator(mode = JsonCreator.Mode.PROPERTIES)
        private OpenaiValue() {}

        private OpenaiValue(WorkflowOpenAiModel value) {
            this.value = value;
        }

        @java.lang.Override
        public <T> T visit(Visitor<T> visitor) {
            return visitor.visitOpenai(value);
        }

        @java.lang.Override
        public boolean equals(Object other) {
            if (this == other) return true;
            return other instanceof OpenaiValue && equalTo((OpenaiValue) other);
        }

        private boolean equalTo(OpenaiValue other) {
            return value.equals(other.value);
        }

        @java.lang.Override
        public int hashCode() {
            return Objects.hash(this.value);
        }

        @java.lang.Override
        public String toString() {
            return "ConversationNodeModel{" + "value: " + value + "}";
        }
    }

    @JsonTypeName("anthropic")
    @JsonIgnoreProperties("provider")
    private static final class AnthropicValue implements Value {
        @JsonUnwrapped
        private WorkflowAnthropicModel value;

        @JsonCreator(mode = JsonCreator.Mode.PROPERTIES)
        private AnthropicValue() {}

        private AnthropicValue(WorkflowAnthropicModel value) {
            this.value = value;
        }

        @java.lang.Override
        public <T> T visit(Visitor<T> visitor) {
            return visitor.visitAnthropic(value);
        }

        @java.lang.Override
        public boolean equals(Object other) {
            if (this == other) return true;
            return other instanceof AnthropicValue && equalTo((AnthropicValue) other);
        }

        private boolean equalTo(AnthropicValue other) {
            return value.equals(other.value);
        }

        @java.lang.Override
        public int hashCode() {
            return Objects.hash(this.value);
        }

        @java.lang.Override
        public String toString() {
            return "ConversationNodeModel{" + "value: " + value + "}";
        }
    }

    @JsonTypeName("google")
    @JsonIgnoreProperties("provider")
    private static final class GoogleValue implements Value {
        @JsonUnwrapped
        private WorkflowGoogleModel value;

        @JsonCreator(mode = JsonCreator.Mode.PROPERTIES)
        private GoogleValue() {}

        private GoogleValue(WorkflowGoogleModel value) {
            this.value = value;
        }

        @java.lang.Override
        public <T> T visit(Visitor<T> visitor) {
            return visitor.visitGoogle(value);
        }

        @java.lang.Override
        public boolean equals(Object other) {
            if (this == other) return true;
            return other instanceof GoogleValue && equalTo((GoogleValue) other);
        }

        private boolean equalTo(GoogleValue other) {
            return value.equals(other.value);
        }

        @java.lang.Override
        public int hashCode() {
            return Objects.hash(this.value);
        }

        @java.lang.Override
        public String toString() {
            return "ConversationNodeModel{" + "value: " + value + "}";
        }
    }

    @JsonTypeName("custom-llm")
    @JsonIgnoreProperties("provider")
    private static final class CustomLlmValue implements Value {
        @JsonUnwrapped
        private WorkflowCustomModel value;

        @JsonCreator(mode = JsonCreator.Mode.PROPERTIES)
        private CustomLlmValue() {}

        private CustomLlmValue(WorkflowCustomModel value) {
            this.value = value;
        }

        @java.lang.Override
        public <T> T visit(Visitor<T> visitor) {
            return visitor.visitCustomLlm(value);
        }

        @java.lang.Override
        public boolean equals(Object other) {
            if (this == other) return true;
            return other instanceof CustomLlmValue && equalTo((CustomLlmValue) other);
        }

        private boolean equalTo(CustomLlmValue other) {
            return value.equals(other.value);
        }

        @java.lang.Override
        public int hashCode() {
            return Objects.hash(this.value);
        }

        @java.lang.Override
        public String toString() {
            return "ConversationNodeModel{" + "value: " + value + "}";
        }
    }

    @JsonIgnoreProperties("provider")
    private static final class _UnknownValue implements Value {
        private String type;

        @JsonValue
        private Object value;

        @JsonCreator(mode = JsonCreator.Mode.PROPERTIES)
        private _UnknownValue(@JsonProperty("value") Object value) {}

        @java.lang.Override
        public <T> T visit(Visitor<T> visitor) {
            return visitor._visitUnknown(value);
        }

        @java.lang.Override
        public boolean equals(Object other) {
            if (this == other) return true;
            return other instanceof _UnknownValue && equalTo((_UnknownValue) other);
        }

        private boolean equalTo(_UnknownValue other) {
            return type.equals(other.type) && value.equals(other.value);
        }

        @java.lang.Override
        public int hashCode() {
            return Objects.hash(this.type, this.value);
        }

        @java.lang.Override
        public String toString() {
            return "ConversationNodeModel{" + "type: " + type + ", value: " + value + "}";
        }
    }
}
