/**
 * This file was auto-generated by Fern from our API Definition.
 */
package com.vapi.api.types;

import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.annotation.Nulls;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.vapi.api.core.ObjectMappers;
import java.util.HashMap;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;

@JsonInclude(JsonInclude.Include.NON_ABSENT)
@JsonDeserialize(builder = VapiVoicemailDetectionPlan.Builder.class)
public final class VapiVoicemailDetectionPlan {
    private final Optional<Double> beepMaxAwaitSeconds;

    private final Optional<VoicemailDetectionBackoffPlan> backoffPlan;

    private final Map<String, Object> additionalProperties;

    private VapiVoicemailDetectionPlan(
            Optional<Double> beepMaxAwaitSeconds,
            Optional<VoicemailDetectionBackoffPlan> backoffPlan,
            Map<String, Object> additionalProperties) {
        this.beepMaxAwaitSeconds = beepMaxAwaitSeconds;
        this.backoffPlan = backoffPlan;
        this.additionalProperties = additionalProperties;
    }

    /**
     * @return This is the maximum duration from the start of the call that we will wait for a voicemail beep, before speaking our message
     * <ul>
     * <li>
     * <p>If we detect a voicemail beep before this, we will speak the message at that point.</p>
     * </li>
     * <li>
     * <p>Setting too low a value means that the bot will start speaking its voicemail message too early. If it does so before the actual beep, it will get cut off. You should definitely tune this to your use case.</p>
     * </li>
     * </ul>
     * <p>@default 30
     * @min 0
     * @max 60</p>
     */
    @JsonProperty("beepMaxAwaitSeconds")
    public Optional<Double> getBeepMaxAwaitSeconds() {
        return beepMaxAwaitSeconds;
    }

    /**
     * @return This is the backoff plan for the voicemail detection.
     */
    @JsonProperty("backoffPlan")
    public Optional<VoicemailDetectionBackoffPlan> getBackoffPlan() {
        return backoffPlan;
    }

    @java.lang.Override
    public boolean equals(Object other) {
        if (this == other) return true;
        return other instanceof VapiVoicemailDetectionPlan && equalTo((VapiVoicemailDetectionPlan) other);
    }

    @JsonAnyGetter
    public Map<String, Object> getAdditionalProperties() {
        return this.additionalProperties;
    }

    private boolean equalTo(VapiVoicemailDetectionPlan other) {
        return beepMaxAwaitSeconds.equals(other.beepMaxAwaitSeconds) && backoffPlan.equals(other.backoffPlan);
    }

    @java.lang.Override
    public int hashCode() {
        return Objects.hash(this.beepMaxAwaitSeconds, this.backoffPlan);
    }

    @java.lang.Override
    public String toString() {
        return ObjectMappers.stringify(this);
    }

    public static Builder builder() {
        return new Builder();
    }

    @JsonIgnoreProperties(ignoreUnknown = true)
    public static final class Builder {
        private Optional<Double> beepMaxAwaitSeconds = Optional.empty();

        private Optional<VoicemailDetectionBackoffPlan> backoffPlan = Optional.empty();

        @JsonAnySetter
        private Map<String, Object> additionalProperties = new HashMap<>();

        private Builder() {}

        public Builder from(VapiVoicemailDetectionPlan other) {
            beepMaxAwaitSeconds(other.getBeepMaxAwaitSeconds());
            backoffPlan(other.getBackoffPlan());
            return this;
        }

        /**
         * <p>This is the maximum duration from the start of the call that we will wait for a voicemail beep, before speaking our message</p>
         * <ul>
         * <li>
         * <p>If we detect a voicemail beep before this, we will speak the message at that point.</p>
         * </li>
         * <li>
         * <p>Setting too low a value means that the bot will start speaking its voicemail message too early. If it does so before the actual beep, it will get cut off. You should definitely tune this to your use case.</p>
         * </li>
         * </ul>
         * <p>@default 30
         * @min 0
         * @max 60</p>
         */
        @JsonSetter(value = "beepMaxAwaitSeconds", nulls = Nulls.SKIP)
        public Builder beepMaxAwaitSeconds(Optional<Double> beepMaxAwaitSeconds) {
            this.beepMaxAwaitSeconds = beepMaxAwaitSeconds;
            return this;
        }

        public Builder beepMaxAwaitSeconds(Double beepMaxAwaitSeconds) {
            this.beepMaxAwaitSeconds = Optional.ofNullable(beepMaxAwaitSeconds);
            return this;
        }

        /**
         * <p>This is the backoff plan for the voicemail detection.</p>
         */
        @JsonSetter(value = "backoffPlan", nulls = Nulls.SKIP)
        public Builder backoffPlan(Optional<VoicemailDetectionBackoffPlan> backoffPlan) {
            this.backoffPlan = backoffPlan;
            return this;
        }

        public Builder backoffPlan(VoicemailDetectionBackoffPlan backoffPlan) {
            this.backoffPlan = Optional.ofNullable(backoffPlan);
            return this;
        }

        public VapiVoicemailDetectionPlan build() {
            return new VapiVoicemailDetectionPlan(beepMaxAwaitSeconds, backoffPlan, additionalProperties);
        }
    }
}
