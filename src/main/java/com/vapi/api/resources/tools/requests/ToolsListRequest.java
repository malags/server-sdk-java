/**
 * This file was auto-generated by Fern from our API Definition.
 */
package com.vapi.api.resources.tools.requests;

import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.annotation.Nulls;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.vapi.api.core.Nullable;
import com.vapi.api.core.NullableNonemptyFilter;
import com.vapi.api.core.ObjectMappers;
import java.time.OffsetDateTime;
import java.util.HashMap;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;

@JsonInclude(JsonInclude.Include.NON_ABSENT)
@JsonDeserialize(builder = ToolsListRequest.Builder.class)
public final class ToolsListRequest {
    private final Optional<Double> limit;

    private final Optional<OffsetDateTime> createdAtGt;

    private final Optional<OffsetDateTime> createdAtLt;

    private final Optional<OffsetDateTime> createdAtGe;

    private final Optional<OffsetDateTime> createdAtLe;

    private final Optional<OffsetDateTime> updatedAtGt;

    private final Optional<OffsetDateTime> updatedAtLt;

    private final Optional<OffsetDateTime> updatedAtGe;

    private final Optional<OffsetDateTime> updatedAtLe;

    private final Map<String, Object> additionalProperties;

    private ToolsListRequest(
            Optional<Double> limit,
            Optional<OffsetDateTime> createdAtGt,
            Optional<OffsetDateTime> createdAtLt,
            Optional<OffsetDateTime> createdAtGe,
            Optional<OffsetDateTime> createdAtLe,
            Optional<OffsetDateTime> updatedAtGt,
            Optional<OffsetDateTime> updatedAtLt,
            Optional<OffsetDateTime> updatedAtGe,
            Optional<OffsetDateTime> updatedAtLe,
            Map<String, Object> additionalProperties) {
        this.limit = limit;
        this.createdAtGt = createdAtGt;
        this.createdAtLt = createdAtLt;
        this.createdAtGe = createdAtGe;
        this.createdAtLe = createdAtLe;
        this.updatedAtGt = updatedAtGt;
        this.updatedAtLt = updatedAtLt;
        this.updatedAtGe = updatedAtGe;
        this.updatedAtLe = updatedAtLe;
        this.additionalProperties = additionalProperties;
    }

    /**
     * @return This is the maximum number of items to return. Defaults to 100.
     */
    @JsonIgnore
    public Optional<Double> getLimit() {
        if (limit == null) {
            return Optional.empty();
        }
        return limit;
    }

    /**
     * @return This will return items where the createdAt is greater than the specified value.
     */
    @JsonIgnore
    public Optional<OffsetDateTime> getCreatedAtGt() {
        if (createdAtGt == null) {
            return Optional.empty();
        }
        return createdAtGt;
    }

    /**
     * @return This will return items where the createdAt is less than the specified value.
     */
    @JsonIgnore
    public Optional<OffsetDateTime> getCreatedAtLt() {
        if (createdAtLt == null) {
            return Optional.empty();
        }
        return createdAtLt;
    }

    /**
     * @return This will return items where the createdAt is greater than or equal to the specified value.
     */
    @JsonIgnore
    public Optional<OffsetDateTime> getCreatedAtGe() {
        if (createdAtGe == null) {
            return Optional.empty();
        }
        return createdAtGe;
    }

    /**
     * @return This will return items where the createdAt is less than or equal to the specified value.
     */
    @JsonIgnore
    public Optional<OffsetDateTime> getCreatedAtLe() {
        if (createdAtLe == null) {
            return Optional.empty();
        }
        return createdAtLe;
    }

    /**
     * @return This will return items where the updatedAt is greater than the specified value.
     */
    @JsonIgnore
    public Optional<OffsetDateTime> getUpdatedAtGt() {
        if (updatedAtGt == null) {
            return Optional.empty();
        }
        return updatedAtGt;
    }

    /**
     * @return This will return items where the updatedAt is less than the specified value.
     */
    @JsonIgnore
    public Optional<OffsetDateTime> getUpdatedAtLt() {
        if (updatedAtLt == null) {
            return Optional.empty();
        }
        return updatedAtLt;
    }

    /**
     * @return This will return items where the updatedAt is greater than or equal to the specified value.
     */
    @JsonIgnore
    public Optional<OffsetDateTime> getUpdatedAtGe() {
        if (updatedAtGe == null) {
            return Optional.empty();
        }
        return updatedAtGe;
    }

    /**
     * @return This will return items where the updatedAt is less than or equal to the specified value.
     */
    @JsonIgnore
    public Optional<OffsetDateTime> getUpdatedAtLe() {
        if (updatedAtLe == null) {
            return Optional.empty();
        }
        return updatedAtLe;
    }

    @JsonInclude(value = JsonInclude.Include.CUSTOM, valueFilter = NullableNonemptyFilter.class)
    @JsonProperty("limit")
    private Optional<Double> _getLimit() {
        return limit;
    }

    @JsonInclude(value = JsonInclude.Include.CUSTOM, valueFilter = NullableNonemptyFilter.class)
    @JsonProperty("createdAtGt")
    private Optional<OffsetDateTime> _getCreatedAtGt() {
        return createdAtGt;
    }

    @JsonInclude(value = JsonInclude.Include.CUSTOM, valueFilter = NullableNonemptyFilter.class)
    @JsonProperty("createdAtLt")
    private Optional<OffsetDateTime> _getCreatedAtLt() {
        return createdAtLt;
    }

    @JsonInclude(value = JsonInclude.Include.CUSTOM, valueFilter = NullableNonemptyFilter.class)
    @JsonProperty("createdAtGe")
    private Optional<OffsetDateTime> _getCreatedAtGe() {
        return createdAtGe;
    }

    @JsonInclude(value = JsonInclude.Include.CUSTOM, valueFilter = NullableNonemptyFilter.class)
    @JsonProperty("createdAtLe")
    private Optional<OffsetDateTime> _getCreatedAtLe() {
        return createdAtLe;
    }

    @JsonInclude(value = JsonInclude.Include.CUSTOM, valueFilter = NullableNonemptyFilter.class)
    @JsonProperty("updatedAtGt")
    private Optional<OffsetDateTime> _getUpdatedAtGt() {
        return updatedAtGt;
    }

    @JsonInclude(value = JsonInclude.Include.CUSTOM, valueFilter = NullableNonemptyFilter.class)
    @JsonProperty("updatedAtLt")
    private Optional<OffsetDateTime> _getUpdatedAtLt() {
        return updatedAtLt;
    }

    @JsonInclude(value = JsonInclude.Include.CUSTOM, valueFilter = NullableNonemptyFilter.class)
    @JsonProperty("updatedAtGe")
    private Optional<OffsetDateTime> _getUpdatedAtGe() {
        return updatedAtGe;
    }

    @JsonInclude(value = JsonInclude.Include.CUSTOM, valueFilter = NullableNonemptyFilter.class)
    @JsonProperty("updatedAtLe")
    private Optional<OffsetDateTime> _getUpdatedAtLe() {
        return updatedAtLe;
    }

    @java.lang.Override
    public boolean equals(Object other) {
        if (this == other) return true;
        return other instanceof ToolsListRequest && equalTo((ToolsListRequest) other);
    }

    @JsonAnyGetter
    public Map<String, Object> getAdditionalProperties() {
        return this.additionalProperties;
    }

    private boolean equalTo(ToolsListRequest other) {
        return limit.equals(other.limit)
                && createdAtGt.equals(other.createdAtGt)
                && createdAtLt.equals(other.createdAtLt)
                && createdAtGe.equals(other.createdAtGe)
                && createdAtLe.equals(other.createdAtLe)
                && updatedAtGt.equals(other.updatedAtGt)
                && updatedAtLt.equals(other.updatedAtLt)
                && updatedAtGe.equals(other.updatedAtGe)
                && updatedAtLe.equals(other.updatedAtLe);
    }

    @java.lang.Override
    public int hashCode() {
        return Objects.hash(
                this.limit,
                this.createdAtGt,
                this.createdAtLt,
                this.createdAtGe,
                this.createdAtLe,
                this.updatedAtGt,
                this.updatedAtLt,
                this.updatedAtGe,
                this.updatedAtLe);
    }

    @java.lang.Override
    public String toString() {
        return ObjectMappers.stringify(this);
    }

    public static Builder builder() {
        return new Builder();
    }

    @JsonIgnoreProperties(ignoreUnknown = true)
    public static final class Builder {
        private Optional<Double> limit = Optional.empty();

        private Optional<OffsetDateTime> createdAtGt = Optional.empty();

        private Optional<OffsetDateTime> createdAtLt = Optional.empty();

        private Optional<OffsetDateTime> createdAtGe = Optional.empty();

        private Optional<OffsetDateTime> createdAtLe = Optional.empty();

        private Optional<OffsetDateTime> updatedAtGt = Optional.empty();

        private Optional<OffsetDateTime> updatedAtLt = Optional.empty();

        private Optional<OffsetDateTime> updatedAtGe = Optional.empty();

        private Optional<OffsetDateTime> updatedAtLe = Optional.empty();

        @JsonAnySetter
        private Map<String, Object> additionalProperties = new HashMap<>();

        private Builder() {}

        public Builder from(ToolsListRequest other) {
            limit(other.getLimit());
            createdAtGt(other.getCreatedAtGt());
            createdAtLt(other.getCreatedAtLt());
            createdAtGe(other.getCreatedAtGe());
            createdAtLe(other.getCreatedAtLe());
            updatedAtGt(other.getUpdatedAtGt());
            updatedAtLt(other.getUpdatedAtLt());
            updatedAtGe(other.getUpdatedAtGe());
            updatedAtLe(other.getUpdatedAtLe());
            return this;
        }

        /**
         * <p>This is the maximum number of items to return. Defaults to 100.</p>
         */
        @JsonSetter(value = "limit", nulls = Nulls.SKIP)
        public Builder limit(Optional<Double> limit) {
            this.limit = limit;
            return this;
        }

        public Builder limit(Double limit) {
            this.limit = Optional.ofNullable(limit);
            return this;
        }

        public Builder limit(Nullable<Double> limit) {
            if (limit.isNull()) {
                this.limit = null;
            } else if (limit.isEmpty()) {
                this.limit = Optional.empty();
            } else {
                this.limit = Optional.of(limit.get());
            }
            return this;
        }

        /**
         * <p>This will return items where the createdAt is greater than the specified value.</p>
         */
        @JsonSetter(value = "createdAtGt", nulls = Nulls.SKIP)
        public Builder createdAtGt(Optional<OffsetDateTime> createdAtGt) {
            this.createdAtGt = createdAtGt;
            return this;
        }

        public Builder createdAtGt(OffsetDateTime createdAtGt) {
            this.createdAtGt = Optional.ofNullable(createdAtGt);
            return this;
        }

        public Builder createdAtGt(Nullable<OffsetDateTime> createdAtGt) {
            if (createdAtGt.isNull()) {
                this.createdAtGt = null;
            } else if (createdAtGt.isEmpty()) {
                this.createdAtGt = Optional.empty();
            } else {
                this.createdAtGt = Optional.of(createdAtGt.get());
            }
            return this;
        }

        /**
         * <p>This will return items where the createdAt is less than the specified value.</p>
         */
        @JsonSetter(value = "createdAtLt", nulls = Nulls.SKIP)
        public Builder createdAtLt(Optional<OffsetDateTime> createdAtLt) {
            this.createdAtLt = createdAtLt;
            return this;
        }

        public Builder createdAtLt(OffsetDateTime createdAtLt) {
            this.createdAtLt = Optional.ofNullable(createdAtLt);
            return this;
        }

        public Builder createdAtLt(Nullable<OffsetDateTime> createdAtLt) {
            if (createdAtLt.isNull()) {
                this.createdAtLt = null;
            } else if (createdAtLt.isEmpty()) {
                this.createdAtLt = Optional.empty();
            } else {
                this.createdAtLt = Optional.of(createdAtLt.get());
            }
            return this;
        }

        /**
         * <p>This will return items where the createdAt is greater than or equal to the specified value.</p>
         */
        @JsonSetter(value = "createdAtGe", nulls = Nulls.SKIP)
        public Builder createdAtGe(Optional<OffsetDateTime> createdAtGe) {
            this.createdAtGe = createdAtGe;
            return this;
        }

        public Builder createdAtGe(OffsetDateTime createdAtGe) {
            this.createdAtGe = Optional.ofNullable(createdAtGe);
            return this;
        }

        public Builder createdAtGe(Nullable<OffsetDateTime> createdAtGe) {
            if (createdAtGe.isNull()) {
                this.createdAtGe = null;
            } else if (createdAtGe.isEmpty()) {
                this.createdAtGe = Optional.empty();
            } else {
                this.createdAtGe = Optional.of(createdAtGe.get());
            }
            return this;
        }

        /**
         * <p>This will return items where the createdAt is less than or equal to the specified value.</p>
         */
        @JsonSetter(value = "createdAtLe", nulls = Nulls.SKIP)
        public Builder createdAtLe(Optional<OffsetDateTime> createdAtLe) {
            this.createdAtLe = createdAtLe;
            return this;
        }

        public Builder createdAtLe(OffsetDateTime createdAtLe) {
            this.createdAtLe = Optional.ofNullable(createdAtLe);
            return this;
        }

        public Builder createdAtLe(Nullable<OffsetDateTime> createdAtLe) {
            if (createdAtLe.isNull()) {
                this.createdAtLe = null;
            } else if (createdAtLe.isEmpty()) {
                this.createdAtLe = Optional.empty();
            } else {
                this.createdAtLe = Optional.of(createdAtLe.get());
            }
            return this;
        }

        /**
         * <p>This will return items where the updatedAt is greater than the specified value.</p>
         */
        @JsonSetter(value = "updatedAtGt", nulls = Nulls.SKIP)
        public Builder updatedAtGt(Optional<OffsetDateTime> updatedAtGt) {
            this.updatedAtGt = updatedAtGt;
            return this;
        }

        public Builder updatedAtGt(OffsetDateTime updatedAtGt) {
            this.updatedAtGt = Optional.ofNullable(updatedAtGt);
            return this;
        }

        public Builder updatedAtGt(Nullable<OffsetDateTime> updatedAtGt) {
            if (updatedAtGt.isNull()) {
                this.updatedAtGt = null;
            } else if (updatedAtGt.isEmpty()) {
                this.updatedAtGt = Optional.empty();
            } else {
                this.updatedAtGt = Optional.of(updatedAtGt.get());
            }
            return this;
        }

        /**
         * <p>This will return items where the updatedAt is less than the specified value.</p>
         */
        @JsonSetter(value = "updatedAtLt", nulls = Nulls.SKIP)
        public Builder updatedAtLt(Optional<OffsetDateTime> updatedAtLt) {
            this.updatedAtLt = updatedAtLt;
            return this;
        }

        public Builder updatedAtLt(OffsetDateTime updatedAtLt) {
            this.updatedAtLt = Optional.ofNullable(updatedAtLt);
            return this;
        }

        public Builder updatedAtLt(Nullable<OffsetDateTime> updatedAtLt) {
            if (updatedAtLt.isNull()) {
                this.updatedAtLt = null;
            } else if (updatedAtLt.isEmpty()) {
                this.updatedAtLt = Optional.empty();
            } else {
                this.updatedAtLt = Optional.of(updatedAtLt.get());
            }
            return this;
        }

        /**
         * <p>This will return items where the updatedAt is greater than or equal to the specified value.</p>
         */
        @JsonSetter(value = "updatedAtGe", nulls = Nulls.SKIP)
        public Builder updatedAtGe(Optional<OffsetDateTime> updatedAtGe) {
            this.updatedAtGe = updatedAtGe;
            return this;
        }

        public Builder updatedAtGe(OffsetDateTime updatedAtGe) {
            this.updatedAtGe = Optional.ofNullable(updatedAtGe);
            return this;
        }

        public Builder updatedAtGe(Nullable<OffsetDateTime> updatedAtGe) {
            if (updatedAtGe.isNull()) {
                this.updatedAtGe = null;
            } else if (updatedAtGe.isEmpty()) {
                this.updatedAtGe = Optional.empty();
            } else {
                this.updatedAtGe = Optional.of(updatedAtGe.get());
            }
            return this;
        }

        /**
         * <p>This will return items where the updatedAt is less than or equal to the specified value.</p>
         */
        @JsonSetter(value = "updatedAtLe", nulls = Nulls.SKIP)
        public Builder updatedAtLe(Optional<OffsetDateTime> updatedAtLe) {
            this.updatedAtLe = updatedAtLe;
            return this;
        }

        public Builder updatedAtLe(OffsetDateTime updatedAtLe) {
            this.updatedAtLe = Optional.ofNullable(updatedAtLe);
            return this;
        }

        public Builder updatedAtLe(Nullable<OffsetDateTime> updatedAtLe) {
            if (updatedAtLe.isNull()) {
                this.updatedAtLe = null;
            } else if (updatedAtLe.isEmpty()) {
                this.updatedAtLe = Optional.empty();
            } else {
                this.updatedAtLe = Optional.of(updatedAtLe.get());
            }
            return this;
        }

        public ToolsListRequest build() {
            return new ToolsListRequest(
                    limit,
                    createdAtGt,
                    createdAtLt,
                    createdAtGe,
                    createdAtLe,
                    updatedAtGt,
                    updatedAtLt,
                    updatedAtGe,
                    updatedAtLe,
                    additionalProperties);
        }
    }
}
