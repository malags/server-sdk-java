/**
 * This file was auto-generated by Fern from our API Definition.
 */
package com.vapi.api.types;

import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.annotation.Nulls;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.vapi.api.core.ObjectMappers;
import java.util.HashMap;
import java.util.LinkedHashMap;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;

@JsonInclude(JsonInclude.Include.NON_ABSENT)
@JsonDeserialize(builder = ServerMessageModelOutput.Builder.class)
public final class ServerMessageModelOutput {
    private final Optional<ServerMessageModelOutputPhoneNumber> phoneNumber;

    private final Optional<Double> timestamp;

    private final Optional<Artifact> artifact;

    private final Optional<CreateAssistantDto> assistant;

    private final Optional<CreateCustomerDto> customer;

    private final Optional<Call> call;

    private final Optional<Chat> chat;

    private final Map<String, Object> output;

    private final Map<String, Object> additionalProperties;

    private ServerMessageModelOutput(
            Optional<ServerMessageModelOutputPhoneNumber> phoneNumber,
            Optional<Double> timestamp,
            Optional<Artifact> artifact,
            Optional<CreateAssistantDto> assistant,
            Optional<CreateCustomerDto> customer,
            Optional<Call> call,
            Optional<Chat> chat,
            Map<String, Object> output,
            Map<String, Object> additionalProperties) {
        this.phoneNumber = phoneNumber;
        this.timestamp = timestamp;
        this.artifact = artifact;
        this.assistant = assistant;
        this.customer = customer;
        this.call = call;
        this.chat = chat;
        this.output = output;
        this.additionalProperties = additionalProperties;
    }

    /**
     * @return This is the phone number that the message is associated with.
     */
    @JsonProperty("phoneNumber")
    public Optional<ServerMessageModelOutputPhoneNumber> getPhoneNumber() {
        return phoneNumber;
    }

    /**
     * @return This is the type of the message. &quot;model-output&quot; is sent as the model outputs tokens.
     */
    @JsonProperty("type")
    public String getType() {
        return "model-output";
    }

    /**
     * @return This is the timestamp of the message.
     */
    @JsonProperty("timestamp")
    public Optional<Double> getTimestamp() {
        return timestamp;
    }

    /**
     * @return This is a live version of the <code>call.artifact</code>.
     * <p>This matches what is stored on <code>call.artifact</code> after the call.</p>
     */
    @JsonProperty("artifact")
    public Optional<Artifact> getArtifact() {
        return artifact;
    }

    /**
     * @return This is the assistant that the message is associated with.
     */
    @JsonProperty("assistant")
    public Optional<CreateAssistantDto> getAssistant() {
        return assistant;
    }

    /**
     * @return This is the customer that the message is associated with.
     */
    @JsonProperty("customer")
    public Optional<CreateCustomerDto> getCustomer() {
        return customer;
    }

    /**
     * @return This is the call that the message is associated with.
     */
    @JsonProperty("call")
    public Optional<Call> getCall() {
        return call;
    }

    /**
     * @return This is the chat object.
     */
    @JsonProperty("chat")
    public Optional<Chat> getChat() {
        return chat;
    }

    /**
     * @return This is the output of the model. It can be a token or tool call.
     */
    @JsonProperty("output")
    public Map<String, Object> getOutput() {
        return output;
    }

    @java.lang.Override
    public boolean equals(Object other) {
        if (this == other) return true;
        return other instanceof ServerMessageModelOutput && equalTo((ServerMessageModelOutput) other);
    }

    @JsonAnyGetter
    public Map<String, Object> getAdditionalProperties() {
        return this.additionalProperties;
    }

    private boolean equalTo(ServerMessageModelOutput other) {
        return phoneNumber.equals(other.phoneNumber)
                && timestamp.equals(other.timestamp)
                && artifact.equals(other.artifact)
                && assistant.equals(other.assistant)
                && customer.equals(other.customer)
                && call.equals(other.call)
                && chat.equals(other.chat)
                && output.equals(other.output);
    }

    @java.lang.Override
    public int hashCode() {
        return Objects.hash(
                this.phoneNumber,
                this.timestamp,
                this.artifact,
                this.assistant,
                this.customer,
                this.call,
                this.chat,
                this.output);
    }

    @java.lang.Override
    public String toString() {
        return ObjectMappers.stringify(this);
    }

    public static Builder builder() {
        return new Builder();
    }

    @JsonIgnoreProperties(ignoreUnknown = true)
    public static final class Builder {
        private Optional<ServerMessageModelOutputPhoneNumber> phoneNumber = Optional.empty();

        private Optional<Double> timestamp = Optional.empty();

        private Optional<Artifact> artifact = Optional.empty();

        private Optional<CreateAssistantDto> assistant = Optional.empty();

        private Optional<CreateCustomerDto> customer = Optional.empty();

        private Optional<Call> call = Optional.empty();

        private Optional<Chat> chat = Optional.empty();

        private Map<String, Object> output = new LinkedHashMap<>();

        @JsonAnySetter
        private Map<String, Object> additionalProperties = new HashMap<>();

        private Builder() {}

        public Builder from(ServerMessageModelOutput other) {
            phoneNumber(other.getPhoneNumber());
            timestamp(other.getTimestamp());
            artifact(other.getArtifact());
            assistant(other.getAssistant());
            customer(other.getCustomer());
            call(other.getCall());
            chat(other.getChat());
            output(other.getOutput());
            return this;
        }

        /**
         * <p>This is the phone number that the message is associated with.</p>
         */
        @JsonSetter(value = "phoneNumber", nulls = Nulls.SKIP)
        public Builder phoneNumber(Optional<ServerMessageModelOutputPhoneNumber> phoneNumber) {
            this.phoneNumber = phoneNumber;
            return this;
        }

        public Builder phoneNumber(ServerMessageModelOutputPhoneNumber phoneNumber) {
            this.phoneNumber = Optional.ofNullable(phoneNumber);
            return this;
        }

        /**
         * <p>This is the timestamp of the message.</p>
         */
        @JsonSetter(value = "timestamp", nulls = Nulls.SKIP)
        public Builder timestamp(Optional<Double> timestamp) {
            this.timestamp = timestamp;
            return this;
        }

        public Builder timestamp(Double timestamp) {
            this.timestamp = Optional.ofNullable(timestamp);
            return this;
        }

        /**
         * <p>This is a live version of the <code>call.artifact</code>.</p>
         * <p>This matches what is stored on <code>call.artifact</code> after the call.</p>
         */
        @JsonSetter(value = "artifact", nulls = Nulls.SKIP)
        public Builder artifact(Optional<Artifact> artifact) {
            this.artifact = artifact;
            return this;
        }

        public Builder artifact(Artifact artifact) {
            this.artifact = Optional.ofNullable(artifact);
            return this;
        }

        /**
         * <p>This is the assistant that the message is associated with.</p>
         */
        @JsonSetter(value = "assistant", nulls = Nulls.SKIP)
        public Builder assistant(Optional<CreateAssistantDto> assistant) {
            this.assistant = assistant;
            return this;
        }

        public Builder assistant(CreateAssistantDto assistant) {
            this.assistant = Optional.ofNullable(assistant);
            return this;
        }

        /**
         * <p>This is the customer that the message is associated with.</p>
         */
        @JsonSetter(value = "customer", nulls = Nulls.SKIP)
        public Builder customer(Optional<CreateCustomerDto> customer) {
            this.customer = customer;
            return this;
        }

        public Builder customer(CreateCustomerDto customer) {
            this.customer = Optional.ofNullable(customer);
            return this;
        }

        /**
         * <p>This is the call that the message is associated with.</p>
         */
        @JsonSetter(value = "call", nulls = Nulls.SKIP)
        public Builder call(Optional<Call> call) {
            this.call = call;
            return this;
        }

        public Builder call(Call call) {
            this.call = Optional.ofNullable(call);
            return this;
        }

        /**
         * <p>This is the chat object.</p>
         */
        @JsonSetter(value = "chat", nulls = Nulls.SKIP)
        public Builder chat(Optional<Chat> chat) {
            this.chat = chat;
            return this;
        }

        public Builder chat(Chat chat) {
            this.chat = Optional.ofNullable(chat);
            return this;
        }

        /**
         * <p>This is the output of the model. It can be a token or tool call.</p>
         */
        @JsonSetter(value = "output", nulls = Nulls.SKIP)
        public Builder output(Map<String, Object> output) {
            this.output.clear();
            this.output.putAll(output);
            return this;
        }

        public Builder putAllOutput(Map<String, Object> output) {
            this.output.putAll(output);
            return this;
        }

        public Builder output(String key, Object value) {
            this.output.put(key, value);
            return this;
        }

        public ServerMessageModelOutput build() {
            return new ServerMessageModelOutput(
                    phoneNumber, timestamp, artifact, assistant, customer, call, chat, output, additionalProperties);
        }
    }
}
