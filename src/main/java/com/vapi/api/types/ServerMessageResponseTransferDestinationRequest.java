/**
 * This file was auto-generated by Fern from our API Definition.
 */
package com.vapi.api.types;

import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.annotation.Nulls;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.vapi.api.core.ObjectMappers;
import java.util.HashMap;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;

@JsonInclude(JsonInclude.Include.NON_ABSENT)
@JsonDeserialize(builder = ServerMessageResponseTransferDestinationRequest.Builder.class)
public final class ServerMessageResponseTransferDestinationRequest {
    private final Optional<ServerMessageResponseTransferDestinationRequestDestination> destination;

    private final Optional<ServerMessageResponseTransferDestinationRequestMessage> message;

    private final Optional<String> error;

    private final Map<String, Object> additionalProperties;

    private ServerMessageResponseTransferDestinationRequest(
            Optional<ServerMessageResponseTransferDestinationRequestDestination> destination,
            Optional<ServerMessageResponseTransferDestinationRequestMessage> message,
            Optional<String> error,
            Map<String, Object> additionalProperties) {
        this.destination = destination;
        this.message = message;
        this.error = error;
        this.additionalProperties = additionalProperties;
    }

    /**
     * @return This is the destination you'd like the call to be transferred to.
     */
    @JsonProperty("destination")
    public Optional<ServerMessageResponseTransferDestinationRequestDestination> getDestination() {
        return destination;
    }

    /**
     * @return This is the message that will be spoken to the user as the tool is running.
     */
    @JsonProperty("message")
    public Optional<ServerMessageResponseTransferDestinationRequestMessage> getMessage() {
        return message;
    }

    /**
     * @return This is the error message if the transfer should not be made.
     */
    @JsonProperty("error")
    public Optional<String> getError() {
        return error;
    }

    @java.lang.Override
    public boolean equals(Object other) {
        if (this == other) return true;
        return other instanceof ServerMessageResponseTransferDestinationRequest
                && equalTo((ServerMessageResponseTransferDestinationRequest) other);
    }

    @JsonAnyGetter
    public Map<String, Object> getAdditionalProperties() {
        return this.additionalProperties;
    }

    private boolean equalTo(ServerMessageResponseTransferDestinationRequest other) {
        return destination.equals(other.destination) && message.equals(other.message) && error.equals(other.error);
    }

    @java.lang.Override
    public int hashCode() {
        return Objects.hash(this.destination, this.message, this.error);
    }

    @java.lang.Override
    public String toString() {
        return ObjectMappers.stringify(this);
    }

    public static Builder builder() {
        return new Builder();
    }

    @JsonIgnoreProperties(ignoreUnknown = true)
    public static final class Builder {
        private Optional<ServerMessageResponseTransferDestinationRequestDestination> destination = Optional.empty();

        private Optional<ServerMessageResponseTransferDestinationRequestMessage> message = Optional.empty();

        private Optional<String> error = Optional.empty();

        @JsonAnySetter
        private Map<String, Object> additionalProperties = new HashMap<>();

        private Builder() {}

        public Builder from(ServerMessageResponseTransferDestinationRequest other) {
            destination(other.getDestination());
            message(other.getMessage());
            error(other.getError());
            return this;
        }

        /**
         * <p>This is the destination you'd like the call to be transferred to.</p>
         */
        @JsonSetter(value = "destination", nulls = Nulls.SKIP)
        public Builder destination(Optional<ServerMessageResponseTransferDestinationRequestDestination> destination) {
            this.destination = destination;
            return this;
        }

        public Builder destination(ServerMessageResponseTransferDestinationRequestDestination destination) {
            this.destination = Optional.ofNullable(destination);
            return this;
        }

        /**
         * <p>This is the message that will be spoken to the user as the tool is running.</p>
         */
        @JsonSetter(value = "message", nulls = Nulls.SKIP)
        public Builder message(Optional<ServerMessageResponseTransferDestinationRequestMessage> message) {
            this.message = message;
            return this;
        }

        public Builder message(ServerMessageResponseTransferDestinationRequestMessage message) {
            this.message = Optional.ofNullable(message);
            return this;
        }

        /**
         * <p>This is the error message if the transfer should not be made.</p>
         */
        @JsonSetter(value = "error", nulls = Nulls.SKIP)
        public Builder error(Optional<String> error) {
            this.error = error;
            return this;
        }

        public Builder error(String error) {
            this.error = Optional.ofNullable(error);
            return this;
        }

        public ServerMessageResponseTransferDestinationRequest build() {
            return new ServerMessageResponseTransferDestinationRequest(
                    destination, message, error, additionalProperties);
        }
    }
}
