/**
 * This file was auto-generated by Fern from our API Definition.
 */
package com.vapi.api.types;

import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.annotation.Nulls;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.vapi.api.core.ObjectMappers;
import java.time.OffsetDateTime;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import org.jetbrains.annotations.NotNull;

@JsonInclude(JsonInclude.Include.NON_ABSENT)
@JsonDeserialize(builder = TestSuiteRun.Builder.class)
public final class TestSuiteRun {
    private final TestSuiteRunStatus status;

    private final String id;

    private final String orgId;

    private final String testSuiteId;

    private final OffsetDateTime createdAt;

    private final OffsetDateTime updatedAt;

    private final List<TestSuiteRunTestResult> testResults;

    private final Optional<String> name;

    private final Map<String, Object> additionalProperties;

    private TestSuiteRun(
            TestSuiteRunStatus status,
            String id,
            String orgId,
            String testSuiteId,
            OffsetDateTime createdAt,
            OffsetDateTime updatedAt,
            List<TestSuiteRunTestResult> testResults,
            Optional<String> name,
            Map<String, Object> additionalProperties) {
        this.status = status;
        this.id = id;
        this.orgId = orgId;
        this.testSuiteId = testSuiteId;
        this.createdAt = createdAt;
        this.updatedAt = updatedAt;
        this.testResults = testResults;
        this.name = name;
        this.additionalProperties = additionalProperties;
    }

    /**
     * @return This is the current status of the test suite run.
     */
    @JsonProperty("status")
    public TestSuiteRunStatus getStatus() {
        return status;
    }

    /**
     * @return This is the unique identifier for the test suite run.
     */
    @JsonProperty("id")
    public String getId() {
        return id;
    }

    /**
     * @return This is the unique identifier for the organization this run belongs to.
     */
    @JsonProperty("orgId")
    public String getOrgId() {
        return orgId;
    }

    /**
     * @return This is the unique identifier for the test suite this run belongs to.
     */
    @JsonProperty("testSuiteId")
    public String getTestSuiteId() {
        return testSuiteId;
    }

    /**
     * @return This is the ISO 8601 date-time string of when the test suite run was created.
     */
    @JsonProperty("createdAt")
    public OffsetDateTime getCreatedAt() {
        return createdAt;
    }

    /**
     * @return This is the ISO 8601 date-time string of when the test suite run was last updated.
     */
    @JsonProperty("updatedAt")
    public OffsetDateTime getUpdatedAt() {
        return updatedAt;
    }

    /**
     * @return These are the results of the tests in this test suite run.
     */
    @JsonProperty("testResults")
    public List<TestSuiteRunTestResult> getTestResults() {
        return testResults;
    }

    /**
     * @return This is the name of the test suite run.
     */
    @JsonProperty("name")
    public Optional<String> getName() {
        return name;
    }

    @java.lang.Override
    public boolean equals(Object other) {
        if (this == other) return true;
        return other instanceof TestSuiteRun && equalTo((TestSuiteRun) other);
    }

    @JsonAnyGetter
    public Map<String, Object> getAdditionalProperties() {
        return this.additionalProperties;
    }

    private boolean equalTo(TestSuiteRun other) {
        return status.equals(other.status)
                && id.equals(other.id)
                && orgId.equals(other.orgId)
                && testSuiteId.equals(other.testSuiteId)
                && createdAt.equals(other.createdAt)
                && updatedAt.equals(other.updatedAt)
                && testResults.equals(other.testResults)
                && name.equals(other.name);
    }

    @java.lang.Override
    public int hashCode() {
        return Objects.hash(
                this.status,
                this.id,
                this.orgId,
                this.testSuiteId,
                this.createdAt,
                this.updatedAt,
                this.testResults,
                this.name);
    }

    @java.lang.Override
    public String toString() {
        return ObjectMappers.stringify(this);
    }

    public static StatusStage builder() {
        return new Builder();
    }

    public interface StatusStage {
        /**
         * <p>This is the current status of the test suite run.</p>
         */
        IdStage status(@NotNull TestSuiteRunStatus status);

        Builder from(TestSuiteRun other);
    }

    public interface IdStage {
        /**
         * <p>This is the unique identifier for the test suite run.</p>
         */
        OrgIdStage id(@NotNull String id);
    }

    public interface OrgIdStage {
        /**
         * <p>This is the unique identifier for the organization this run belongs to.</p>
         */
        TestSuiteIdStage orgId(@NotNull String orgId);
    }

    public interface TestSuiteIdStage {
        /**
         * <p>This is the unique identifier for the test suite this run belongs to.</p>
         */
        CreatedAtStage testSuiteId(@NotNull String testSuiteId);
    }

    public interface CreatedAtStage {
        /**
         * <p>This is the ISO 8601 date-time string of when the test suite run was created.</p>
         */
        UpdatedAtStage createdAt(@NotNull OffsetDateTime createdAt);
    }

    public interface UpdatedAtStage {
        /**
         * <p>This is the ISO 8601 date-time string of when the test suite run was last updated.</p>
         */
        _FinalStage updatedAt(@NotNull OffsetDateTime updatedAt);
    }

    public interface _FinalStage {
        TestSuiteRun build();

        /**
         * <p>These are the results of the tests in this test suite run.</p>
         */
        _FinalStage testResults(List<TestSuiteRunTestResult> testResults);

        _FinalStage addTestResults(TestSuiteRunTestResult testResults);

        _FinalStage addAllTestResults(List<TestSuiteRunTestResult> testResults);

        /**
         * <p>This is the name of the test suite run.</p>
         */
        _FinalStage name(Optional<String> name);

        _FinalStage name(String name);
    }

    @JsonIgnoreProperties(ignoreUnknown = true)
    public static final class Builder
            implements StatusStage, IdStage, OrgIdStage, TestSuiteIdStage, CreatedAtStage, UpdatedAtStage, _FinalStage {
        private TestSuiteRunStatus status;

        private String id;

        private String orgId;

        private String testSuiteId;

        private OffsetDateTime createdAt;

        private OffsetDateTime updatedAt;

        private Optional<String> name = Optional.empty();

        private List<TestSuiteRunTestResult> testResults = new ArrayList<>();

        @JsonAnySetter
        private Map<String, Object> additionalProperties = new HashMap<>();

        private Builder() {}

        @java.lang.Override
        public Builder from(TestSuiteRun other) {
            status(other.getStatus());
            id(other.getId());
            orgId(other.getOrgId());
            testSuiteId(other.getTestSuiteId());
            createdAt(other.getCreatedAt());
            updatedAt(other.getUpdatedAt());
            testResults(other.getTestResults());
            name(other.getName());
            return this;
        }

        /**
         * <p>This is the current status of the test suite run.</p>
         * <p>This is the current status of the test suite run.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        @JsonSetter("status")
        public IdStage status(@NotNull TestSuiteRunStatus status) {
            this.status = Objects.requireNonNull(status, "status must not be null");
            return this;
        }

        /**
         * <p>This is the unique identifier for the test suite run.</p>
         * <p>This is the unique identifier for the test suite run.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        @JsonSetter("id")
        public OrgIdStage id(@NotNull String id) {
            this.id = Objects.requireNonNull(id, "id must not be null");
            return this;
        }

        /**
         * <p>This is the unique identifier for the organization this run belongs to.</p>
         * <p>This is the unique identifier for the organization this run belongs to.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        @JsonSetter("orgId")
        public TestSuiteIdStage orgId(@NotNull String orgId) {
            this.orgId = Objects.requireNonNull(orgId, "orgId must not be null");
            return this;
        }

        /**
         * <p>This is the unique identifier for the test suite this run belongs to.</p>
         * <p>This is the unique identifier for the test suite this run belongs to.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        @JsonSetter("testSuiteId")
        public CreatedAtStage testSuiteId(@NotNull String testSuiteId) {
            this.testSuiteId = Objects.requireNonNull(testSuiteId, "testSuiteId must not be null");
            return this;
        }

        /**
         * <p>This is the ISO 8601 date-time string of when the test suite run was created.</p>
         * <p>This is the ISO 8601 date-time string of when the test suite run was created.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        @JsonSetter("createdAt")
        public UpdatedAtStage createdAt(@NotNull OffsetDateTime createdAt) {
            this.createdAt = Objects.requireNonNull(createdAt, "createdAt must not be null");
            return this;
        }

        /**
         * <p>This is the ISO 8601 date-time string of when the test suite run was last updated.</p>
         * <p>This is the ISO 8601 date-time string of when the test suite run was last updated.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        @JsonSetter("updatedAt")
        public _FinalStage updatedAt(@NotNull OffsetDateTime updatedAt) {
            this.updatedAt = Objects.requireNonNull(updatedAt, "updatedAt must not be null");
            return this;
        }

        /**
         * <p>This is the name of the test suite run.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        public _FinalStage name(String name) {
            this.name = Optional.ofNullable(name);
            return this;
        }

        /**
         * <p>This is the name of the test suite run.</p>
         */
        @java.lang.Override
        @JsonSetter(value = "name", nulls = Nulls.SKIP)
        public _FinalStage name(Optional<String> name) {
            this.name = name;
            return this;
        }

        /**
         * <p>These are the results of the tests in this test suite run.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        public _FinalStage addAllTestResults(List<TestSuiteRunTestResult> testResults) {
            this.testResults.addAll(testResults);
            return this;
        }

        /**
         * <p>These are the results of the tests in this test suite run.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        public _FinalStage addTestResults(TestSuiteRunTestResult testResults) {
            this.testResults.add(testResults);
            return this;
        }

        /**
         * <p>These are the results of the tests in this test suite run.</p>
         */
        @java.lang.Override
        @JsonSetter(value = "testResults", nulls = Nulls.SKIP)
        public _FinalStage testResults(List<TestSuiteRunTestResult> testResults) {
            this.testResults.clear();
            this.testResults.addAll(testResults);
            return this;
        }

        @java.lang.Override
        public TestSuiteRun build() {
            return new TestSuiteRun(
                    status, id, orgId, testSuiteId, createdAt, updatedAt, testResults, name, additionalProperties);
        }
    }
}
