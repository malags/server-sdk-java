/**
 * This file was auto-generated by Fern from our API Definition.
 */
package com.vapi.api.types;

import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.annotation.Nulls;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.vapi.api.core.ObjectMappers;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;

@JsonInclude(JsonInclude.Include.NON_ABSENT)
@JsonDeserialize(builder = CreateByoSipTrunkCredentialDto.Builder.class)
public final class CreateByoSipTrunkCredentialDto {
    private final List<SipTrunkGateway> gateways;

    private final Optional<SipTrunkOutboundAuthenticationPlan> outboundAuthenticationPlan;

    private final Optional<Boolean> outboundLeadingPlusEnabled;

    private final Optional<String> techPrefix;

    private final Optional<String> sipDiversionHeader;

    private final Optional<SbcConfiguration> sbcConfiguration;

    private final Optional<String> name;

    private final Map<String, Object> additionalProperties;

    private CreateByoSipTrunkCredentialDto(
            List<SipTrunkGateway> gateways,
            Optional<SipTrunkOutboundAuthenticationPlan> outboundAuthenticationPlan,
            Optional<Boolean> outboundLeadingPlusEnabled,
            Optional<String> techPrefix,
            Optional<String> sipDiversionHeader,
            Optional<SbcConfiguration> sbcConfiguration,
            Optional<String> name,
            Map<String, Object> additionalProperties) {
        this.gateways = gateways;
        this.outboundAuthenticationPlan = outboundAuthenticationPlan;
        this.outboundLeadingPlusEnabled = outboundLeadingPlusEnabled;
        this.techPrefix = techPrefix;
        this.sipDiversionHeader = sipDiversionHeader;
        this.sbcConfiguration = sbcConfiguration;
        this.name = name;
        this.additionalProperties = additionalProperties;
    }

    /**
     * @return This is the list of SIP trunk's gateways.
     */
    @JsonProperty("gateways")
    public List<SipTrunkGateway> getGateways() {
        return gateways;
    }

    /**
     * @return This can be used to configure the outbound authentication if required by the SIP trunk.
     */
    @JsonProperty("outboundAuthenticationPlan")
    public Optional<SipTrunkOutboundAuthenticationPlan> getOutboundAuthenticationPlan() {
        return outboundAuthenticationPlan;
    }

    /**
     * @return This ensures the outbound origination attempts have a leading plus. Defaults to false to match conventional telecom behavior.
     * <p>Usage:</p>
     * <ul>
     * <li>Vonage/Twilio requires leading plus for all outbound calls. Set this to true.</li>
     * </ul>
     * <p>@default false</p>
     */
    @JsonProperty("outboundLeadingPlusEnabled")
    public Optional<Boolean> getOutboundLeadingPlusEnabled() {
        return outboundLeadingPlusEnabled;
    }

    /**
     * @return This can be used to configure the tech prefix on outbound calls. This is an advanced property.
     */
    @JsonProperty("techPrefix")
    public Optional<String> getTechPrefix() {
        return techPrefix;
    }

    /**
     * @return This can be used to enable the SIP diversion header for authenticating the calling number if the SIP trunk supports it. This is an advanced property.
     */
    @JsonProperty("sipDiversionHeader")
    public Optional<String> getSipDiversionHeader() {
        return sipDiversionHeader;
    }

    /**
     * @return This is an advanced configuration for enterprise deployments. This uses the onprem SBC to trunk into the SIP trunk's <code>gateways</code>, rather than the managed SBC provided by Vapi.
     */
    @JsonProperty("sbcConfiguration")
    public Optional<SbcConfiguration> getSbcConfiguration() {
        return sbcConfiguration;
    }

    /**
     * @return This is the name of credential. This is just for your reference.
     */
    @JsonProperty("name")
    public Optional<String> getName() {
        return name;
    }

    @java.lang.Override
    public boolean equals(Object other) {
        if (this == other) return true;
        return other instanceof CreateByoSipTrunkCredentialDto && equalTo((CreateByoSipTrunkCredentialDto) other);
    }

    @JsonAnyGetter
    public Map<String, Object> getAdditionalProperties() {
        return this.additionalProperties;
    }

    private boolean equalTo(CreateByoSipTrunkCredentialDto other) {
        return gateways.equals(other.gateways)
                && outboundAuthenticationPlan.equals(other.outboundAuthenticationPlan)
                && outboundLeadingPlusEnabled.equals(other.outboundLeadingPlusEnabled)
                && techPrefix.equals(other.techPrefix)
                && sipDiversionHeader.equals(other.sipDiversionHeader)
                && sbcConfiguration.equals(other.sbcConfiguration)
                && name.equals(other.name);
    }

    @java.lang.Override
    public int hashCode() {
        return Objects.hash(
                this.gateways,
                this.outboundAuthenticationPlan,
                this.outboundLeadingPlusEnabled,
                this.techPrefix,
                this.sipDiversionHeader,
                this.sbcConfiguration,
                this.name);
    }

    @java.lang.Override
    public String toString() {
        return ObjectMappers.stringify(this);
    }

    public static Builder builder() {
        return new Builder();
    }

    @JsonIgnoreProperties(ignoreUnknown = true)
    public static final class Builder {
        private List<SipTrunkGateway> gateways = new ArrayList<>();

        private Optional<SipTrunkOutboundAuthenticationPlan> outboundAuthenticationPlan = Optional.empty();

        private Optional<Boolean> outboundLeadingPlusEnabled = Optional.empty();

        private Optional<String> techPrefix = Optional.empty();

        private Optional<String> sipDiversionHeader = Optional.empty();

        private Optional<SbcConfiguration> sbcConfiguration = Optional.empty();

        private Optional<String> name = Optional.empty();

        @JsonAnySetter
        private Map<String, Object> additionalProperties = new HashMap<>();

        private Builder() {}

        public Builder from(CreateByoSipTrunkCredentialDto other) {
            gateways(other.getGateways());
            outboundAuthenticationPlan(other.getOutboundAuthenticationPlan());
            outboundLeadingPlusEnabled(other.getOutboundLeadingPlusEnabled());
            techPrefix(other.getTechPrefix());
            sipDiversionHeader(other.getSipDiversionHeader());
            sbcConfiguration(other.getSbcConfiguration());
            name(other.getName());
            return this;
        }

        /**
         * <p>This is the list of SIP trunk's gateways.</p>
         */
        @JsonSetter(value = "gateways", nulls = Nulls.SKIP)
        public Builder gateways(List<SipTrunkGateway> gateways) {
            this.gateways.clear();
            this.gateways.addAll(gateways);
            return this;
        }

        public Builder addGateways(SipTrunkGateway gateways) {
            this.gateways.add(gateways);
            return this;
        }

        public Builder addAllGateways(List<SipTrunkGateway> gateways) {
            this.gateways.addAll(gateways);
            return this;
        }

        /**
         * <p>This can be used to configure the outbound authentication if required by the SIP trunk.</p>
         */
        @JsonSetter(value = "outboundAuthenticationPlan", nulls = Nulls.SKIP)
        public Builder outboundAuthenticationPlan(
                Optional<SipTrunkOutboundAuthenticationPlan> outboundAuthenticationPlan) {
            this.outboundAuthenticationPlan = outboundAuthenticationPlan;
            return this;
        }

        public Builder outboundAuthenticationPlan(SipTrunkOutboundAuthenticationPlan outboundAuthenticationPlan) {
            this.outboundAuthenticationPlan = Optional.ofNullable(outboundAuthenticationPlan);
            return this;
        }

        /**
         * <p>This ensures the outbound origination attempts have a leading plus. Defaults to false to match conventional telecom behavior.</p>
         * <p>Usage:</p>
         * <ul>
         * <li>Vonage/Twilio requires leading plus for all outbound calls. Set this to true.</li>
         * </ul>
         * <p>@default false</p>
         */
        @JsonSetter(value = "outboundLeadingPlusEnabled", nulls = Nulls.SKIP)
        public Builder outboundLeadingPlusEnabled(Optional<Boolean> outboundLeadingPlusEnabled) {
            this.outboundLeadingPlusEnabled = outboundLeadingPlusEnabled;
            return this;
        }

        public Builder outboundLeadingPlusEnabled(Boolean outboundLeadingPlusEnabled) {
            this.outboundLeadingPlusEnabled = Optional.ofNullable(outboundLeadingPlusEnabled);
            return this;
        }

        /**
         * <p>This can be used to configure the tech prefix on outbound calls. This is an advanced property.</p>
         */
        @JsonSetter(value = "techPrefix", nulls = Nulls.SKIP)
        public Builder techPrefix(Optional<String> techPrefix) {
            this.techPrefix = techPrefix;
            return this;
        }

        public Builder techPrefix(String techPrefix) {
            this.techPrefix = Optional.ofNullable(techPrefix);
            return this;
        }

        /**
         * <p>This can be used to enable the SIP diversion header for authenticating the calling number if the SIP trunk supports it. This is an advanced property.</p>
         */
        @JsonSetter(value = "sipDiversionHeader", nulls = Nulls.SKIP)
        public Builder sipDiversionHeader(Optional<String> sipDiversionHeader) {
            this.sipDiversionHeader = sipDiversionHeader;
            return this;
        }

        public Builder sipDiversionHeader(String sipDiversionHeader) {
            this.sipDiversionHeader = Optional.ofNullable(sipDiversionHeader);
            return this;
        }

        /**
         * <p>This is an advanced configuration for enterprise deployments. This uses the onprem SBC to trunk into the SIP trunk's <code>gateways</code>, rather than the managed SBC provided by Vapi.</p>
         */
        @JsonSetter(value = "sbcConfiguration", nulls = Nulls.SKIP)
        public Builder sbcConfiguration(Optional<SbcConfiguration> sbcConfiguration) {
            this.sbcConfiguration = sbcConfiguration;
            return this;
        }

        public Builder sbcConfiguration(SbcConfiguration sbcConfiguration) {
            this.sbcConfiguration = Optional.ofNullable(sbcConfiguration);
            return this;
        }

        /**
         * <p>This is the name of credential. This is just for your reference.</p>
         */
        @JsonSetter(value = "name", nulls = Nulls.SKIP)
        public Builder name(Optional<String> name) {
            this.name = name;
            return this;
        }

        public Builder name(String name) {
            this.name = Optional.ofNullable(name);
            return this;
        }

        public CreateByoSipTrunkCredentialDto build() {
            return new CreateByoSipTrunkCredentialDto(
                    gateways,
                    outboundAuthenticationPlan,
                    outboundLeadingPlusEnabled,
                    techPrefix,
                    sipDiversionHeader,
                    sbcConfiguration,
                    name,
                    additionalProperties);
        }
    }
}
