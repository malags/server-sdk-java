/**
 * This file was auto-generated by Fern from our API Definition.
 */
package com.vapi.api.types;

import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.annotation.Nulls;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.vapi.api.core.ObjectMappers;
import java.util.HashMap;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import org.jetbrains.annotations.NotNull;

@JsonInclude(JsonInclude.Include.NON_ABSENT)
@JsonDeserialize(builder = TransferFallbackPlan.Builder.class)
public final class TransferFallbackPlan {
    private final TransferFallbackPlanMessage message;

    private final Optional<Boolean> endCallEnabled;

    private final Map<String, Object> additionalProperties;

    private TransferFallbackPlan(
            TransferFallbackPlanMessage message,
            Optional<Boolean> endCallEnabled,
            Map<String, Object> additionalProperties) {
        this.message = message;
        this.endCallEnabled = endCallEnabled;
        this.additionalProperties = additionalProperties;
    }

    /**
     * @return This is the message the assistant will deliver to the customer if the transfer fails.
     */
    @JsonProperty("message")
    public TransferFallbackPlanMessage getMessage() {
        return message;
    }

    /**
     * @return This controls what happens after delivering the failure message to the customer.
     * <ul>
     * <li>true: End the call after delivering the failure message (default)</li>
     * <li>false: Keep the assistant on the call to continue handling the customer's request</li>
     * </ul>
     * <p>@default true</p>
     */
    @JsonProperty("endCallEnabled")
    public Optional<Boolean> getEndCallEnabled() {
        return endCallEnabled;
    }

    @java.lang.Override
    public boolean equals(Object other) {
        if (this == other) return true;
        return other instanceof TransferFallbackPlan && equalTo((TransferFallbackPlan) other);
    }

    @JsonAnyGetter
    public Map<String, Object> getAdditionalProperties() {
        return this.additionalProperties;
    }

    private boolean equalTo(TransferFallbackPlan other) {
        return message.equals(other.message) && endCallEnabled.equals(other.endCallEnabled);
    }

    @java.lang.Override
    public int hashCode() {
        return Objects.hash(this.message, this.endCallEnabled);
    }

    @java.lang.Override
    public String toString() {
        return ObjectMappers.stringify(this);
    }

    public static MessageStage builder() {
        return new Builder();
    }

    public interface MessageStage {
        /**
         * <p>This is the message the assistant will deliver to the customer if the transfer fails.</p>
         */
        _FinalStage message(@NotNull TransferFallbackPlanMessage message);

        Builder from(TransferFallbackPlan other);
    }

    public interface _FinalStage {
        TransferFallbackPlan build();

        /**
         * <p>This controls what happens after delivering the failure message to the customer.</p>
         * <ul>
         * <li>true: End the call after delivering the failure message (default)</li>
         * <li>false: Keep the assistant on the call to continue handling the customer's request</li>
         * </ul>
         * <p>@default true</p>
         */
        _FinalStage endCallEnabled(Optional<Boolean> endCallEnabled);

        _FinalStage endCallEnabled(Boolean endCallEnabled);
    }

    @JsonIgnoreProperties(ignoreUnknown = true)
    public static final class Builder implements MessageStage, _FinalStage {
        private TransferFallbackPlanMessage message;

        private Optional<Boolean> endCallEnabled = Optional.empty();

        @JsonAnySetter
        private Map<String, Object> additionalProperties = new HashMap<>();

        private Builder() {}

        @java.lang.Override
        public Builder from(TransferFallbackPlan other) {
            message(other.getMessage());
            endCallEnabled(other.getEndCallEnabled());
            return this;
        }

        /**
         * <p>This is the message the assistant will deliver to the customer if the transfer fails.</p>
         * <p>This is the message the assistant will deliver to the customer if the transfer fails.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        @JsonSetter("message")
        public _FinalStage message(@NotNull TransferFallbackPlanMessage message) {
            this.message = Objects.requireNonNull(message, "message must not be null");
            return this;
        }

        /**
         * <p>This controls what happens after delivering the failure message to the customer.</p>
         * <ul>
         * <li>true: End the call after delivering the failure message (default)</li>
         * <li>false: Keep the assistant on the call to continue handling the customer's request</li>
         * </ul>
         * <p>@default true</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        public _FinalStage endCallEnabled(Boolean endCallEnabled) {
            this.endCallEnabled = Optional.ofNullable(endCallEnabled);
            return this;
        }

        /**
         * <p>This controls what happens after delivering the failure message to the customer.</p>
         * <ul>
         * <li>true: End the call after delivering the failure message (default)</li>
         * <li>false: Keep the assistant on the call to continue handling the customer's request</li>
         * </ul>
         * <p>@default true</p>
         */
        @java.lang.Override
        @JsonSetter(value = "endCallEnabled", nulls = Nulls.SKIP)
        public _FinalStage endCallEnabled(Optional<Boolean> endCallEnabled) {
            this.endCallEnabled = endCallEnabled;
            return this;
        }

        @java.lang.Override
        public TransferFallbackPlan build() {
            return new TransferFallbackPlan(message, endCallEnabled, additionalProperties);
        }
    }
}
