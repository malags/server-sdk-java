/**
 * This file was auto-generated by Fern from our API Definition.
 */
package com.vapi.api.types;

import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.annotation.Nulls;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.vapi.api.core.ObjectMappers;
import java.util.HashMap;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import org.jetbrains.annotations.NotNull;

@JsonInclude(JsonInclude.Include.NON_ABSENT)
@JsonDeserialize(builder = OpenAiWebChatRequest.Builder.class)
public final class OpenAiWebChatRequest {
    private final String assistantId;

    private final Optional<String> sessionId;

    private final Optional<ChatAssistantOverrides> assistantOverrides;

    private final Optional<CreateWebCustomerDto> customer;

    private final OpenAiWebChatRequestInput input;

    private final Optional<Boolean> stream;

    private final Map<String, Object> additionalProperties;

    private OpenAiWebChatRequest(
            String assistantId,
            Optional<String> sessionId,
            Optional<ChatAssistantOverrides> assistantOverrides,
            Optional<CreateWebCustomerDto> customer,
            OpenAiWebChatRequestInput input,
            Optional<Boolean> stream,
            Map<String, Object> additionalProperties) {
        this.assistantId = assistantId;
        this.sessionId = sessionId;
        this.assistantOverrides = assistantOverrides;
        this.customer = customer;
        this.input = input;
        this.stream = stream;
        this.additionalProperties = additionalProperties;
    }

    /**
     * @return The assistant ID to use for this chat
     */
    @JsonProperty("assistantId")
    public String getAssistantId() {
        return assistantId;
    }

    /**
     * @return This is the ID of the session that will be used for the chat.
     * If provided, the conversation will continue from the previous state.
     * If not provided or expired, a new session will be created.
     */
    @JsonProperty("sessionId")
    public Optional<String> getSessionId() {
        return sessionId;
    }

    /**
     * @return These are the variable values that will be used to replace template variables in the assistant messages.
     * Only variable substitution is supported in web chat - other assistant properties cannot be overridden.
     */
    @JsonProperty("assistantOverrides")
    public Optional<ChatAssistantOverrides> getAssistantOverrides() {
        return assistantOverrides;
    }

    /**
     * @return This is the customer information for the chat.
     * Used to automatically manage sessions for repeat customers.
     */
    @JsonProperty("customer")
    public Optional<CreateWebCustomerDto> getCustomer() {
        return customer;
    }

    /**
     * @return This is the input text for the chat.
     * Can be a string or an array of chat messages.
     */
    @JsonProperty("input")
    public OpenAiWebChatRequestInput getInput() {
        return input;
    }

    /**
     * @return Whether to stream the response or not.
     */
    @JsonProperty("stream")
    public Optional<Boolean> getStream() {
        return stream;
    }

    @java.lang.Override
    public boolean equals(Object other) {
        if (this == other) return true;
        return other instanceof OpenAiWebChatRequest && equalTo((OpenAiWebChatRequest) other);
    }

    @JsonAnyGetter
    public Map<String, Object> getAdditionalProperties() {
        return this.additionalProperties;
    }

    private boolean equalTo(OpenAiWebChatRequest other) {
        return assistantId.equals(other.assistantId)
                && sessionId.equals(other.sessionId)
                && assistantOverrides.equals(other.assistantOverrides)
                && customer.equals(other.customer)
                && input.equals(other.input)
                && stream.equals(other.stream);
    }

    @java.lang.Override
    public int hashCode() {
        return Objects.hash(
                this.assistantId, this.sessionId, this.assistantOverrides, this.customer, this.input, this.stream);
    }

    @java.lang.Override
    public String toString() {
        return ObjectMappers.stringify(this);
    }

    public static AssistantIdStage builder() {
        return new Builder();
    }

    public interface AssistantIdStage {
        /**
         * <p>The assistant ID to use for this chat</p>
         */
        InputStage assistantId(@NotNull String assistantId);

        Builder from(OpenAiWebChatRequest other);
    }

    public interface InputStage {
        /**
         * <p>This is the input text for the chat.
         * Can be a string or an array of chat messages.</p>
         */
        _FinalStage input(@NotNull OpenAiWebChatRequestInput input);
    }

    public interface _FinalStage {
        OpenAiWebChatRequest build();

        /**
         * <p>This is the ID of the session that will be used for the chat.
         * If provided, the conversation will continue from the previous state.
         * If not provided or expired, a new session will be created.</p>
         */
        _FinalStage sessionId(Optional<String> sessionId);

        _FinalStage sessionId(String sessionId);

        /**
         * <p>These are the variable values that will be used to replace template variables in the assistant messages.
         * Only variable substitution is supported in web chat - other assistant properties cannot be overridden.</p>
         */
        _FinalStage assistantOverrides(Optional<ChatAssistantOverrides> assistantOverrides);

        _FinalStage assistantOverrides(ChatAssistantOverrides assistantOverrides);

        /**
         * <p>This is the customer information for the chat.
         * Used to automatically manage sessions for repeat customers.</p>
         */
        _FinalStage customer(Optional<CreateWebCustomerDto> customer);

        _FinalStage customer(CreateWebCustomerDto customer);

        /**
         * <p>Whether to stream the response or not.</p>
         */
        _FinalStage stream(Optional<Boolean> stream);

        _FinalStage stream(Boolean stream);
    }

    @JsonIgnoreProperties(ignoreUnknown = true)
    public static final class Builder implements AssistantIdStage, InputStage, _FinalStage {
        private String assistantId;

        private OpenAiWebChatRequestInput input;

        private Optional<Boolean> stream = Optional.empty();

        private Optional<CreateWebCustomerDto> customer = Optional.empty();

        private Optional<ChatAssistantOverrides> assistantOverrides = Optional.empty();

        private Optional<String> sessionId = Optional.empty();

        @JsonAnySetter
        private Map<String, Object> additionalProperties = new HashMap<>();

        private Builder() {}

        @java.lang.Override
        public Builder from(OpenAiWebChatRequest other) {
            assistantId(other.getAssistantId());
            sessionId(other.getSessionId());
            assistantOverrides(other.getAssistantOverrides());
            customer(other.getCustomer());
            input(other.getInput());
            stream(other.getStream());
            return this;
        }

        /**
         * <p>The assistant ID to use for this chat</p>
         * <p>The assistant ID to use for this chat</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        @JsonSetter("assistantId")
        public InputStage assistantId(@NotNull String assistantId) {
            this.assistantId = Objects.requireNonNull(assistantId, "assistantId must not be null");
            return this;
        }

        /**
         * <p>This is the input text for the chat.
         * Can be a string or an array of chat messages.</p>
         * <p>This is the input text for the chat.
         * Can be a string or an array of chat messages.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        @JsonSetter("input")
        public _FinalStage input(@NotNull OpenAiWebChatRequestInput input) {
            this.input = Objects.requireNonNull(input, "input must not be null");
            return this;
        }

        /**
         * <p>Whether to stream the response or not.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        public _FinalStage stream(Boolean stream) {
            this.stream = Optional.ofNullable(stream);
            return this;
        }

        /**
         * <p>Whether to stream the response or not.</p>
         */
        @java.lang.Override
        @JsonSetter(value = "stream", nulls = Nulls.SKIP)
        public _FinalStage stream(Optional<Boolean> stream) {
            this.stream = stream;
            return this;
        }

        /**
         * <p>This is the customer information for the chat.
         * Used to automatically manage sessions for repeat customers.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        public _FinalStage customer(CreateWebCustomerDto customer) {
            this.customer = Optional.ofNullable(customer);
            return this;
        }

        /**
         * <p>This is the customer information for the chat.
         * Used to automatically manage sessions for repeat customers.</p>
         */
        @java.lang.Override
        @JsonSetter(value = "customer", nulls = Nulls.SKIP)
        public _FinalStage customer(Optional<CreateWebCustomerDto> customer) {
            this.customer = customer;
            return this;
        }

        /**
         * <p>These are the variable values that will be used to replace template variables in the assistant messages.
         * Only variable substitution is supported in web chat - other assistant properties cannot be overridden.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        public _FinalStage assistantOverrides(ChatAssistantOverrides assistantOverrides) {
            this.assistantOverrides = Optional.ofNullable(assistantOverrides);
            return this;
        }

        /**
         * <p>These are the variable values that will be used to replace template variables in the assistant messages.
         * Only variable substitution is supported in web chat - other assistant properties cannot be overridden.</p>
         */
        @java.lang.Override
        @JsonSetter(value = "assistantOverrides", nulls = Nulls.SKIP)
        public _FinalStage assistantOverrides(Optional<ChatAssistantOverrides> assistantOverrides) {
            this.assistantOverrides = assistantOverrides;
            return this;
        }

        /**
         * <p>This is the ID of the session that will be used for the chat.
         * If provided, the conversation will continue from the previous state.
         * If not provided or expired, a new session will be created.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        public _FinalStage sessionId(String sessionId) {
            this.sessionId = Optional.ofNullable(sessionId);
            return this;
        }

        /**
         * <p>This is the ID of the session that will be used for the chat.
         * If provided, the conversation will continue from the previous state.
         * If not provided or expired, a new session will be created.</p>
         */
        @java.lang.Override
        @JsonSetter(value = "sessionId", nulls = Nulls.SKIP)
        public _FinalStage sessionId(Optional<String> sessionId) {
            this.sessionId = sessionId;
            return this;
        }

        @java.lang.Override
        public OpenAiWebChatRequest build() {
            return new OpenAiWebChatRequest(
                    assistantId, sessionId, assistantOverrides, customer, input, stream, additionalProperties);
        }
    }
}
