/**
 * This file was auto-generated by Fern from our API Definition.
 */
package com.vapi.api.types;

import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.annotation.Nulls;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.vapi.api.core.ObjectMappers;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;

@JsonInclude(JsonInclude.Include.NON_ABSENT)
@JsonDeserialize(builder = ToolMessageDelayed.Builder.class)
public final class ToolMessageDelayed {
    private final Optional<List<TextContent>> contents;

    private final Optional<Double> timingMilliseconds;

    private final Optional<String> content;

    private final Optional<List<Condition>> conditions;

    private final Map<String, Object> additionalProperties;

    private ToolMessageDelayed(
            Optional<List<TextContent>> contents,
            Optional<Double> timingMilliseconds,
            Optional<String> content,
            Optional<List<Condition>> conditions,
            Map<String, Object> additionalProperties) {
        this.contents = contents;
        this.timingMilliseconds = timingMilliseconds;
        this.content = content;
        this.conditions = conditions;
        this.additionalProperties = additionalProperties;
    }

    /**
     * @return This is an alternative to the <code>content</code> property. It allows to specify variants of the same content, one per language.
     * <p>Usage:</p>
     * <ul>
     * <li>If your assistants are multilingual, you can provide content for each language.</li>
     * <li>If you don't provide content for a language, the first item in the array will be automatically translated to the active language at that moment.</li>
     * </ul>
     * <p>This will override the <code>content</code> property.</p>
     */
    @JsonProperty("contents")
    public Optional<List<TextContent>> getContents() {
        return contents;
    }

    /**
     * @return The number of milliseconds to wait for the server response before saying this message.
     */
    @JsonProperty("timingMilliseconds")
    public Optional<Double> getTimingMilliseconds() {
        return timingMilliseconds;
    }

    /**
     * @return This is the content that the assistant says when this message is triggered.
     */
    @JsonProperty("content")
    public Optional<String> getContent() {
        return content;
    }

    /**
     * @return This is an optional array of conditions that the tool call arguments must meet in order for this message to be triggered.
     */
    @JsonProperty("conditions")
    public Optional<List<Condition>> getConditions() {
        return conditions;
    }

    @java.lang.Override
    public boolean equals(Object other) {
        if (this == other) return true;
        return other instanceof ToolMessageDelayed && equalTo((ToolMessageDelayed) other);
    }

    @JsonAnyGetter
    public Map<String, Object> getAdditionalProperties() {
        return this.additionalProperties;
    }

    private boolean equalTo(ToolMessageDelayed other) {
        return contents.equals(other.contents)
                && timingMilliseconds.equals(other.timingMilliseconds)
                && content.equals(other.content)
                && conditions.equals(other.conditions);
    }

    @java.lang.Override
    public int hashCode() {
        return Objects.hash(this.contents, this.timingMilliseconds, this.content, this.conditions);
    }

    @java.lang.Override
    public String toString() {
        return ObjectMappers.stringify(this);
    }

    public static Builder builder() {
        return new Builder();
    }

    @JsonIgnoreProperties(ignoreUnknown = true)
    public static final class Builder {
        private Optional<List<TextContent>> contents = Optional.empty();

        private Optional<Double> timingMilliseconds = Optional.empty();

        private Optional<String> content = Optional.empty();

        private Optional<List<Condition>> conditions = Optional.empty();

        @JsonAnySetter
        private Map<String, Object> additionalProperties = new HashMap<>();

        private Builder() {}

        public Builder from(ToolMessageDelayed other) {
            contents(other.getContents());
            timingMilliseconds(other.getTimingMilliseconds());
            content(other.getContent());
            conditions(other.getConditions());
            return this;
        }

        /**
         * <p>This is an alternative to the <code>content</code> property. It allows to specify variants of the same content, one per language.</p>
         * <p>Usage:</p>
         * <ul>
         * <li>If your assistants are multilingual, you can provide content for each language.</li>
         * <li>If you don't provide content for a language, the first item in the array will be automatically translated to the active language at that moment.</li>
         * </ul>
         * <p>This will override the <code>content</code> property.</p>
         */
        @JsonSetter(value = "contents", nulls = Nulls.SKIP)
        public Builder contents(Optional<List<TextContent>> contents) {
            this.contents = contents;
            return this;
        }

        public Builder contents(List<TextContent> contents) {
            this.contents = Optional.ofNullable(contents);
            return this;
        }

        /**
         * <p>The number of milliseconds to wait for the server response before saying this message.</p>
         */
        @JsonSetter(value = "timingMilliseconds", nulls = Nulls.SKIP)
        public Builder timingMilliseconds(Optional<Double> timingMilliseconds) {
            this.timingMilliseconds = timingMilliseconds;
            return this;
        }

        public Builder timingMilliseconds(Double timingMilliseconds) {
            this.timingMilliseconds = Optional.ofNullable(timingMilliseconds);
            return this;
        }

        /**
         * <p>This is the content that the assistant says when this message is triggered.</p>
         */
        @JsonSetter(value = "content", nulls = Nulls.SKIP)
        public Builder content(Optional<String> content) {
            this.content = content;
            return this;
        }

        public Builder content(String content) {
            this.content = Optional.ofNullable(content);
            return this;
        }

        /**
         * <p>This is an optional array of conditions that the tool call arguments must meet in order for this message to be triggered.</p>
         */
        @JsonSetter(value = "conditions", nulls = Nulls.SKIP)
        public Builder conditions(Optional<List<Condition>> conditions) {
            this.conditions = conditions;
            return this;
        }

        public Builder conditions(List<Condition> conditions) {
            this.conditions = Optional.ofNullable(conditions);
            return this;
        }

        public ToolMessageDelayed build() {
            return new ToolMessageDelayed(contents, timingMilliseconds, content, conditions, additionalProperties);
        }
    }
}
