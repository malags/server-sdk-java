/**
 * This file was auto-generated by Fern from our API Definition.
 */
package com.vapi.api.types;

import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.annotation.Nulls;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.vapi.api.core.ObjectMappers;
import java.time.OffsetDateTime;
import java.util.HashMap;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;

@JsonInclude(JsonInclude.Include.NON_ABSENT)
@JsonDeserialize(builder = Oauth2AuthenticationSession.Builder.class)
public final class Oauth2AuthenticationSession {
    private final Optional<String> accessToken;

    private final Optional<OffsetDateTime> expiresAt;

    private final Optional<String> refreshToken;

    private final Map<String, Object> additionalProperties;

    private Oauth2AuthenticationSession(
            Optional<String> accessToken,
            Optional<OffsetDateTime> expiresAt,
            Optional<String> refreshToken,
            Map<String, Object> additionalProperties) {
        this.accessToken = accessToken;
        this.expiresAt = expiresAt;
        this.refreshToken = refreshToken;
        this.additionalProperties = additionalProperties;
    }

    /**
     * @return This is the OAuth2 access token.
     */
    @JsonProperty("accessToken")
    public Optional<String> getAccessToken() {
        return accessToken;
    }

    /**
     * @return This is the OAuth2 access token expiration.
     */
    @JsonProperty("expiresAt")
    public Optional<OffsetDateTime> getExpiresAt() {
        return expiresAt;
    }

    /**
     * @return This is the OAuth2 refresh token.
     */
    @JsonProperty("refreshToken")
    public Optional<String> getRefreshToken() {
        return refreshToken;
    }

    @java.lang.Override
    public boolean equals(Object other) {
        if (this == other) return true;
        return other instanceof Oauth2AuthenticationSession && equalTo((Oauth2AuthenticationSession) other);
    }

    @JsonAnyGetter
    public Map<String, Object> getAdditionalProperties() {
        return this.additionalProperties;
    }

    private boolean equalTo(Oauth2AuthenticationSession other) {
        return accessToken.equals(other.accessToken)
                && expiresAt.equals(other.expiresAt)
                && refreshToken.equals(other.refreshToken);
    }

    @java.lang.Override
    public int hashCode() {
        return Objects.hash(this.accessToken, this.expiresAt, this.refreshToken);
    }

    @java.lang.Override
    public String toString() {
        return ObjectMappers.stringify(this);
    }

    public static Builder builder() {
        return new Builder();
    }

    @JsonIgnoreProperties(ignoreUnknown = true)
    public static final class Builder {
        private Optional<String> accessToken = Optional.empty();

        private Optional<OffsetDateTime> expiresAt = Optional.empty();

        private Optional<String> refreshToken = Optional.empty();

        @JsonAnySetter
        private Map<String, Object> additionalProperties = new HashMap<>();

        private Builder() {}

        public Builder from(Oauth2AuthenticationSession other) {
            accessToken(other.getAccessToken());
            expiresAt(other.getExpiresAt());
            refreshToken(other.getRefreshToken());
            return this;
        }

        /**
         * <p>This is the OAuth2 access token.</p>
         */
        @JsonSetter(value = "accessToken", nulls = Nulls.SKIP)
        public Builder accessToken(Optional<String> accessToken) {
            this.accessToken = accessToken;
            return this;
        }

        public Builder accessToken(String accessToken) {
            this.accessToken = Optional.ofNullable(accessToken);
            return this;
        }

        /**
         * <p>This is the OAuth2 access token expiration.</p>
         */
        @JsonSetter(value = "expiresAt", nulls = Nulls.SKIP)
        public Builder expiresAt(Optional<OffsetDateTime> expiresAt) {
            this.expiresAt = expiresAt;
            return this;
        }

        public Builder expiresAt(OffsetDateTime expiresAt) {
            this.expiresAt = Optional.ofNullable(expiresAt);
            return this;
        }

        /**
         * <p>This is the OAuth2 refresh token.</p>
         */
        @JsonSetter(value = "refreshToken", nulls = Nulls.SKIP)
        public Builder refreshToken(Optional<String> refreshToken) {
            this.refreshToken = refreshToken;
            return this;
        }

        public Builder refreshToken(String refreshToken) {
            this.refreshToken = Optional.ofNullable(refreshToken);
            return this;
        }

        public Oauth2AuthenticationSession build() {
            return new Oauth2AuthenticationSession(accessToken, expiresAt, refreshToken, additionalProperties);
        }
    }
}
