/**
 * This file was auto-generated by Fern from our API Definition.
 */
package com.vapi.api.types;

import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.annotation.Nulls;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.vapi.api.core.ObjectMappers;
import java.util.HashMap;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;

@JsonInclude(JsonInclude.Include.NON_ABSENT)
@JsonDeserialize(builder = McpToolMetadata.Builder.class)
public final class McpToolMetadata {
    private final Optional<McpToolMetadataProtocol> protocol;

    private final Map<String, Object> additionalProperties;

    private McpToolMetadata(Optional<McpToolMetadataProtocol> protocol, Map<String, Object> additionalProperties) {
        this.protocol = protocol;
        this.additionalProperties = additionalProperties;
    }

    /**
     * @return This is the protocol used for MCP communication. Defaults to Streamable HTTP.
     */
    @JsonProperty("protocol")
    public Optional<McpToolMetadataProtocol> getProtocol() {
        return protocol;
    }

    @java.lang.Override
    public boolean equals(Object other) {
        if (this == other) return true;
        return other instanceof McpToolMetadata && equalTo((McpToolMetadata) other);
    }

    @JsonAnyGetter
    public Map<String, Object> getAdditionalProperties() {
        return this.additionalProperties;
    }

    private boolean equalTo(McpToolMetadata other) {
        return protocol.equals(other.protocol);
    }

    @java.lang.Override
    public int hashCode() {
        return Objects.hash(this.protocol);
    }

    @java.lang.Override
    public String toString() {
        return ObjectMappers.stringify(this);
    }

    public static Builder builder() {
        return new Builder();
    }

    @JsonIgnoreProperties(ignoreUnknown = true)
    public static final class Builder {
        private Optional<McpToolMetadataProtocol> protocol = Optional.empty();

        @JsonAnySetter
        private Map<String, Object> additionalProperties = new HashMap<>();

        private Builder() {}

        public Builder from(McpToolMetadata other) {
            protocol(other.getProtocol());
            return this;
        }

        /**
         * <p>This is the protocol used for MCP communication. Defaults to Streamable HTTP.</p>
         */
        @JsonSetter(value = "protocol", nulls = Nulls.SKIP)
        public Builder protocol(Optional<McpToolMetadataProtocol> protocol) {
            this.protocol = protocol;
            return this;
        }

        public Builder protocol(McpToolMetadataProtocol protocol) {
            this.protocol = Optional.ofNullable(protocol);
            return this;
        }

        public McpToolMetadata build() {
            return new McpToolMetadata(protocol, additionalProperties);
        }
    }
}
