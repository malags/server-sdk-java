/**
 * This file was auto-generated by Fern from our API Definition.
 */
package com.vapi.api.types;

import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.annotation.Nulls;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.vapi.api.core.ObjectMappers;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Objects;

@JsonInclude(JsonInclude.Include.NON_ABSENT)
@JsonDeserialize(builder = CallBatchResponse.Builder.class)
public final class CallBatchResponse {
    private final List<Call> results;

    private final List<CallBatchError> errors;

    private final Map<String, Object> additionalProperties;

    private CallBatchResponse(
            List<Call> results, List<CallBatchError> errors, Map<String, Object> additionalProperties) {
        this.results = results;
        this.errors = errors;
        this.additionalProperties = additionalProperties;
    }

    /**
     * @return This is the list of calls that were created.
     */
    @JsonProperty("results")
    public List<Call> getResults() {
        return results;
    }

    /**
     * @return This is the list of calls that failed to be created.
     */
    @JsonProperty("errors")
    public List<CallBatchError> getErrors() {
        return errors;
    }

    @java.lang.Override
    public boolean equals(Object other) {
        if (this == other) return true;
        return other instanceof CallBatchResponse && equalTo((CallBatchResponse) other);
    }

    @JsonAnyGetter
    public Map<String, Object> getAdditionalProperties() {
        return this.additionalProperties;
    }

    private boolean equalTo(CallBatchResponse other) {
        return results.equals(other.results) && errors.equals(other.errors);
    }

    @java.lang.Override
    public int hashCode() {
        return Objects.hash(this.results, this.errors);
    }

    @java.lang.Override
    public String toString() {
        return ObjectMappers.stringify(this);
    }

    public static Builder builder() {
        return new Builder();
    }

    @JsonIgnoreProperties(ignoreUnknown = true)
    public static final class Builder {
        private List<Call> results = new ArrayList<>();

        private List<CallBatchError> errors = new ArrayList<>();

        @JsonAnySetter
        private Map<String, Object> additionalProperties = new HashMap<>();

        private Builder() {}

        public Builder from(CallBatchResponse other) {
            results(other.getResults());
            errors(other.getErrors());
            return this;
        }

        /**
         * <p>This is the list of calls that were created.</p>
         */
        @JsonSetter(value = "results", nulls = Nulls.SKIP)
        public Builder results(List<Call> results) {
            this.results.clear();
            this.results.addAll(results);
            return this;
        }

        public Builder addResults(Call results) {
            this.results.add(results);
            return this;
        }

        public Builder addAllResults(List<Call> results) {
            this.results.addAll(results);
            return this;
        }

        /**
         * <p>This is the list of calls that failed to be created.</p>
         */
        @JsonSetter(value = "errors", nulls = Nulls.SKIP)
        public Builder errors(List<CallBatchError> errors) {
            this.errors.clear();
            this.errors.addAll(errors);
            return this;
        }

        public Builder addErrors(CallBatchError errors) {
            this.errors.add(errors);
            return this;
        }

        public Builder addAllErrors(List<CallBatchError> errors) {
            this.errors.addAll(errors);
            return this;
        }

        public CallBatchResponse build() {
            return new CallBatchResponse(results, errors, additionalProperties);
        }
    }
}
