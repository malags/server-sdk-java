/**
 * This file was auto-generated by Fern from our API Definition.
 */
package com.vapi.api.resources.sessions.requests;

import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.annotation.Nulls;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.vapi.api.core.ObjectMappers;
import com.vapi.api.resources.sessions.types.UpdateSessionDtoMessagesItem;
import com.vapi.api.resources.sessions.types.UpdateSessionDtoStatus;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;

@JsonInclude(JsonInclude.Include.NON_ABSENT)
@JsonDeserialize(builder = UpdateSessionDto.Builder.class)
public final class UpdateSessionDto {
    private final Optional<String> name;

    private final Optional<UpdateSessionDtoStatus> status;

    private final Optional<Double> expirationSeconds;

    private final Optional<List<UpdateSessionDtoMessagesItem>> messages;

    private final Map<String, Object> additionalProperties;

    private UpdateSessionDto(
            Optional<String> name,
            Optional<UpdateSessionDtoStatus> status,
            Optional<Double> expirationSeconds,
            Optional<List<UpdateSessionDtoMessagesItem>> messages,
            Map<String, Object> additionalProperties) {
        this.name = name;
        this.status = status;
        this.expirationSeconds = expirationSeconds;
        this.messages = messages;
        this.additionalProperties = additionalProperties;
    }

    /**
     * @return This is the new name for the session. Maximum length is 40 characters.
     */
    @JsonProperty("name")
    public Optional<String> getName() {
        return name;
    }

    /**
     * @return This is the new status for the session.
     */
    @JsonProperty("status")
    public Optional<UpdateSessionDtoStatus> getStatus() {
        return status;
    }

    /**
     * @return Session expiration time in seconds. Defaults to 24 hours (86400 seconds) if not set.
     */
    @JsonProperty("expirationSeconds")
    public Optional<Double> getExpirationSeconds() {
        return expirationSeconds;
    }

    /**
     * @return This is the updated array of chat messages.
     */
    @JsonProperty("messages")
    public Optional<List<UpdateSessionDtoMessagesItem>> getMessages() {
        return messages;
    }

    @java.lang.Override
    public boolean equals(Object other) {
        if (this == other) return true;
        return other instanceof UpdateSessionDto && equalTo((UpdateSessionDto) other);
    }

    @JsonAnyGetter
    public Map<String, Object> getAdditionalProperties() {
        return this.additionalProperties;
    }

    private boolean equalTo(UpdateSessionDto other) {
        return name.equals(other.name)
                && status.equals(other.status)
                && expirationSeconds.equals(other.expirationSeconds)
                && messages.equals(other.messages);
    }

    @java.lang.Override
    public int hashCode() {
        return Objects.hash(this.name, this.status, this.expirationSeconds, this.messages);
    }

    @java.lang.Override
    public String toString() {
        return ObjectMappers.stringify(this);
    }

    public static Builder builder() {
        return new Builder();
    }

    @JsonIgnoreProperties(ignoreUnknown = true)
    public static final class Builder {
        private Optional<String> name = Optional.empty();

        private Optional<UpdateSessionDtoStatus> status = Optional.empty();

        private Optional<Double> expirationSeconds = Optional.empty();

        private Optional<List<UpdateSessionDtoMessagesItem>> messages = Optional.empty();

        @JsonAnySetter
        private Map<String, Object> additionalProperties = new HashMap<>();

        private Builder() {}

        public Builder from(UpdateSessionDto other) {
            name(other.getName());
            status(other.getStatus());
            expirationSeconds(other.getExpirationSeconds());
            messages(other.getMessages());
            return this;
        }

        /**
         * <p>This is the new name for the session. Maximum length is 40 characters.</p>
         */
        @JsonSetter(value = "name", nulls = Nulls.SKIP)
        public Builder name(Optional<String> name) {
            this.name = name;
            return this;
        }

        public Builder name(String name) {
            this.name = Optional.ofNullable(name);
            return this;
        }

        /**
         * <p>This is the new status for the session.</p>
         */
        @JsonSetter(value = "status", nulls = Nulls.SKIP)
        public Builder status(Optional<UpdateSessionDtoStatus> status) {
            this.status = status;
            return this;
        }

        public Builder status(UpdateSessionDtoStatus status) {
            this.status = Optional.ofNullable(status);
            return this;
        }

        /**
         * <p>Session expiration time in seconds. Defaults to 24 hours (86400 seconds) if not set.</p>
         */
        @JsonSetter(value = "expirationSeconds", nulls = Nulls.SKIP)
        public Builder expirationSeconds(Optional<Double> expirationSeconds) {
            this.expirationSeconds = expirationSeconds;
            return this;
        }

        public Builder expirationSeconds(Double expirationSeconds) {
            this.expirationSeconds = Optional.ofNullable(expirationSeconds);
            return this;
        }

        /**
         * <p>This is the updated array of chat messages.</p>
         */
        @JsonSetter(value = "messages", nulls = Nulls.SKIP)
        public Builder messages(Optional<List<UpdateSessionDtoMessagesItem>> messages) {
            this.messages = messages;
            return this;
        }

        public Builder messages(List<UpdateSessionDtoMessagesItem> messages) {
            this.messages = Optional.ofNullable(messages);
            return this;
        }

        public UpdateSessionDto build() {
            return new UpdateSessionDto(name, status, expirationSeconds, messages, additionalProperties);
        }
    }
}
