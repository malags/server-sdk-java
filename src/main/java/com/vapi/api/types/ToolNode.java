/**
 * This file was auto-generated by Fern from our API Definition.
 */
package com.vapi.api.types;

import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.annotation.Nulls;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.vapi.api.core.ObjectMappers;
import java.util.HashMap;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import org.jetbrains.annotations.NotNull;

@JsonInclude(JsonInclude.Include.NON_ABSENT)
@JsonDeserialize(builder = ToolNode.Builder.class)
public final class ToolNode {
    private final Optional<ToolNodeTool> tool;

    private final Optional<String> toolId;

    private final String name;

    private final Optional<Boolean> isStart;

    private final Optional<Map<String, Object>> metadata;

    private final Map<String, Object> additionalProperties;

    private ToolNode(
            Optional<ToolNodeTool> tool,
            Optional<String> toolId,
            String name,
            Optional<Boolean> isStart,
            Optional<Map<String, Object>> metadata,
            Map<String, Object> additionalProperties) {
        this.tool = tool;
        this.toolId = toolId;
        this.name = name;
        this.isStart = isStart;
        this.metadata = metadata;
        this.additionalProperties = additionalProperties;
    }

    /**
     * @return This is the tool to call. To use an existing tool, send <code>toolId</code> instead.
     */
    @JsonProperty("tool")
    public Optional<ToolNodeTool> getTool() {
        return tool;
    }

    /**
     * @return This is the tool to call. To use a transient tool, send <code>tool</code> instead.
     */
    @JsonProperty("toolId")
    public Optional<String> getToolId() {
        return toolId;
    }

    @JsonProperty("name")
    public String getName() {
        return name;
    }

    /**
     * @return This is whether or not the node is the start of the workflow.
     */
    @JsonProperty("isStart")
    public Optional<Boolean> getIsStart() {
        return isStart;
    }

    /**
     * @return This is for metadata you want to store on the task.
     */
    @JsonProperty("metadata")
    public Optional<Map<String, Object>> getMetadata() {
        return metadata;
    }

    @java.lang.Override
    public boolean equals(Object other) {
        if (this == other) return true;
        return other instanceof ToolNode && equalTo((ToolNode) other);
    }

    @JsonAnyGetter
    public Map<String, Object> getAdditionalProperties() {
        return this.additionalProperties;
    }

    private boolean equalTo(ToolNode other) {
        return tool.equals(other.tool)
                && toolId.equals(other.toolId)
                && name.equals(other.name)
                && isStart.equals(other.isStart)
                && metadata.equals(other.metadata);
    }

    @java.lang.Override
    public int hashCode() {
        return Objects.hash(this.tool, this.toolId, this.name, this.isStart, this.metadata);
    }

    @java.lang.Override
    public String toString() {
        return ObjectMappers.stringify(this);
    }

    public static NameStage builder() {
        return new Builder();
    }

    public interface NameStage {
        _FinalStage name(@NotNull String name);

        Builder from(ToolNode other);
    }

    public interface _FinalStage {
        ToolNode build();

        /**
         * <p>This is the tool to call. To use an existing tool, send <code>toolId</code> instead.</p>
         */
        _FinalStage tool(Optional<ToolNodeTool> tool);

        _FinalStage tool(ToolNodeTool tool);

        /**
         * <p>This is the tool to call. To use a transient tool, send <code>tool</code> instead.</p>
         */
        _FinalStage toolId(Optional<String> toolId);

        _FinalStage toolId(String toolId);

        /**
         * <p>This is whether or not the node is the start of the workflow.</p>
         */
        _FinalStage isStart(Optional<Boolean> isStart);

        _FinalStage isStart(Boolean isStart);

        /**
         * <p>This is for metadata you want to store on the task.</p>
         */
        _FinalStage metadata(Optional<Map<String, Object>> metadata);

        _FinalStage metadata(Map<String, Object> metadata);
    }

    @JsonIgnoreProperties(ignoreUnknown = true)
    public static final class Builder implements NameStage, _FinalStage {
        private String name;

        private Optional<Map<String, Object>> metadata = Optional.empty();

        private Optional<Boolean> isStart = Optional.empty();

        private Optional<String> toolId = Optional.empty();

        private Optional<ToolNodeTool> tool = Optional.empty();

        @JsonAnySetter
        private Map<String, Object> additionalProperties = new HashMap<>();

        private Builder() {}

        @java.lang.Override
        public Builder from(ToolNode other) {
            tool(other.getTool());
            toolId(other.getToolId());
            name(other.getName());
            isStart(other.getIsStart());
            metadata(other.getMetadata());
            return this;
        }

        @java.lang.Override
        @JsonSetter("name")
        public _FinalStage name(@NotNull String name) {
            this.name = Objects.requireNonNull(name, "name must not be null");
            return this;
        }

        /**
         * <p>This is for metadata you want to store on the task.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        public _FinalStage metadata(Map<String, Object> metadata) {
            this.metadata = Optional.ofNullable(metadata);
            return this;
        }

        /**
         * <p>This is for metadata you want to store on the task.</p>
         */
        @java.lang.Override
        @JsonSetter(value = "metadata", nulls = Nulls.SKIP)
        public _FinalStage metadata(Optional<Map<String, Object>> metadata) {
            this.metadata = metadata;
            return this;
        }

        /**
         * <p>This is whether or not the node is the start of the workflow.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        public _FinalStage isStart(Boolean isStart) {
            this.isStart = Optional.ofNullable(isStart);
            return this;
        }

        /**
         * <p>This is whether or not the node is the start of the workflow.</p>
         */
        @java.lang.Override
        @JsonSetter(value = "isStart", nulls = Nulls.SKIP)
        public _FinalStage isStart(Optional<Boolean> isStart) {
            this.isStart = isStart;
            return this;
        }

        /**
         * <p>This is the tool to call. To use a transient tool, send <code>tool</code> instead.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        public _FinalStage toolId(String toolId) {
            this.toolId = Optional.ofNullable(toolId);
            return this;
        }

        /**
         * <p>This is the tool to call. To use a transient tool, send <code>tool</code> instead.</p>
         */
        @java.lang.Override
        @JsonSetter(value = "toolId", nulls = Nulls.SKIP)
        public _FinalStage toolId(Optional<String> toolId) {
            this.toolId = toolId;
            return this;
        }

        /**
         * <p>This is the tool to call. To use an existing tool, send <code>toolId</code> instead.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        public _FinalStage tool(ToolNodeTool tool) {
            this.tool = Optional.ofNullable(tool);
            return this;
        }

        /**
         * <p>This is the tool to call. To use an existing tool, send <code>toolId</code> instead.</p>
         */
        @java.lang.Override
        @JsonSetter(value = "tool", nulls = Nulls.SKIP)
        public _FinalStage tool(Optional<ToolNodeTool> tool) {
            this.tool = tool;
            return this;
        }

        @java.lang.Override
        public ToolNode build() {
            return new ToolNode(tool, toolId, name, isStart, metadata, additionalProperties);
        }
    }
}
