/**
 * This file was auto-generated by Fern from our API Definition.
 */
package com.vapi.api.types;

import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.annotation.Nulls;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.vapi.api.core.ObjectMappers;
import java.util.HashMap;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;

@JsonInclude(JsonInclude.Include.NON_ABSENT)
@JsonDeserialize(builder = BackgroundSpeechDenoisingPlan.Builder.class)
public final class BackgroundSpeechDenoisingPlan {
    private final Optional<SmartDenoisingPlan> smartDenoisingPlan;

    private final Optional<FourierDenoisingPlan> fourierDenoisingPlan;

    private final Map<String, Object> additionalProperties;

    private BackgroundSpeechDenoisingPlan(
            Optional<SmartDenoisingPlan> smartDenoisingPlan,
            Optional<FourierDenoisingPlan> fourierDenoisingPlan,
            Map<String, Object> additionalProperties) {
        this.smartDenoisingPlan = smartDenoisingPlan;
        this.fourierDenoisingPlan = fourierDenoisingPlan;
        this.additionalProperties = additionalProperties;
    }

    /**
     * @return Whether smart denoising using Krisp is enabled.
     */
    @JsonProperty("smartDenoisingPlan")
    public Optional<SmartDenoisingPlan> getSmartDenoisingPlan() {
        return smartDenoisingPlan;
    }

    /**
     * @return Whether Fourier denoising is enabled. Note that this is experimental and may not work as expected.
     * <p>This can be combined with smart denoising, and will be run afterwards.</p>
     */
    @JsonProperty("fourierDenoisingPlan")
    public Optional<FourierDenoisingPlan> getFourierDenoisingPlan() {
        return fourierDenoisingPlan;
    }

    @java.lang.Override
    public boolean equals(Object other) {
        if (this == other) return true;
        return other instanceof BackgroundSpeechDenoisingPlan && equalTo((BackgroundSpeechDenoisingPlan) other);
    }

    @JsonAnyGetter
    public Map<String, Object> getAdditionalProperties() {
        return this.additionalProperties;
    }

    private boolean equalTo(BackgroundSpeechDenoisingPlan other) {
        return smartDenoisingPlan.equals(other.smartDenoisingPlan)
                && fourierDenoisingPlan.equals(other.fourierDenoisingPlan);
    }

    @java.lang.Override
    public int hashCode() {
        return Objects.hash(this.smartDenoisingPlan, this.fourierDenoisingPlan);
    }

    @java.lang.Override
    public String toString() {
        return ObjectMappers.stringify(this);
    }

    public static Builder builder() {
        return new Builder();
    }

    @JsonIgnoreProperties(ignoreUnknown = true)
    public static final class Builder {
        private Optional<SmartDenoisingPlan> smartDenoisingPlan = Optional.empty();

        private Optional<FourierDenoisingPlan> fourierDenoisingPlan = Optional.empty();

        @JsonAnySetter
        private Map<String, Object> additionalProperties = new HashMap<>();

        private Builder() {}

        public Builder from(BackgroundSpeechDenoisingPlan other) {
            smartDenoisingPlan(other.getSmartDenoisingPlan());
            fourierDenoisingPlan(other.getFourierDenoisingPlan());
            return this;
        }

        /**
         * <p>Whether smart denoising using Krisp is enabled.</p>
         */
        @JsonSetter(value = "smartDenoisingPlan", nulls = Nulls.SKIP)
        public Builder smartDenoisingPlan(Optional<SmartDenoisingPlan> smartDenoisingPlan) {
            this.smartDenoisingPlan = smartDenoisingPlan;
            return this;
        }

        public Builder smartDenoisingPlan(SmartDenoisingPlan smartDenoisingPlan) {
            this.smartDenoisingPlan = Optional.ofNullable(smartDenoisingPlan);
            return this;
        }

        /**
         * <p>Whether Fourier denoising is enabled. Note that this is experimental and may not work as expected.</p>
         * <p>This can be combined with smart denoising, and will be run afterwards.</p>
         */
        @JsonSetter(value = "fourierDenoisingPlan", nulls = Nulls.SKIP)
        public Builder fourierDenoisingPlan(Optional<FourierDenoisingPlan> fourierDenoisingPlan) {
            this.fourierDenoisingPlan = fourierDenoisingPlan;
            return this;
        }

        public Builder fourierDenoisingPlan(FourierDenoisingPlan fourierDenoisingPlan) {
            this.fourierDenoisingPlan = Optional.ofNullable(fourierDenoisingPlan);
            return this;
        }

        public BackgroundSpeechDenoisingPlan build() {
            return new BackgroundSpeechDenoisingPlan(smartDenoisingPlan, fourierDenoisingPlan, additionalProperties);
        }
    }
}
