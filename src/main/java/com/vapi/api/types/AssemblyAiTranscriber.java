/**
 * This file was auto-generated by Fern from our API Definition.
 */
package com.vapi.api.types;

import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.annotation.Nulls;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.vapi.api.core.ObjectMappers;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;

@JsonInclude(JsonInclude.Include.NON_ABSENT)
@JsonDeserialize(builder = AssemblyAiTranscriber.Builder.class)
public final class AssemblyAiTranscriber {
    private final Optional<String> language;

    private final Optional<Double> confidenceThreshold;

    private final Optional<Boolean> enableUniversalStreamingApi;

    private final Optional<Boolean> formatTurns;

    private final Optional<Double> endOfTurnConfidenceThreshold;

    private final Optional<Double> minEndOfTurnSilenceWhenConfident;

    private final Optional<Double> wordFinalizationMaxWaitTime;

    private final Optional<Double> maxTurnSilence;

    private final Optional<String> realtimeUrl;

    private final Optional<List<String>> wordBoost;

    private final Optional<Double> endUtteranceSilenceThreshold;

    private final Optional<Boolean> disablePartialTranscripts;

    private final Optional<FallbackTranscriberPlan> fallbackPlan;

    private final Map<String, Object> additionalProperties;

    private AssemblyAiTranscriber(
            Optional<String> language,
            Optional<Double> confidenceThreshold,
            Optional<Boolean> enableUniversalStreamingApi,
            Optional<Boolean> formatTurns,
            Optional<Double> endOfTurnConfidenceThreshold,
            Optional<Double> minEndOfTurnSilenceWhenConfident,
            Optional<Double> wordFinalizationMaxWaitTime,
            Optional<Double> maxTurnSilence,
            Optional<String> realtimeUrl,
            Optional<List<String>> wordBoost,
            Optional<Double> endUtteranceSilenceThreshold,
            Optional<Boolean> disablePartialTranscripts,
            Optional<FallbackTranscriberPlan> fallbackPlan,
            Map<String, Object> additionalProperties) {
        this.language = language;
        this.confidenceThreshold = confidenceThreshold;
        this.enableUniversalStreamingApi = enableUniversalStreamingApi;
        this.formatTurns = formatTurns;
        this.endOfTurnConfidenceThreshold = endOfTurnConfidenceThreshold;
        this.minEndOfTurnSilenceWhenConfident = minEndOfTurnSilenceWhenConfident;
        this.wordFinalizationMaxWaitTime = wordFinalizationMaxWaitTime;
        this.maxTurnSilence = maxTurnSilence;
        this.realtimeUrl = realtimeUrl;
        this.wordBoost = wordBoost;
        this.endUtteranceSilenceThreshold = endUtteranceSilenceThreshold;
        this.disablePartialTranscripts = disablePartialTranscripts;
        this.fallbackPlan = fallbackPlan;
        this.additionalProperties = additionalProperties;
    }

    /**
     * @return This is the language that will be set for the transcription.
     */
    @JsonProperty("language")
    public Optional<String> getLanguage() {
        return language;
    }

    /**
     * @return Transcripts below this confidence threshold will be discarded.
     * <p>@default 0.4</p>
     */
    @JsonProperty("confidenceThreshold")
    public Optional<Double> getConfidenceThreshold() {
        return confidenceThreshold;
    }

    /**
     * @return Uses Assembly AI's new Universal Streaming API. See: https://www.assemblyai.com/docs/speech-to-text/universal-streaming
     * <p>@default false</p>
     */
    @JsonProperty("enableUniversalStreamingApi")
    public Optional<Boolean> getEnableUniversalStreamingApi() {
        return enableUniversalStreamingApi;
    }

    /**
     * @return This enables formatting of transcripts. Only used when <code>enableUniversalStreamingApi</code> is true.
     * <p>@default false</p>
     */
    @JsonProperty("formatTurns")
    public Optional<Boolean> getFormatTurns() {
        return formatTurns;
    }

    /**
     * @return The confidence threshold to use when determining if the end of a turn has been reached. Only used when <code>enableUniversalStreamingApi</code> is true.
     * <p>@default 0.7</p>
     */
    @JsonProperty("endOfTurnConfidenceThreshold")
    public Optional<Double> getEndOfTurnConfidenceThreshold() {
        return endOfTurnConfidenceThreshold;
    }

    /**
     * @return The minimum amount of silence in milliseconds required to detect end of turn when confident. Only used when <code>enableUniversalStreamingApi</code> is true.
     * <p>@default 160</p>
     */
    @JsonProperty("minEndOfTurnSilenceWhenConfident")
    public Optional<Double> getMinEndOfTurnSilenceWhenConfident() {
        return minEndOfTurnSilenceWhenConfident;
    }

    /**
     * @return The maximum wait time for word finalization. Only used when <code>enableUniversalStreamingApi</code> is true.
     * <p>@default 160</p>
     */
    @JsonProperty("wordFinalizationMaxWaitTime")
    public Optional<Double> getWordFinalizationMaxWaitTime() {
        return wordFinalizationMaxWaitTime;
    }

    /**
     * @return The maximum amount of silence in milliseconds allowed in a turn before end of turn is triggered. Only used when <code>enableUniversalStreamingApi</code> is true.
     * <p>@default 400</p>
     */
    @JsonProperty("maxTurnSilence")
    public Optional<Double> getMaxTurnSilence() {
        return maxTurnSilence;
    }

    /**
     * @return The WebSocket URL that the transcriber connects to.
     */
    @JsonProperty("realtimeUrl")
    public Optional<String> getRealtimeUrl() {
        return realtimeUrl;
    }

    /**
     * @return Add up to 2500 characters of custom vocabulary.
     */
    @JsonProperty("wordBoost")
    public Optional<List<String>> getWordBoost() {
        return wordBoost;
    }

    /**
     * @return The duration of the end utterance silence threshold in milliseconds.
     */
    @JsonProperty("endUtteranceSilenceThreshold")
    public Optional<Double> getEndUtteranceSilenceThreshold() {
        return endUtteranceSilenceThreshold;
    }

    /**
     * @return Disable partial transcripts.
     * Set to <code>true</code> to not receive partial transcripts. Defaults to <code>false</code>.
     */
    @JsonProperty("disablePartialTranscripts")
    public Optional<Boolean> getDisablePartialTranscripts() {
        return disablePartialTranscripts;
    }

    /**
     * @return This is the plan for voice provider fallbacks in the event that the primary voice provider fails.
     */
    @JsonProperty("fallbackPlan")
    public Optional<FallbackTranscriberPlan> getFallbackPlan() {
        return fallbackPlan;
    }

    @java.lang.Override
    public boolean equals(Object other) {
        if (this == other) return true;
        return other instanceof AssemblyAiTranscriber && equalTo((AssemblyAiTranscriber) other);
    }

    @JsonAnyGetter
    public Map<String, Object> getAdditionalProperties() {
        return this.additionalProperties;
    }

    private boolean equalTo(AssemblyAiTranscriber other) {
        return language.equals(other.language)
                && confidenceThreshold.equals(other.confidenceThreshold)
                && enableUniversalStreamingApi.equals(other.enableUniversalStreamingApi)
                && formatTurns.equals(other.formatTurns)
                && endOfTurnConfidenceThreshold.equals(other.endOfTurnConfidenceThreshold)
                && minEndOfTurnSilenceWhenConfident.equals(other.minEndOfTurnSilenceWhenConfident)
                && wordFinalizationMaxWaitTime.equals(other.wordFinalizationMaxWaitTime)
                && maxTurnSilence.equals(other.maxTurnSilence)
                && realtimeUrl.equals(other.realtimeUrl)
                && wordBoost.equals(other.wordBoost)
                && endUtteranceSilenceThreshold.equals(other.endUtteranceSilenceThreshold)
                && disablePartialTranscripts.equals(other.disablePartialTranscripts)
                && fallbackPlan.equals(other.fallbackPlan);
    }

    @java.lang.Override
    public int hashCode() {
        return Objects.hash(
                this.language,
                this.confidenceThreshold,
                this.enableUniversalStreamingApi,
                this.formatTurns,
                this.endOfTurnConfidenceThreshold,
                this.minEndOfTurnSilenceWhenConfident,
                this.wordFinalizationMaxWaitTime,
                this.maxTurnSilence,
                this.realtimeUrl,
                this.wordBoost,
                this.endUtteranceSilenceThreshold,
                this.disablePartialTranscripts,
                this.fallbackPlan);
    }

    @java.lang.Override
    public String toString() {
        return ObjectMappers.stringify(this);
    }

    public static Builder builder() {
        return new Builder();
    }

    @JsonIgnoreProperties(ignoreUnknown = true)
    public static final class Builder {
        private Optional<String> language = Optional.empty();

        private Optional<Double> confidenceThreshold = Optional.empty();

        private Optional<Boolean> enableUniversalStreamingApi = Optional.empty();

        private Optional<Boolean> formatTurns = Optional.empty();

        private Optional<Double> endOfTurnConfidenceThreshold = Optional.empty();

        private Optional<Double> minEndOfTurnSilenceWhenConfident = Optional.empty();

        private Optional<Double> wordFinalizationMaxWaitTime = Optional.empty();

        private Optional<Double> maxTurnSilence = Optional.empty();

        private Optional<String> realtimeUrl = Optional.empty();

        private Optional<List<String>> wordBoost = Optional.empty();

        private Optional<Double> endUtteranceSilenceThreshold = Optional.empty();

        private Optional<Boolean> disablePartialTranscripts = Optional.empty();

        private Optional<FallbackTranscriberPlan> fallbackPlan = Optional.empty();

        @JsonAnySetter
        private Map<String, Object> additionalProperties = new HashMap<>();

        private Builder() {}

        public Builder from(AssemblyAiTranscriber other) {
            language(other.getLanguage());
            confidenceThreshold(other.getConfidenceThreshold());
            enableUniversalStreamingApi(other.getEnableUniversalStreamingApi());
            formatTurns(other.getFormatTurns());
            endOfTurnConfidenceThreshold(other.getEndOfTurnConfidenceThreshold());
            minEndOfTurnSilenceWhenConfident(other.getMinEndOfTurnSilenceWhenConfident());
            wordFinalizationMaxWaitTime(other.getWordFinalizationMaxWaitTime());
            maxTurnSilence(other.getMaxTurnSilence());
            realtimeUrl(other.getRealtimeUrl());
            wordBoost(other.getWordBoost());
            endUtteranceSilenceThreshold(other.getEndUtteranceSilenceThreshold());
            disablePartialTranscripts(other.getDisablePartialTranscripts());
            fallbackPlan(other.getFallbackPlan());
            return this;
        }

        /**
         * <p>This is the language that will be set for the transcription.</p>
         */
        @JsonSetter(value = "language", nulls = Nulls.SKIP)
        public Builder language(Optional<String> language) {
            this.language = language;
            return this;
        }

        public Builder language(String language) {
            this.language = Optional.ofNullable(language);
            return this;
        }

        /**
         * <p>Transcripts below this confidence threshold will be discarded.</p>
         * <p>@default 0.4</p>
         */
        @JsonSetter(value = "confidenceThreshold", nulls = Nulls.SKIP)
        public Builder confidenceThreshold(Optional<Double> confidenceThreshold) {
            this.confidenceThreshold = confidenceThreshold;
            return this;
        }

        public Builder confidenceThreshold(Double confidenceThreshold) {
            this.confidenceThreshold = Optional.ofNullable(confidenceThreshold);
            return this;
        }

        /**
         * <p>Uses Assembly AI's new Universal Streaming API. See: https://www.assemblyai.com/docs/speech-to-text/universal-streaming</p>
         * <p>@default false</p>
         */
        @JsonSetter(value = "enableUniversalStreamingApi", nulls = Nulls.SKIP)
        public Builder enableUniversalStreamingApi(Optional<Boolean> enableUniversalStreamingApi) {
            this.enableUniversalStreamingApi = enableUniversalStreamingApi;
            return this;
        }

        public Builder enableUniversalStreamingApi(Boolean enableUniversalStreamingApi) {
            this.enableUniversalStreamingApi = Optional.ofNullable(enableUniversalStreamingApi);
            return this;
        }

        /**
         * <p>This enables formatting of transcripts. Only used when <code>enableUniversalStreamingApi</code> is true.</p>
         * <p>@default false</p>
         */
        @JsonSetter(value = "formatTurns", nulls = Nulls.SKIP)
        public Builder formatTurns(Optional<Boolean> formatTurns) {
            this.formatTurns = formatTurns;
            return this;
        }

        public Builder formatTurns(Boolean formatTurns) {
            this.formatTurns = Optional.ofNullable(formatTurns);
            return this;
        }

        /**
         * <p>The confidence threshold to use when determining if the end of a turn has been reached. Only used when <code>enableUniversalStreamingApi</code> is true.</p>
         * <p>@default 0.7</p>
         */
        @JsonSetter(value = "endOfTurnConfidenceThreshold", nulls = Nulls.SKIP)
        public Builder endOfTurnConfidenceThreshold(Optional<Double> endOfTurnConfidenceThreshold) {
            this.endOfTurnConfidenceThreshold = endOfTurnConfidenceThreshold;
            return this;
        }

        public Builder endOfTurnConfidenceThreshold(Double endOfTurnConfidenceThreshold) {
            this.endOfTurnConfidenceThreshold = Optional.ofNullable(endOfTurnConfidenceThreshold);
            return this;
        }

        /**
         * <p>The minimum amount of silence in milliseconds required to detect end of turn when confident. Only used when <code>enableUniversalStreamingApi</code> is true.</p>
         * <p>@default 160</p>
         */
        @JsonSetter(value = "minEndOfTurnSilenceWhenConfident", nulls = Nulls.SKIP)
        public Builder minEndOfTurnSilenceWhenConfident(Optional<Double> minEndOfTurnSilenceWhenConfident) {
            this.minEndOfTurnSilenceWhenConfident = minEndOfTurnSilenceWhenConfident;
            return this;
        }

        public Builder minEndOfTurnSilenceWhenConfident(Double minEndOfTurnSilenceWhenConfident) {
            this.minEndOfTurnSilenceWhenConfident = Optional.ofNullable(minEndOfTurnSilenceWhenConfident);
            return this;
        }

        /**
         * <p>The maximum wait time for word finalization. Only used when <code>enableUniversalStreamingApi</code> is true.</p>
         * <p>@default 160</p>
         */
        @JsonSetter(value = "wordFinalizationMaxWaitTime", nulls = Nulls.SKIP)
        public Builder wordFinalizationMaxWaitTime(Optional<Double> wordFinalizationMaxWaitTime) {
            this.wordFinalizationMaxWaitTime = wordFinalizationMaxWaitTime;
            return this;
        }

        public Builder wordFinalizationMaxWaitTime(Double wordFinalizationMaxWaitTime) {
            this.wordFinalizationMaxWaitTime = Optional.ofNullable(wordFinalizationMaxWaitTime);
            return this;
        }

        /**
         * <p>The maximum amount of silence in milliseconds allowed in a turn before end of turn is triggered. Only used when <code>enableUniversalStreamingApi</code> is true.</p>
         * <p>@default 400</p>
         */
        @JsonSetter(value = "maxTurnSilence", nulls = Nulls.SKIP)
        public Builder maxTurnSilence(Optional<Double> maxTurnSilence) {
            this.maxTurnSilence = maxTurnSilence;
            return this;
        }

        public Builder maxTurnSilence(Double maxTurnSilence) {
            this.maxTurnSilence = Optional.ofNullable(maxTurnSilence);
            return this;
        }

        /**
         * <p>The WebSocket URL that the transcriber connects to.</p>
         */
        @JsonSetter(value = "realtimeUrl", nulls = Nulls.SKIP)
        public Builder realtimeUrl(Optional<String> realtimeUrl) {
            this.realtimeUrl = realtimeUrl;
            return this;
        }

        public Builder realtimeUrl(String realtimeUrl) {
            this.realtimeUrl = Optional.ofNullable(realtimeUrl);
            return this;
        }

        /**
         * <p>Add up to 2500 characters of custom vocabulary.</p>
         */
        @JsonSetter(value = "wordBoost", nulls = Nulls.SKIP)
        public Builder wordBoost(Optional<List<String>> wordBoost) {
            this.wordBoost = wordBoost;
            return this;
        }

        public Builder wordBoost(List<String> wordBoost) {
            this.wordBoost = Optional.ofNullable(wordBoost);
            return this;
        }

        /**
         * <p>The duration of the end utterance silence threshold in milliseconds.</p>
         */
        @JsonSetter(value = "endUtteranceSilenceThreshold", nulls = Nulls.SKIP)
        public Builder endUtteranceSilenceThreshold(Optional<Double> endUtteranceSilenceThreshold) {
            this.endUtteranceSilenceThreshold = endUtteranceSilenceThreshold;
            return this;
        }

        public Builder endUtteranceSilenceThreshold(Double endUtteranceSilenceThreshold) {
            this.endUtteranceSilenceThreshold = Optional.ofNullable(endUtteranceSilenceThreshold);
            return this;
        }

        /**
         * <p>Disable partial transcripts.
         * Set to <code>true</code> to not receive partial transcripts. Defaults to <code>false</code>.</p>
         */
        @JsonSetter(value = "disablePartialTranscripts", nulls = Nulls.SKIP)
        public Builder disablePartialTranscripts(Optional<Boolean> disablePartialTranscripts) {
            this.disablePartialTranscripts = disablePartialTranscripts;
            return this;
        }

        public Builder disablePartialTranscripts(Boolean disablePartialTranscripts) {
            this.disablePartialTranscripts = Optional.ofNullable(disablePartialTranscripts);
            return this;
        }

        /**
         * <p>This is the plan for voice provider fallbacks in the event that the primary voice provider fails.</p>
         */
        @JsonSetter(value = "fallbackPlan", nulls = Nulls.SKIP)
        public Builder fallbackPlan(Optional<FallbackTranscriberPlan> fallbackPlan) {
            this.fallbackPlan = fallbackPlan;
            return this;
        }

        public Builder fallbackPlan(FallbackTranscriberPlan fallbackPlan) {
            this.fallbackPlan = Optional.ofNullable(fallbackPlan);
            return this;
        }

        public AssemblyAiTranscriber build() {
            return new AssemblyAiTranscriber(
                    language,
                    confidenceThreshold,
                    enableUniversalStreamingApi,
                    formatTurns,
                    endOfTurnConfidenceThreshold,
                    minEndOfTurnSilenceWhenConfident,
                    wordFinalizationMaxWaitTime,
                    maxTurnSilence,
                    realtimeUrl,
                    wordBoost,
                    endUtteranceSilenceThreshold,
                    disablePartialTranscripts,
                    fallbackPlan,
                    additionalProperties);
        }
    }
}
