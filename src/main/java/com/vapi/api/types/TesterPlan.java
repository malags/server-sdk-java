/**
 * This file was auto-generated by Fern from our API Definition.
 */
package com.vapi.api.types;

import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.annotation.Nulls;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.vapi.api.core.ObjectMappers;
import java.util.HashMap;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;

@JsonInclude(JsonInclude.Include.NON_ABSENT)
@JsonDeserialize(builder = TesterPlan.Builder.class)
public final class TesterPlan {
    private final Optional<CreateAssistantDto> assistant;

    private final Optional<String> assistantId;

    private final Optional<AssistantOverrides> assistantOverrides;

    private final Map<String, Object> additionalProperties;

    private TesterPlan(
            Optional<CreateAssistantDto> assistant,
            Optional<String> assistantId,
            Optional<AssistantOverrides> assistantOverrides,
            Map<String, Object> additionalProperties) {
        this.assistant = assistant;
        this.assistantId = assistantId;
        this.assistantOverrides = assistantOverrides;
        this.additionalProperties = additionalProperties;
    }

    /**
     * @return Pass a transient assistant to use for the test assistant.
     * <p>Make sure to write a detailed system prompt for a test assistant, and use the {{test.script}} variable to access the test script.</p>
     */
    @JsonProperty("assistant")
    public Optional<CreateAssistantDto> getAssistant() {
        return assistant;
    }

    /**
     * @return Pass an assistant id that can be access
     * <p>Make sure to write a detailed system prompt for the test assistant, and use the {{test.script}} variable to access the test script.</p>
     */
    @JsonProperty("assistantId")
    public Optional<String> getAssistantId() {
        return assistantId;
    }

    /**
     * @return Add any assistant overrides to the test assistant.
     * <p>One use case is if you want to pass custom variables into the test using variableValues, that you can then access in the script
     * and rubric using {{varName}}.</p>
     */
    @JsonProperty("assistantOverrides")
    public Optional<AssistantOverrides> getAssistantOverrides() {
        return assistantOverrides;
    }

    @java.lang.Override
    public boolean equals(Object other) {
        if (this == other) return true;
        return other instanceof TesterPlan && equalTo((TesterPlan) other);
    }

    @JsonAnyGetter
    public Map<String, Object> getAdditionalProperties() {
        return this.additionalProperties;
    }

    private boolean equalTo(TesterPlan other) {
        return assistant.equals(other.assistant)
                && assistantId.equals(other.assistantId)
                && assistantOverrides.equals(other.assistantOverrides);
    }

    @java.lang.Override
    public int hashCode() {
        return Objects.hash(this.assistant, this.assistantId, this.assistantOverrides);
    }

    @java.lang.Override
    public String toString() {
        return ObjectMappers.stringify(this);
    }

    public static Builder builder() {
        return new Builder();
    }

    @JsonIgnoreProperties(ignoreUnknown = true)
    public static final class Builder {
        private Optional<CreateAssistantDto> assistant = Optional.empty();

        private Optional<String> assistantId = Optional.empty();

        private Optional<AssistantOverrides> assistantOverrides = Optional.empty();

        @JsonAnySetter
        private Map<String, Object> additionalProperties = new HashMap<>();

        private Builder() {}

        public Builder from(TesterPlan other) {
            assistant(other.getAssistant());
            assistantId(other.getAssistantId());
            assistantOverrides(other.getAssistantOverrides());
            return this;
        }

        /**
         * <p>Pass a transient assistant to use for the test assistant.</p>
         * <p>Make sure to write a detailed system prompt for a test assistant, and use the {{test.script}} variable to access the test script.</p>
         */
        @JsonSetter(value = "assistant", nulls = Nulls.SKIP)
        public Builder assistant(Optional<CreateAssistantDto> assistant) {
            this.assistant = assistant;
            return this;
        }

        public Builder assistant(CreateAssistantDto assistant) {
            this.assistant = Optional.ofNullable(assistant);
            return this;
        }

        /**
         * <p>Pass an assistant id that can be access</p>
         * <p>Make sure to write a detailed system prompt for the test assistant, and use the {{test.script}} variable to access the test script.</p>
         */
        @JsonSetter(value = "assistantId", nulls = Nulls.SKIP)
        public Builder assistantId(Optional<String> assistantId) {
            this.assistantId = assistantId;
            return this;
        }

        public Builder assistantId(String assistantId) {
            this.assistantId = Optional.ofNullable(assistantId);
            return this;
        }

        /**
         * <p>Add any assistant overrides to the test assistant.</p>
         * <p>One use case is if you want to pass custom variables into the test using variableValues, that you can then access in the script
         * and rubric using {{varName}}.</p>
         */
        @JsonSetter(value = "assistantOverrides", nulls = Nulls.SKIP)
        public Builder assistantOverrides(Optional<AssistantOverrides> assistantOverrides) {
            this.assistantOverrides = assistantOverrides;
            return this;
        }

        public Builder assistantOverrides(AssistantOverrides assistantOverrides) {
            this.assistantOverrides = Optional.ofNullable(assistantOverrides);
            return this;
        }

        public TesterPlan build() {
            return new TesterPlan(assistant, assistantId, assistantOverrides, additionalProperties);
        }
    }
}
