/**
 * This file was auto-generated by Fern from our API Definition.
 */
package com.vapi.api.types;

import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.annotation.Nulls;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.vapi.api.core.ObjectMappers;
import java.time.OffsetDateTime;
import java.util.HashMap;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import org.jetbrains.annotations.NotNull;

@JsonInclude(JsonInclude.Include.NON_ABSENT)
@JsonDeserialize(builder = CloudflareCredential.Builder.class)
public final class CloudflareCredential {
    private final Optional<String> accountId;

    private final Optional<String> apiKey;

    private final Optional<String> accountEmail;

    private final Optional<Double> fallbackIndex;

    private final String id;

    private final String orgId;

    private final OffsetDateTime createdAt;

    private final OffsetDateTime updatedAt;

    private final Optional<String> name;

    private final Optional<CloudflareR2BucketPlan> bucketPlan;

    private final Map<String, Object> additionalProperties;

    private CloudflareCredential(
            Optional<String> accountId,
            Optional<String> apiKey,
            Optional<String> accountEmail,
            Optional<Double> fallbackIndex,
            String id,
            String orgId,
            OffsetDateTime createdAt,
            OffsetDateTime updatedAt,
            Optional<String> name,
            Optional<CloudflareR2BucketPlan> bucketPlan,
            Map<String, Object> additionalProperties) {
        this.accountId = accountId;
        this.apiKey = apiKey;
        this.accountEmail = accountEmail;
        this.fallbackIndex = fallbackIndex;
        this.id = id;
        this.orgId = orgId;
        this.createdAt = createdAt;
        this.updatedAt = updatedAt;
        this.name = name;
        this.bucketPlan = bucketPlan;
        this.additionalProperties = additionalProperties;
    }

    /**
     * @return Credential provider. Only allowed value is cloudflare
     */
    @JsonProperty("provider")
    public String getProvider() {
        return "cloudflare";
    }

    /**
     * @return Cloudflare Account Id.
     */
    @JsonProperty("accountId")
    public Optional<String> getAccountId() {
        return accountId;
    }

    /**
     * @return Cloudflare API Key / Token.
     */
    @JsonProperty("apiKey")
    public Optional<String> getApiKey() {
        return apiKey;
    }

    /**
     * @return Cloudflare Account Email.
     */
    @JsonProperty("accountEmail")
    public Optional<String> getAccountEmail() {
        return accountEmail;
    }

    /**
     * @return This is the order in which this storage provider is tried during upload retries. Lower numbers are tried first in increasing order.
     */
    @JsonProperty("fallbackIndex")
    public Optional<Double> getFallbackIndex() {
        return fallbackIndex;
    }

    /**
     * @return This is the unique identifier for the credential.
     */
    @JsonProperty("id")
    public String getId() {
        return id;
    }

    /**
     * @return This is the unique identifier for the org that this credential belongs to.
     */
    @JsonProperty("orgId")
    public String getOrgId() {
        return orgId;
    }

    /**
     * @return This is the ISO 8601 date-time string of when the credential was created.
     */
    @JsonProperty("createdAt")
    public OffsetDateTime getCreatedAt() {
        return createdAt;
    }

    /**
     * @return This is the ISO 8601 date-time string of when the assistant was last updated.
     */
    @JsonProperty("updatedAt")
    public OffsetDateTime getUpdatedAt() {
        return updatedAt;
    }

    /**
     * @return This is the name of credential. This is just for your reference.
     */
    @JsonProperty("name")
    public Optional<String> getName() {
        return name;
    }

    /**
     * @return This is the bucket plan that can be provided to store call artifacts in R2
     */
    @JsonProperty("bucketPlan")
    public Optional<CloudflareR2BucketPlan> getBucketPlan() {
        return bucketPlan;
    }

    @java.lang.Override
    public boolean equals(Object other) {
        if (this == other) return true;
        return other instanceof CloudflareCredential && equalTo((CloudflareCredential) other);
    }

    @JsonAnyGetter
    public Map<String, Object> getAdditionalProperties() {
        return this.additionalProperties;
    }

    private boolean equalTo(CloudflareCredential other) {
        return accountId.equals(other.accountId)
                && apiKey.equals(other.apiKey)
                && accountEmail.equals(other.accountEmail)
                && fallbackIndex.equals(other.fallbackIndex)
                && id.equals(other.id)
                && orgId.equals(other.orgId)
                && createdAt.equals(other.createdAt)
                && updatedAt.equals(other.updatedAt)
                && name.equals(other.name)
                && bucketPlan.equals(other.bucketPlan);
    }

    @java.lang.Override
    public int hashCode() {
        return Objects.hash(
                this.accountId,
                this.apiKey,
                this.accountEmail,
                this.fallbackIndex,
                this.id,
                this.orgId,
                this.createdAt,
                this.updatedAt,
                this.name,
                this.bucketPlan);
    }

    @java.lang.Override
    public String toString() {
        return ObjectMappers.stringify(this);
    }

    public static IdStage builder() {
        return new Builder();
    }

    public interface IdStage {
        /**
         * <p>This is the unique identifier for the credential.</p>
         */
        OrgIdStage id(@NotNull String id);

        Builder from(CloudflareCredential other);
    }

    public interface OrgIdStage {
        /**
         * <p>This is the unique identifier for the org that this credential belongs to.</p>
         */
        CreatedAtStage orgId(@NotNull String orgId);
    }

    public interface CreatedAtStage {
        /**
         * <p>This is the ISO 8601 date-time string of when the credential was created.</p>
         */
        UpdatedAtStage createdAt(@NotNull OffsetDateTime createdAt);
    }

    public interface UpdatedAtStage {
        /**
         * <p>This is the ISO 8601 date-time string of when the assistant was last updated.</p>
         */
        _FinalStage updatedAt(@NotNull OffsetDateTime updatedAt);
    }

    public interface _FinalStage {
        CloudflareCredential build();

        /**
         * <p>Cloudflare Account Id.</p>
         */
        _FinalStage accountId(Optional<String> accountId);

        _FinalStage accountId(String accountId);

        /**
         * <p>Cloudflare API Key / Token.</p>
         */
        _FinalStage apiKey(Optional<String> apiKey);

        _FinalStage apiKey(String apiKey);

        /**
         * <p>Cloudflare Account Email.</p>
         */
        _FinalStage accountEmail(Optional<String> accountEmail);

        _FinalStage accountEmail(String accountEmail);

        /**
         * <p>This is the order in which this storage provider is tried during upload retries. Lower numbers are tried first in increasing order.</p>
         */
        _FinalStage fallbackIndex(Optional<Double> fallbackIndex);

        _FinalStage fallbackIndex(Double fallbackIndex);

        /**
         * <p>This is the name of credential. This is just for your reference.</p>
         */
        _FinalStage name(Optional<String> name);

        _FinalStage name(String name);

        /**
         * <p>This is the bucket plan that can be provided to store call artifacts in R2</p>
         */
        _FinalStage bucketPlan(Optional<CloudflareR2BucketPlan> bucketPlan);

        _FinalStage bucketPlan(CloudflareR2BucketPlan bucketPlan);
    }

    @JsonIgnoreProperties(ignoreUnknown = true)
    public static final class Builder implements IdStage, OrgIdStage, CreatedAtStage, UpdatedAtStage, _FinalStage {
        private String id;

        private String orgId;

        private OffsetDateTime createdAt;

        private OffsetDateTime updatedAt;

        private Optional<CloudflareR2BucketPlan> bucketPlan = Optional.empty();

        private Optional<String> name = Optional.empty();

        private Optional<Double> fallbackIndex = Optional.empty();

        private Optional<String> accountEmail = Optional.empty();

        private Optional<String> apiKey = Optional.empty();

        private Optional<String> accountId = Optional.empty();

        @JsonAnySetter
        private Map<String, Object> additionalProperties = new HashMap<>();

        private Builder() {}

        @java.lang.Override
        public Builder from(CloudflareCredential other) {
            accountId(other.getAccountId());
            apiKey(other.getApiKey());
            accountEmail(other.getAccountEmail());
            fallbackIndex(other.getFallbackIndex());
            id(other.getId());
            orgId(other.getOrgId());
            createdAt(other.getCreatedAt());
            updatedAt(other.getUpdatedAt());
            name(other.getName());
            bucketPlan(other.getBucketPlan());
            return this;
        }

        /**
         * <p>This is the unique identifier for the credential.</p>
         * <p>This is the unique identifier for the credential.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        @JsonSetter("id")
        public OrgIdStage id(@NotNull String id) {
            this.id = Objects.requireNonNull(id, "id must not be null");
            return this;
        }

        /**
         * <p>This is the unique identifier for the org that this credential belongs to.</p>
         * <p>This is the unique identifier for the org that this credential belongs to.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        @JsonSetter("orgId")
        public CreatedAtStage orgId(@NotNull String orgId) {
            this.orgId = Objects.requireNonNull(orgId, "orgId must not be null");
            return this;
        }

        /**
         * <p>This is the ISO 8601 date-time string of when the credential was created.</p>
         * <p>This is the ISO 8601 date-time string of when the credential was created.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        @JsonSetter("createdAt")
        public UpdatedAtStage createdAt(@NotNull OffsetDateTime createdAt) {
            this.createdAt = Objects.requireNonNull(createdAt, "createdAt must not be null");
            return this;
        }

        /**
         * <p>This is the ISO 8601 date-time string of when the assistant was last updated.</p>
         * <p>This is the ISO 8601 date-time string of when the assistant was last updated.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        @JsonSetter("updatedAt")
        public _FinalStage updatedAt(@NotNull OffsetDateTime updatedAt) {
            this.updatedAt = Objects.requireNonNull(updatedAt, "updatedAt must not be null");
            return this;
        }

        /**
         * <p>This is the bucket plan that can be provided to store call artifacts in R2</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        public _FinalStage bucketPlan(CloudflareR2BucketPlan bucketPlan) {
            this.bucketPlan = Optional.ofNullable(bucketPlan);
            return this;
        }

        /**
         * <p>This is the bucket plan that can be provided to store call artifacts in R2</p>
         */
        @java.lang.Override
        @JsonSetter(value = "bucketPlan", nulls = Nulls.SKIP)
        public _FinalStage bucketPlan(Optional<CloudflareR2BucketPlan> bucketPlan) {
            this.bucketPlan = bucketPlan;
            return this;
        }

        /**
         * <p>This is the name of credential. This is just for your reference.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        public _FinalStage name(String name) {
            this.name = Optional.ofNullable(name);
            return this;
        }

        /**
         * <p>This is the name of credential. This is just for your reference.</p>
         */
        @java.lang.Override
        @JsonSetter(value = "name", nulls = Nulls.SKIP)
        public _FinalStage name(Optional<String> name) {
            this.name = name;
            return this;
        }

        /**
         * <p>This is the order in which this storage provider is tried during upload retries. Lower numbers are tried first in increasing order.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        public _FinalStage fallbackIndex(Double fallbackIndex) {
            this.fallbackIndex = Optional.ofNullable(fallbackIndex);
            return this;
        }

        /**
         * <p>This is the order in which this storage provider is tried during upload retries. Lower numbers are tried first in increasing order.</p>
         */
        @java.lang.Override
        @JsonSetter(value = "fallbackIndex", nulls = Nulls.SKIP)
        public _FinalStage fallbackIndex(Optional<Double> fallbackIndex) {
            this.fallbackIndex = fallbackIndex;
            return this;
        }

        /**
         * <p>Cloudflare Account Email.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        public _FinalStage accountEmail(String accountEmail) {
            this.accountEmail = Optional.ofNullable(accountEmail);
            return this;
        }

        /**
         * <p>Cloudflare Account Email.</p>
         */
        @java.lang.Override
        @JsonSetter(value = "accountEmail", nulls = Nulls.SKIP)
        public _FinalStage accountEmail(Optional<String> accountEmail) {
            this.accountEmail = accountEmail;
            return this;
        }

        /**
         * <p>Cloudflare API Key / Token.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        public _FinalStage apiKey(String apiKey) {
            this.apiKey = Optional.ofNullable(apiKey);
            return this;
        }

        /**
         * <p>Cloudflare API Key / Token.</p>
         */
        @java.lang.Override
        @JsonSetter(value = "apiKey", nulls = Nulls.SKIP)
        public _FinalStage apiKey(Optional<String> apiKey) {
            this.apiKey = apiKey;
            return this;
        }

        /**
         * <p>Cloudflare Account Id.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        public _FinalStage accountId(String accountId) {
            this.accountId = Optional.ofNullable(accountId);
            return this;
        }

        /**
         * <p>Cloudflare Account Id.</p>
         */
        @java.lang.Override
        @JsonSetter(value = "accountId", nulls = Nulls.SKIP)
        public _FinalStage accountId(Optional<String> accountId) {
            this.accountId = accountId;
            return this;
        }

        @java.lang.Override
        public CloudflareCredential build() {
            return new CloudflareCredential(
                    accountId,
                    apiKey,
                    accountEmail,
                    fallbackIndex,
                    id,
                    orgId,
                    createdAt,
                    updatedAt,
                    name,
                    bucketPlan,
                    additionalProperties);
        }
    }
}
