/**
 * This file was auto-generated by Fern from our API Definition.
 */
package com.vapi.api.types;

import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.annotation.Nulls;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.vapi.api.core.ObjectMappers;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import org.jetbrains.annotations.NotNull;

@JsonInclude(JsonInclude.Include.NON_ABSENT)
@JsonDeserialize(builder = RegexReplacement.Builder.class)
public final class RegexReplacement {
    private final String regex;

    private final Optional<List<RegexOption>> options;

    private final String value;

    private final Map<String, Object> additionalProperties;

    private RegexReplacement(
            String regex, Optional<List<RegexOption>> options, String value, Map<String, Object> additionalProperties) {
        this.regex = regex;
        this.options = options;
        this.value = value;
        this.additionalProperties = additionalProperties;
    }

    /**
     * @return This is the regex pattern to replace.
     * <p>Note:</p>
     * <ul>
     * <li>This works by using the <code>string.replace</code> method in Node.JS. Eg. <code>&quot;hello there&quot;.replace(/hello/g, &quot;hi&quot;)</code> will return <code>&quot;hi there&quot;</code>.</li>
     * </ul>
     * <p>Hot tip:</p>
     * <ul>
     * <li>In JavaScript, escape <code>\</code> when sending the regex pattern. Eg. <code>&quot;hello\sthere&quot;</code> will be sent over the wire as <code>&quot;hellosthere&quot;</code>. Send <code>&quot;hello\\sthere&quot;</code> instead.</li>
     * </ul>
     */
    @JsonProperty("regex")
    public String getRegex() {
        return regex;
    }

    /**
     * @return These are the options for the regex replacement. Defaults to all disabled.
     * <p>@default []</p>
     */
    @JsonProperty("options")
    public Optional<List<RegexOption>> getOptions() {
        return options;
    }

    /**
     * @return This is the value that will replace the match.
     */
    @JsonProperty("value")
    public String getValue() {
        return value;
    }

    @java.lang.Override
    public boolean equals(Object other) {
        if (this == other) return true;
        return other instanceof RegexReplacement && equalTo((RegexReplacement) other);
    }

    @JsonAnyGetter
    public Map<String, Object> getAdditionalProperties() {
        return this.additionalProperties;
    }

    private boolean equalTo(RegexReplacement other) {
        return regex.equals(other.regex) && options.equals(other.options) && value.equals(other.value);
    }

    @java.lang.Override
    public int hashCode() {
        return Objects.hash(this.regex, this.options, this.value);
    }

    @java.lang.Override
    public String toString() {
        return ObjectMappers.stringify(this);
    }

    public static RegexStage builder() {
        return new Builder();
    }

    public interface RegexStage {
        /**
         * <p>This is the regex pattern to replace.</p>
         * <p>Note:</p>
         * <ul>
         * <li>This works by using the <code>string.replace</code> method in Node.JS. Eg. <code>&quot;hello there&quot;.replace(/hello/g, &quot;hi&quot;)</code> will return <code>&quot;hi there&quot;</code>.</li>
         * </ul>
         * <p>Hot tip:</p>
         * <ul>
         * <li>In JavaScript, escape <code>\</code> when sending the regex pattern. Eg. <code>&quot;hello\sthere&quot;</code> will be sent over the wire as <code>&quot;hellosthere&quot;</code>. Send <code>&quot;hello\\sthere&quot;</code> instead.</li>
         * </ul>
         */
        ValueStage regex(@NotNull String regex);

        Builder from(RegexReplacement other);
    }

    public interface ValueStage {
        /**
         * <p>This is the value that will replace the match.</p>
         */
        _FinalStage value(@NotNull String value);
    }

    public interface _FinalStage {
        RegexReplacement build();

        /**
         * <p>These are the options for the regex replacement. Defaults to all disabled.</p>
         * <p>@default []</p>
         */
        _FinalStage options(Optional<List<RegexOption>> options);

        _FinalStage options(List<RegexOption> options);
    }

    @JsonIgnoreProperties(ignoreUnknown = true)
    public static final class Builder implements RegexStage, ValueStage, _FinalStage {
        private String regex;

        private String value;

        private Optional<List<RegexOption>> options = Optional.empty();

        @JsonAnySetter
        private Map<String, Object> additionalProperties = new HashMap<>();

        private Builder() {}

        @java.lang.Override
        public Builder from(RegexReplacement other) {
            regex(other.getRegex());
            options(other.getOptions());
            value(other.getValue());
            return this;
        }

        /**
         * <p>This is the regex pattern to replace.</p>
         * <p>Note:</p>
         * <ul>
         * <li>This works by using the <code>string.replace</code> method in Node.JS. Eg. <code>&quot;hello there&quot;.replace(/hello/g, &quot;hi&quot;)</code> will return <code>&quot;hi there&quot;</code>.</li>
         * </ul>
         * <p>Hot tip:</p>
         * <ul>
         * <li>In JavaScript, escape <code>\</code> when sending the regex pattern. Eg. <code>&quot;hello\sthere&quot;</code> will be sent over the wire as <code>&quot;hellosthere&quot;</code>. Send <code>&quot;hello\\sthere&quot;</code> instead.</li>
         * </ul>
         * <p>This is the regex pattern to replace.</p>
         * <p>Note:</p>
         * <ul>
         * <li>This works by using the <code>string.replace</code> method in Node.JS. Eg. <code>&quot;hello there&quot;.replace(/hello/g, &quot;hi&quot;)</code> will return <code>&quot;hi there&quot;</code>.</li>
         * </ul>
         * <p>Hot tip:</p>
         * <ul>
         * <li>In JavaScript, escape <code>\</code> when sending the regex pattern. Eg. <code>&quot;hello\sthere&quot;</code> will be sent over the wire as <code>&quot;hellosthere&quot;</code>. Send <code>&quot;hello\\sthere&quot;</code> instead.</li>
         * </ul>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        @JsonSetter("regex")
        public ValueStage regex(@NotNull String regex) {
            this.regex = Objects.requireNonNull(regex, "regex must not be null");
            return this;
        }

        /**
         * <p>This is the value that will replace the match.</p>
         * <p>This is the value that will replace the match.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        @JsonSetter("value")
        public _FinalStage value(@NotNull String value) {
            this.value = Objects.requireNonNull(value, "value must not be null");
            return this;
        }

        /**
         * <p>These are the options for the regex replacement. Defaults to all disabled.</p>
         * <p>@default []</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        public _FinalStage options(List<RegexOption> options) {
            this.options = Optional.ofNullable(options);
            return this;
        }

        /**
         * <p>These are the options for the regex replacement. Defaults to all disabled.</p>
         * <p>@default []</p>
         */
        @java.lang.Override
        @JsonSetter(value = "options", nulls = Nulls.SKIP)
        public _FinalStage options(Optional<List<RegexOption>> options) {
            this.options = options;
            return this;
        }

        @java.lang.Override
        public RegexReplacement build() {
            return new RegexReplacement(regex, options, value, additionalProperties);
        }
    }
}
