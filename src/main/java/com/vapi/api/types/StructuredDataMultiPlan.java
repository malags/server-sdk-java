/**
 * This file was auto-generated by Fern from our API Definition.
 */
package com.vapi.api.types;

import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.vapi.api.core.ObjectMappers;
import java.util.HashMap;
import java.util.Map;
import java.util.Objects;
import org.jetbrains.annotations.NotNull;

@JsonInclude(JsonInclude.Include.NON_ABSENT)
@JsonDeserialize(builder = StructuredDataMultiPlan.Builder.class)
public final class StructuredDataMultiPlan {
    private final String key;

    private final StructuredDataPlan plan;

    private final Map<String, Object> additionalProperties;

    private StructuredDataMultiPlan(String key, StructuredDataPlan plan, Map<String, Object> additionalProperties) {
        this.key = key;
        this.plan = plan;
        this.additionalProperties = additionalProperties;
    }

    /**
     * @return This is the key of the structured data plan in the catalog.
     */
    @JsonProperty("key")
    public String getKey() {
        return key;
    }

    /**
     * @return This is an individual structured data plan in the catalog.
     */
    @JsonProperty("plan")
    public StructuredDataPlan getPlan() {
        return plan;
    }

    @java.lang.Override
    public boolean equals(Object other) {
        if (this == other) return true;
        return other instanceof StructuredDataMultiPlan && equalTo((StructuredDataMultiPlan) other);
    }

    @JsonAnyGetter
    public Map<String, Object> getAdditionalProperties() {
        return this.additionalProperties;
    }

    private boolean equalTo(StructuredDataMultiPlan other) {
        return key.equals(other.key) && plan.equals(other.plan);
    }

    @java.lang.Override
    public int hashCode() {
        return Objects.hash(this.key, this.plan);
    }

    @java.lang.Override
    public String toString() {
        return ObjectMappers.stringify(this);
    }

    public static KeyStage builder() {
        return new Builder();
    }

    public interface KeyStage {
        /**
         * <p>This is the key of the structured data plan in the catalog.</p>
         */
        PlanStage key(@NotNull String key);

        Builder from(StructuredDataMultiPlan other);
    }

    public interface PlanStage {
        /**
         * <p>This is an individual structured data plan in the catalog.</p>
         */
        _FinalStage plan(@NotNull StructuredDataPlan plan);
    }

    public interface _FinalStage {
        StructuredDataMultiPlan build();
    }

    @JsonIgnoreProperties(ignoreUnknown = true)
    public static final class Builder implements KeyStage, PlanStage, _FinalStage {
        private String key;

        private StructuredDataPlan plan;

        @JsonAnySetter
        private Map<String, Object> additionalProperties = new HashMap<>();

        private Builder() {}

        @java.lang.Override
        public Builder from(StructuredDataMultiPlan other) {
            key(other.getKey());
            plan(other.getPlan());
            return this;
        }

        /**
         * <p>This is the key of the structured data plan in the catalog.</p>
         * <p>This is the key of the structured data plan in the catalog.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        @JsonSetter("key")
        public PlanStage key(@NotNull String key) {
            this.key = Objects.requireNonNull(key, "key must not be null");
            return this;
        }

        /**
         * <p>This is an individual structured data plan in the catalog.</p>
         * <p>This is an individual structured data plan in the catalog.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        @JsonSetter("plan")
        public _FinalStage plan(@NotNull StructuredDataPlan plan) {
            this.plan = Objects.requireNonNull(plan, "plan must not be null");
            return this;
        }

        @java.lang.Override
        public StructuredDataMultiPlan build() {
            return new StructuredDataMultiPlan(key, plan, additionalProperties);
        }
    }
}
