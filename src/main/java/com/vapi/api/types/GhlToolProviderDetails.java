/**
 * This file was auto-generated by Fern from our API Definition.
 */
package com.vapi.api.types;

import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.annotation.Nulls;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.vapi.api.core.ObjectMappers;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;

@JsonInclude(JsonInclude.Include.NON_ABSENT)
@JsonDeserialize(builder = GhlToolProviderDetails.Builder.class)
public final class GhlToolProviderDetails {
    private final Optional<String> templateUrl;

    private final Optional<List<ToolTemplateSetup>> setupInstructions;

    private final Optional<String> workflowId;

    private final Optional<String> workflowName;

    private final Optional<String> webhookHookId;

    private final Optional<String> webhookHookName;

    private final Optional<String> locationId;

    private final Map<String, Object> additionalProperties;

    private GhlToolProviderDetails(
            Optional<String> templateUrl,
            Optional<List<ToolTemplateSetup>> setupInstructions,
            Optional<String> workflowId,
            Optional<String> workflowName,
            Optional<String> webhookHookId,
            Optional<String> webhookHookName,
            Optional<String> locationId,
            Map<String, Object> additionalProperties) {
        this.templateUrl = templateUrl;
        this.setupInstructions = setupInstructions;
        this.workflowId = workflowId;
        this.workflowName = workflowName;
        this.webhookHookId = webhookHookId;
        this.webhookHookName = webhookHookName;
        this.locationId = locationId;
        this.additionalProperties = additionalProperties;
    }

    /**
     * @return This is the Template URL or the Snapshot URL corresponding to the Template.
     */
    @JsonProperty("templateUrl")
    public Optional<String> getTemplateUrl() {
        return templateUrl;
    }

    @JsonProperty("setupInstructions")
    public Optional<List<ToolTemplateSetup>> getSetupInstructions() {
        return setupInstructions;
    }

    @JsonProperty("workflowId")
    public Optional<String> getWorkflowId() {
        return workflowId;
    }

    @JsonProperty("workflowName")
    public Optional<String> getWorkflowName() {
        return workflowName;
    }

    @JsonProperty("webhookHookId")
    public Optional<String> getWebhookHookId() {
        return webhookHookId;
    }

    @JsonProperty("webhookHookName")
    public Optional<String> getWebhookHookName() {
        return webhookHookName;
    }

    @JsonProperty("locationId")
    public Optional<String> getLocationId() {
        return locationId;
    }

    @java.lang.Override
    public boolean equals(Object other) {
        if (this == other) return true;
        return other instanceof GhlToolProviderDetails && equalTo((GhlToolProviderDetails) other);
    }

    @JsonAnyGetter
    public Map<String, Object> getAdditionalProperties() {
        return this.additionalProperties;
    }

    private boolean equalTo(GhlToolProviderDetails other) {
        return templateUrl.equals(other.templateUrl)
                && setupInstructions.equals(other.setupInstructions)
                && workflowId.equals(other.workflowId)
                && workflowName.equals(other.workflowName)
                && webhookHookId.equals(other.webhookHookId)
                && webhookHookName.equals(other.webhookHookName)
                && locationId.equals(other.locationId);
    }

    @java.lang.Override
    public int hashCode() {
        return Objects.hash(
                this.templateUrl,
                this.setupInstructions,
                this.workflowId,
                this.workflowName,
                this.webhookHookId,
                this.webhookHookName,
                this.locationId);
    }

    @java.lang.Override
    public String toString() {
        return ObjectMappers.stringify(this);
    }

    public static Builder builder() {
        return new Builder();
    }

    @JsonIgnoreProperties(ignoreUnknown = true)
    public static final class Builder {
        private Optional<String> templateUrl = Optional.empty();

        private Optional<List<ToolTemplateSetup>> setupInstructions = Optional.empty();

        private Optional<String> workflowId = Optional.empty();

        private Optional<String> workflowName = Optional.empty();

        private Optional<String> webhookHookId = Optional.empty();

        private Optional<String> webhookHookName = Optional.empty();

        private Optional<String> locationId = Optional.empty();

        @JsonAnySetter
        private Map<String, Object> additionalProperties = new HashMap<>();

        private Builder() {}

        public Builder from(GhlToolProviderDetails other) {
            templateUrl(other.getTemplateUrl());
            setupInstructions(other.getSetupInstructions());
            workflowId(other.getWorkflowId());
            workflowName(other.getWorkflowName());
            webhookHookId(other.getWebhookHookId());
            webhookHookName(other.getWebhookHookName());
            locationId(other.getLocationId());
            return this;
        }

        /**
         * <p>This is the Template URL or the Snapshot URL corresponding to the Template.</p>
         */
        @JsonSetter(value = "templateUrl", nulls = Nulls.SKIP)
        public Builder templateUrl(Optional<String> templateUrl) {
            this.templateUrl = templateUrl;
            return this;
        }

        public Builder templateUrl(String templateUrl) {
            this.templateUrl = Optional.ofNullable(templateUrl);
            return this;
        }

        @JsonSetter(value = "setupInstructions", nulls = Nulls.SKIP)
        public Builder setupInstructions(Optional<List<ToolTemplateSetup>> setupInstructions) {
            this.setupInstructions = setupInstructions;
            return this;
        }

        public Builder setupInstructions(List<ToolTemplateSetup> setupInstructions) {
            this.setupInstructions = Optional.ofNullable(setupInstructions);
            return this;
        }

        @JsonSetter(value = "workflowId", nulls = Nulls.SKIP)
        public Builder workflowId(Optional<String> workflowId) {
            this.workflowId = workflowId;
            return this;
        }

        public Builder workflowId(String workflowId) {
            this.workflowId = Optional.ofNullable(workflowId);
            return this;
        }

        @JsonSetter(value = "workflowName", nulls = Nulls.SKIP)
        public Builder workflowName(Optional<String> workflowName) {
            this.workflowName = workflowName;
            return this;
        }

        public Builder workflowName(String workflowName) {
            this.workflowName = Optional.ofNullable(workflowName);
            return this;
        }

        @JsonSetter(value = "webhookHookId", nulls = Nulls.SKIP)
        public Builder webhookHookId(Optional<String> webhookHookId) {
            this.webhookHookId = webhookHookId;
            return this;
        }

        public Builder webhookHookId(String webhookHookId) {
            this.webhookHookId = Optional.ofNullable(webhookHookId);
            return this;
        }

        @JsonSetter(value = "webhookHookName", nulls = Nulls.SKIP)
        public Builder webhookHookName(Optional<String> webhookHookName) {
            this.webhookHookName = webhookHookName;
            return this;
        }

        public Builder webhookHookName(String webhookHookName) {
            this.webhookHookName = Optional.ofNullable(webhookHookName);
            return this;
        }

        @JsonSetter(value = "locationId", nulls = Nulls.SKIP)
        public Builder locationId(Optional<String> locationId) {
            this.locationId = locationId;
            return this;
        }

        public Builder locationId(String locationId) {
            this.locationId = Optional.ofNullable(locationId);
            return this;
        }

        public GhlToolProviderDetails build() {
            return new GhlToolProviderDetails(
                    templateUrl,
                    setupInstructions,
                    workflowId,
                    workflowName,
                    webhookHookId,
                    webhookHookName,
                    locationId,
                    additionalProperties);
        }
    }
}
