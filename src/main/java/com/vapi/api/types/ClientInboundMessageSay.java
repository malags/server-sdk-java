/**
 * This file was auto-generated by Fern from our API Definition.
 */
package com.vapi.api.types;

import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.annotation.Nulls;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.vapi.api.core.ObjectMappers;
import java.util.HashMap;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;

@JsonInclude(JsonInclude.Include.NON_ABSENT)
@JsonDeserialize(builder = ClientInboundMessageSay.Builder.class)
public final class ClientInboundMessageSay {
    private final Optional<Boolean> interruptAssistantEnabled;

    private final Optional<String> content;

    private final Optional<Boolean> endCallAfterSpoken;

    private final Optional<Boolean> interruptionsEnabled;

    private final Map<String, Object> additionalProperties;

    private ClientInboundMessageSay(
            Optional<Boolean> interruptAssistantEnabled,
            Optional<String> content,
            Optional<Boolean> endCallAfterSpoken,
            Optional<Boolean> interruptionsEnabled,
            Map<String, Object> additionalProperties) {
        this.interruptAssistantEnabled = interruptAssistantEnabled;
        this.content = content;
        this.endCallAfterSpoken = endCallAfterSpoken;
        this.interruptionsEnabled = interruptionsEnabled;
        this.additionalProperties = additionalProperties;
    }

    /**
     * @return This is the flag for whether the message should replace existing assistant speech.
     * <p>@default false</p>
     */
    @JsonProperty("interruptAssistantEnabled")
    public Optional<Boolean> getInterruptAssistantEnabled() {
        return interruptAssistantEnabled;
    }

    /**
     * @return This is the content to say.
     */
    @JsonProperty("content")
    public Optional<String> getContent() {
        return content;
    }

    /**
     * @return This is the flag to end call after content is spoken.
     */
    @JsonProperty("endCallAfterSpoken")
    public Optional<Boolean> getEndCallAfterSpoken() {
        return endCallAfterSpoken;
    }

    /**
     * @return This is the flag for whether the message is interruptible by the user.
     */
    @JsonProperty("interruptionsEnabled")
    public Optional<Boolean> getInterruptionsEnabled() {
        return interruptionsEnabled;
    }

    @java.lang.Override
    public boolean equals(Object other) {
        if (this == other) return true;
        return other instanceof ClientInboundMessageSay && equalTo((ClientInboundMessageSay) other);
    }

    @JsonAnyGetter
    public Map<String, Object> getAdditionalProperties() {
        return this.additionalProperties;
    }

    private boolean equalTo(ClientInboundMessageSay other) {
        return interruptAssistantEnabled.equals(other.interruptAssistantEnabled)
                && content.equals(other.content)
                && endCallAfterSpoken.equals(other.endCallAfterSpoken)
                && interruptionsEnabled.equals(other.interruptionsEnabled);
    }

    @java.lang.Override
    public int hashCode() {
        return Objects.hash(
                this.interruptAssistantEnabled, this.content, this.endCallAfterSpoken, this.interruptionsEnabled);
    }

    @java.lang.Override
    public String toString() {
        return ObjectMappers.stringify(this);
    }

    public static Builder builder() {
        return new Builder();
    }

    @JsonIgnoreProperties(ignoreUnknown = true)
    public static final class Builder {
        private Optional<Boolean> interruptAssistantEnabled = Optional.empty();

        private Optional<String> content = Optional.empty();

        private Optional<Boolean> endCallAfterSpoken = Optional.empty();

        private Optional<Boolean> interruptionsEnabled = Optional.empty();

        @JsonAnySetter
        private Map<String, Object> additionalProperties = new HashMap<>();

        private Builder() {}

        public Builder from(ClientInboundMessageSay other) {
            interruptAssistantEnabled(other.getInterruptAssistantEnabled());
            content(other.getContent());
            endCallAfterSpoken(other.getEndCallAfterSpoken());
            interruptionsEnabled(other.getInterruptionsEnabled());
            return this;
        }

        /**
         * <p>This is the flag for whether the message should replace existing assistant speech.</p>
         * <p>@default false</p>
         */
        @JsonSetter(value = "interruptAssistantEnabled", nulls = Nulls.SKIP)
        public Builder interruptAssistantEnabled(Optional<Boolean> interruptAssistantEnabled) {
            this.interruptAssistantEnabled = interruptAssistantEnabled;
            return this;
        }

        public Builder interruptAssistantEnabled(Boolean interruptAssistantEnabled) {
            this.interruptAssistantEnabled = Optional.ofNullable(interruptAssistantEnabled);
            return this;
        }

        /**
         * <p>This is the content to say.</p>
         */
        @JsonSetter(value = "content", nulls = Nulls.SKIP)
        public Builder content(Optional<String> content) {
            this.content = content;
            return this;
        }

        public Builder content(String content) {
            this.content = Optional.ofNullable(content);
            return this;
        }

        /**
         * <p>This is the flag to end call after content is spoken.</p>
         */
        @JsonSetter(value = "endCallAfterSpoken", nulls = Nulls.SKIP)
        public Builder endCallAfterSpoken(Optional<Boolean> endCallAfterSpoken) {
            this.endCallAfterSpoken = endCallAfterSpoken;
            return this;
        }

        public Builder endCallAfterSpoken(Boolean endCallAfterSpoken) {
            this.endCallAfterSpoken = Optional.ofNullable(endCallAfterSpoken);
            return this;
        }

        /**
         * <p>This is the flag for whether the message is interruptible by the user.</p>
         */
        @JsonSetter(value = "interruptionsEnabled", nulls = Nulls.SKIP)
        public Builder interruptionsEnabled(Optional<Boolean> interruptionsEnabled) {
            this.interruptionsEnabled = interruptionsEnabled;
            return this;
        }

        public Builder interruptionsEnabled(Boolean interruptionsEnabled) {
            this.interruptionsEnabled = Optional.ofNullable(interruptionsEnabled);
            return this;
        }

        public ClientInboundMessageSay build() {
            return new ClientInboundMessageSay(
                    interruptAssistantEnabled, content, endCallAfterSpoken, interruptionsEnabled, additionalProperties);
        }
    }
}
