/**
 * This file was auto-generated by Fern from our API Definition.
 */
package com.vapi.api.types;

import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.annotation.Nulls;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.vapi.api.core.ObjectMappers;
import java.time.OffsetDateTime;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.LinkedHashMap;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import org.jetbrains.annotations.NotNull;

@JsonInclude(JsonInclude.Include.NON_ABSENT)
@JsonDeserialize(builder = Campaign.Builder.class)
public final class Campaign {
    private final CampaignStatus status;

    private final Optional<CampaignEndedReason> endedReason;

    private final String name;

    private final Optional<String> assistantId;

    private final Optional<String> workflowId;

    private final String phoneNumberId;

    private final Optional<SchedulePlan> schedulePlan;

    private final List<CreateCustomerDto> customers;

    private final String id;

    private final String orgId;

    private final OffsetDateTime createdAt;

    private final OffsetDateTime updatedAt;

    private final Map<String, Object> calls;

    private final double callsCounterScheduled;

    private final double callsCounterQueued;

    private final double callsCounterInProgress;

    private final double callsCounterEndedVoicemail;

    private final double callsCounterEnded;

    private final Map<String, Object> additionalProperties;

    private Campaign(
            CampaignStatus status,
            Optional<CampaignEndedReason> endedReason,
            String name,
            Optional<String> assistantId,
            Optional<String> workflowId,
            String phoneNumberId,
            Optional<SchedulePlan> schedulePlan,
            List<CreateCustomerDto> customers,
            String id,
            String orgId,
            OffsetDateTime createdAt,
            OffsetDateTime updatedAt,
            Map<String, Object> calls,
            double callsCounterScheduled,
            double callsCounterQueued,
            double callsCounterInProgress,
            double callsCounterEndedVoicemail,
            double callsCounterEnded,
            Map<String, Object> additionalProperties) {
        this.status = status;
        this.endedReason = endedReason;
        this.name = name;
        this.assistantId = assistantId;
        this.workflowId = workflowId;
        this.phoneNumberId = phoneNumberId;
        this.schedulePlan = schedulePlan;
        this.customers = customers;
        this.id = id;
        this.orgId = orgId;
        this.createdAt = createdAt;
        this.updatedAt = updatedAt;
        this.calls = calls;
        this.callsCounterScheduled = callsCounterScheduled;
        this.callsCounterQueued = callsCounterQueued;
        this.callsCounterInProgress = callsCounterInProgress;
        this.callsCounterEndedVoicemail = callsCounterEndedVoicemail;
        this.callsCounterEnded = callsCounterEnded;
        this.additionalProperties = additionalProperties;
    }

    /**
     * @return This is the status of the campaign.
     */
    @JsonProperty("status")
    public CampaignStatus getStatus() {
        return status;
    }

    /**
     * @return This is the explanation for how the campaign ended.
     */
    @JsonProperty("endedReason")
    public Optional<CampaignEndedReason> getEndedReason() {
        return endedReason;
    }

    /**
     * @return This is the name of the campaign. This is just for your own reference.
     */
    @JsonProperty("name")
    public String getName() {
        return name;
    }

    /**
     * @return This is the assistant ID that will be used for the campaign calls. Note: Either assistantId or workflowId can be used, but not both.
     */
    @JsonProperty("assistantId")
    public Optional<String> getAssistantId() {
        return assistantId;
    }

    /**
     * @return This is the workflow ID that will be used for the campaign calls. Note: Either assistantId or workflowId can be used, but not both.
     */
    @JsonProperty("workflowId")
    public Optional<String> getWorkflowId() {
        return workflowId;
    }

    /**
     * @return This is the phone number ID that will be used for the campaign calls.
     */
    @JsonProperty("phoneNumberId")
    public String getPhoneNumberId() {
        return phoneNumberId;
    }

    /**
     * @return This is the schedule plan for the campaign.
     */
    @JsonProperty("schedulePlan")
    public Optional<SchedulePlan> getSchedulePlan() {
        return schedulePlan;
    }

    /**
     * @return These are the customers that will be called in the campaign.
     */
    @JsonProperty("customers")
    public List<CreateCustomerDto> getCustomers() {
        return customers;
    }

    /**
     * @return This is the unique identifier for the campaign.
     */
    @JsonProperty("id")
    public String getId() {
        return id;
    }

    /**
     * @return This is the unique identifier for the org that this campaign belongs to.
     */
    @JsonProperty("orgId")
    public String getOrgId() {
        return orgId;
    }

    /**
     * @return This is the ISO 8601 date-time string of when the campaign was created.
     */
    @JsonProperty("createdAt")
    public OffsetDateTime getCreatedAt() {
        return createdAt;
    }

    /**
     * @return This is the ISO 8601 date-time string of when the campaign was last updated.
     */
    @JsonProperty("updatedAt")
    public OffsetDateTime getUpdatedAt() {
        return updatedAt;
    }

    /**
     * @return This is a map of call IDs to campaign call details.
     */
    @JsonProperty("calls")
    public Map<String, Object> getCalls() {
        return calls;
    }

    /**
     * @return This is the number of calls that have been scheduled.
     */
    @JsonProperty("callsCounterScheduled")
    public double getCallsCounterScheduled() {
        return callsCounterScheduled;
    }

    /**
     * @return This is the number of calls that have been queued.
     */
    @JsonProperty("callsCounterQueued")
    public double getCallsCounterQueued() {
        return callsCounterQueued;
    }

    /**
     * @return This is the number of calls that have been in progress.
     */
    @JsonProperty("callsCounterInProgress")
    public double getCallsCounterInProgress() {
        return callsCounterInProgress;
    }

    /**
     * @return This is the number of calls whose ended reason is 'voicemail'.
     */
    @JsonProperty("callsCounterEndedVoicemail")
    public double getCallsCounterEndedVoicemail() {
        return callsCounterEndedVoicemail;
    }

    /**
     * @return This is the number of calls that have ended.
     */
    @JsonProperty("callsCounterEnded")
    public double getCallsCounterEnded() {
        return callsCounterEnded;
    }

    @java.lang.Override
    public boolean equals(Object other) {
        if (this == other) return true;
        return other instanceof Campaign && equalTo((Campaign) other);
    }

    @JsonAnyGetter
    public Map<String, Object> getAdditionalProperties() {
        return this.additionalProperties;
    }

    private boolean equalTo(Campaign other) {
        return status.equals(other.status)
                && endedReason.equals(other.endedReason)
                && name.equals(other.name)
                && assistantId.equals(other.assistantId)
                && workflowId.equals(other.workflowId)
                && phoneNumberId.equals(other.phoneNumberId)
                && schedulePlan.equals(other.schedulePlan)
                && customers.equals(other.customers)
                && id.equals(other.id)
                && orgId.equals(other.orgId)
                && createdAt.equals(other.createdAt)
                && updatedAt.equals(other.updatedAt)
                && calls.equals(other.calls)
                && callsCounterScheduled == other.callsCounterScheduled
                && callsCounterQueued == other.callsCounterQueued
                && callsCounterInProgress == other.callsCounterInProgress
                && callsCounterEndedVoicemail == other.callsCounterEndedVoicemail
                && callsCounterEnded == other.callsCounterEnded;
    }

    @java.lang.Override
    public int hashCode() {
        return Objects.hash(
                this.status,
                this.endedReason,
                this.name,
                this.assistantId,
                this.workflowId,
                this.phoneNumberId,
                this.schedulePlan,
                this.customers,
                this.id,
                this.orgId,
                this.createdAt,
                this.updatedAt,
                this.calls,
                this.callsCounterScheduled,
                this.callsCounterQueued,
                this.callsCounterInProgress,
                this.callsCounterEndedVoicemail,
                this.callsCounterEnded);
    }

    @java.lang.Override
    public String toString() {
        return ObjectMappers.stringify(this);
    }

    public static StatusStage builder() {
        return new Builder();
    }

    public interface StatusStage {
        /**
         * <p>This is the status of the campaign.</p>
         */
        NameStage status(@NotNull CampaignStatus status);

        Builder from(Campaign other);
    }

    public interface NameStage {
        /**
         * <p>This is the name of the campaign. This is just for your own reference.</p>
         */
        PhoneNumberIdStage name(@NotNull String name);
    }

    public interface PhoneNumberIdStage {
        /**
         * <p>This is the phone number ID that will be used for the campaign calls.</p>
         */
        IdStage phoneNumberId(@NotNull String phoneNumberId);
    }

    public interface IdStage {
        /**
         * <p>This is the unique identifier for the campaign.</p>
         */
        OrgIdStage id(@NotNull String id);
    }

    public interface OrgIdStage {
        /**
         * <p>This is the unique identifier for the org that this campaign belongs to.</p>
         */
        CreatedAtStage orgId(@NotNull String orgId);
    }

    public interface CreatedAtStage {
        /**
         * <p>This is the ISO 8601 date-time string of when the campaign was created.</p>
         */
        UpdatedAtStage createdAt(@NotNull OffsetDateTime createdAt);
    }

    public interface UpdatedAtStage {
        /**
         * <p>This is the ISO 8601 date-time string of when the campaign was last updated.</p>
         */
        CallsCounterScheduledStage updatedAt(@NotNull OffsetDateTime updatedAt);
    }

    public interface CallsCounterScheduledStage {
        /**
         * <p>This is the number of calls that have been scheduled.</p>
         */
        CallsCounterQueuedStage callsCounterScheduled(double callsCounterScheduled);
    }

    public interface CallsCounterQueuedStage {
        /**
         * <p>This is the number of calls that have been queued.</p>
         */
        CallsCounterInProgressStage callsCounterQueued(double callsCounterQueued);
    }

    public interface CallsCounterInProgressStage {
        /**
         * <p>This is the number of calls that have been in progress.</p>
         */
        CallsCounterEndedVoicemailStage callsCounterInProgress(double callsCounterInProgress);
    }

    public interface CallsCounterEndedVoicemailStage {
        /**
         * <p>This is the number of calls whose ended reason is 'voicemail'.</p>
         */
        CallsCounterEndedStage callsCounterEndedVoicemail(double callsCounterEndedVoicemail);
    }

    public interface CallsCounterEndedStage {
        /**
         * <p>This is the number of calls that have ended.</p>
         */
        _FinalStage callsCounterEnded(double callsCounterEnded);
    }

    public interface _FinalStage {
        Campaign build();

        /**
         * <p>This is the explanation for how the campaign ended.</p>
         */
        _FinalStage endedReason(Optional<CampaignEndedReason> endedReason);

        _FinalStage endedReason(CampaignEndedReason endedReason);

        /**
         * <p>This is the assistant ID that will be used for the campaign calls. Note: Either assistantId or workflowId can be used, but not both.</p>
         */
        _FinalStage assistantId(Optional<String> assistantId);

        _FinalStage assistantId(String assistantId);

        /**
         * <p>This is the workflow ID that will be used for the campaign calls. Note: Either assistantId or workflowId can be used, but not both.</p>
         */
        _FinalStage workflowId(Optional<String> workflowId);

        _FinalStage workflowId(String workflowId);

        /**
         * <p>This is the schedule plan for the campaign.</p>
         */
        _FinalStage schedulePlan(Optional<SchedulePlan> schedulePlan);

        _FinalStage schedulePlan(SchedulePlan schedulePlan);

        /**
         * <p>These are the customers that will be called in the campaign.</p>
         */
        _FinalStage customers(List<CreateCustomerDto> customers);

        _FinalStage addCustomers(CreateCustomerDto customers);

        _FinalStage addAllCustomers(List<CreateCustomerDto> customers);

        /**
         * <p>This is a map of call IDs to campaign call details.</p>
         */
        _FinalStage calls(Map<String, Object> calls);

        _FinalStage putAllCalls(Map<String, Object> calls);

        _FinalStage calls(String key, Object value);
    }

    @JsonIgnoreProperties(ignoreUnknown = true)
    public static final class Builder
            implements StatusStage,
                    NameStage,
                    PhoneNumberIdStage,
                    IdStage,
                    OrgIdStage,
                    CreatedAtStage,
                    UpdatedAtStage,
                    CallsCounterScheduledStage,
                    CallsCounterQueuedStage,
                    CallsCounterInProgressStage,
                    CallsCounterEndedVoicemailStage,
                    CallsCounterEndedStage,
                    _FinalStage {
        private CampaignStatus status;

        private String name;

        private String phoneNumberId;

        private String id;

        private String orgId;

        private OffsetDateTime createdAt;

        private OffsetDateTime updatedAt;

        private double callsCounterScheduled;

        private double callsCounterQueued;

        private double callsCounterInProgress;

        private double callsCounterEndedVoicemail;

        private double callsCounterEnded;

        private Map<String, Object> calls = new LinkedHashMap<>();

        private List<CreateCustomerDto> customers = new ArrayList<>();

        private Optional<SchedulePlan> schedulePlan = Optional.empty();

        private Optional<String> workflowId = Optional.empty();

        private Optional<String> assistantId = Optional.empty();

        private Optional<CampaignEndedReason> endedReason = Optional.empty();

        @JsonAnySetter
        private Map<String, Object> additionalProperties = new HashMap<>();

        private Builder() {}

        @java.lang.Override
        public Builder from(Campaign other) {
            status(other.getStatus());
            endedReason(other.getEndedReason());
            name(other.getName());
            assistantId(other.getAssistantId());
            workflowId(other.getWorkflowId());
            phoneNumberId(other.getPhoneNumberId());
            schedulePlan(other.getSchedulePlan());
            customers(other.getCustomers());
            id(other.getId());
            orgId(other.getOrgId());
            createdAt(other.getCreatedAt());
            updatedAt(other.getUpdatedAt());
            calls(other.getCalls());
            callsCounterScheduled(other.getCallsCounterScheduled());
            callsCounterQueued(other.getCallsCounterQueued());
            callsCounterInProgress(other.getCallsCounterInProgress());
            callsCounterEndedVoicemail(other.getCallsCounterEndedVoicemail());
            callsCounterEnded(other.getCallsCounterEnded());
            return this;
        }

        /**
         * <p>This is the status of the campaign.</p>
         * <p>This is the status of the campaign.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        @JsonSetter("status")
        public NameStage status(@NotNull CampaignStatus status) {
            this.status = Objects.requireNonNull(status, "status must not be null");
            return this;
        }

        /**
         * <p>This is the name of the campaign. This is just for your own reference.</p>
         * <p>This is the name of the campaign. This is just for your own reference.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        @JsonSetter("name")
        public PhoneNumberIdStage name(@NotNull String name) {
            this.name = Objects.requireNonNull(name, "name must not be null");
            return this;
        }

        /**
         * <p>This is the phone number ID that will be used for the campaign calls.</p>
         * <p>This is the phone number ID that will be used for the campaign calls.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        @JsonSetter("phoneNumberId")
        public IdStage phoneNumberId(@NotNull String phoneNumberId) {
            this.phoneNumberId = Objects.requireNonNull(phoneNumberId, "phoneNumberId must not be null");
            return this;
        }

        /**
         * <p>This is the unique identifier for the campaign.</p>
         * <p>This is the unique identifier for the campaign.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        @JsonSetter("id")
        public OrgIdStage id(@NotNull String id) {
            this.id = Objects.requireNonNull(id, "id must not be null");
            return this;
        }

        /**
         * <p>This is the unique identifier for the org that this campaign belongs to.</p>
         * <p>This is the unique identifier for the org that this campaign belongs to.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        @JsonSetter("orgId")
        public CreatedAtStage orgId(@NotNull String orgId) {
            this.orgId = Objects.requireNonNull(orgId, "orgId must not be null");
            return this;
        }

        /**
         * <p>This is the ISO 8601 date-time string of when the campaign was created.</p>
         * <p>This is the ISO 8601 date-time string of when the campaign was created.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        @JsonSetter("createdAt")
        public UpdatedAtStage createdAt(@NotNull OffsetDateTime createdAt) {
            this.createdAt = Objects.requireNonNull(createdAt, "createdAt must not be null");
            return this;
        }

        /**
         * <p>This is the ISO 8601 date-time string of when the campaign was last updated.</p>
         * <p>This is the ISO 8601 date-time string of when the campaign was last updated.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        @JsonSetter("updatedAt")
        public CallsCounterScheduledStage updatedAt(@NotNull OffsetDateTime updatedAt) {
            this.updatedAt = Objects.requireNonNull(updatedAt, "updatedAt must not be null");
            return this;
        }

        /**
         * <p>This is the number of calls that have been scheduled.</p>
         * <p>This is the number of calls that have been scheduled.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        @JsonSetter("callsCounterScheduled")
        public CallsCounterQueuedStage callsCounterScheduled(double callsCounterScheduled) {
            this.callsCounterScheduled = callsCounterScheduled;
            return this;
        }

        /**
         * <p>This is the number of calls that have been queued.</p>
         * <p>This is the number of calls that have been queued.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        @JsonSetter("callsCounterQueued")
        public CallsCounterInProgressStage callsCounterQueued(double callsCounterQueued) {
            this.callsCounterQueued = callsCounterQueued;
            return this;
        }

        /**
         * <p>This is the number of calls that have been in progress.</p>
         * <p>This is the number of calls that have been in progress.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        @JsonSetter("callsCounterInProgress")
        public CallsCounterEndedVoicemailStage callsCounterInProgress(double callsCounterInProgress) {
            this.callsCounterInProgress = callsCounterInProgress;
            return this;
        }

        /**
         * <p>This is the number of calls whose ended reason is 'voicemail'.</p>
         * <p>This is the number of calls whose ended reason is 'voicemail'.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        @JsonSetter("callsCounterEndedVoicemail")
        public CallsCounterEndedStage callsCounterEndedVoicemail(double callsCounterEndedVoicemail) {
            this.callsCounterEndedVoicemail = callsCounterEndedVoicemail;
            return this;
        }

        /**
         * <p>This is the number of calls that have ended.</p>
         * <p>This is the number of calls that have ended.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        @JsonSetter("callsCounterEnded")
        public _FinalStage callsCounterEnded(double callsCounterEnded) {
            this.callsCounterEnded = callsCounterEnded;
            return this;
        }

        /**
         * <p>This is a map of call IDs to campaign call details.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        public _FinalStage calls(String key, Object value) {
            this.calls.put(key, value);
            return this;
        }

        /**
         * <p>This is a map of call IDs to campaign call details.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        public _FinalStage putAllCalls(Map<String, Object> calls) {
            this.calls.putAll(calls);
            return this;
        }

        /**
         * <p>This is a map of call IDs to campaign call details.</p>
         */
        @java.lang.Override
        @JsonSetter(value = "calls", nulls = Nulls.SKIP)
        public _FinalStage calls(Map<String, Object> calls) {
            this.calls.clear();
            this.calls.putAll(calls);
            return this;
        }

        /**
         * <p>These are the customers that will be called in the campaign.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        public _FinalStage addAllCustomers(List<CreateCustomerDto> customers) {
            this.customers.addAll(customers);
            return this;
        }

        /**
         * <p>These are the customers that will be called in the campaign.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        public _FinalStage addCustomers(CreateCustomerDto customers) {
            this.customers.add(customers);
            return this;
        }

        /**
         * <p>These are the customers that will be called in the campaign.</p>
         */
        @java.lang.Override
        @JsonSetter(value = "customers", nulls = Nulls.SKIP)
        public _FinalStage customers(List<CreateCustomerDto> customers) {
            this.customers.clear();
            this.customers.addAll(customers);
            return this;
        }

        /**
         * <p>This is the schedule plan for the campaign.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        public _FinalStage schedulePlan(SchedulePlan schedulePlan) {
            this.schedulePlan = Optional.ofNullable(schedulePlan);
            return this;
        }

        /**
         * <p>This is the schedule plan for the campaign.</p>
         */
        @java.lang.Override
        @JsonSetter(value = "schedulePlan", nulls = Nulls.SKIP)
        public _FinalStage schedulePlan(Optional<SchedulePlan> schedulePlan) {
            this.schedulePlan = schedulePlan;
            return this;
        }

        /**
         * <p>This is the workflow ID that will be used for the campaign calls. Note: Either assistantId or workflowId can be used, but not both.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        public _FinalStage workflowId(String workflowId) {
            this.workflowId = Optional.ofNullable(workflowId);
            return this;
        }

        /**
         * <p>This is the workflow ID that will be used for the campaign calls. Note: Either assistantId or workflowId can be used, but not both.</p>
         */
        @java.lang.Override
        @JsonSetter(value = "workflowId", nulls = Nulls.SKIP)
        public _FinalStage workflowId(Optional<String> workflowId) {
            this.workflowId = workflowId;
            return this;
        }

        /**
         * <p>This is the assistant ID that will be used for the campaign calls. Note: Either assistantId or workflowId can be used, but not both.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        public _FinalStage assistantId(String assistantId) {
            this.assistantId = Optional.ofNullable(assistantId);
            return this;
        }

        /**
         * <p>This is the assistant ID that will be used for the campaign calls. Note: Either assistantId or workflowId can be used, but not both.</p>
         */
        @java.lang.Override
        @JsonSetter(value = "assistantId", nulls = Nulls.SKIP)
        public _FinalStage assistantId(Optional<String> assistantId) {
            this.assistantId = assistantId;
            return this;
        }

        /**
         * <p>This is the explanation for how the campaign ended.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        public _FinalStage endedReason(CampaignEndedReason endedReason) {
            this.endedReason = Optional.ofNullable(endedReason);
            return this;
        }

        /**
         * <p>This is the explanation for how the campaign ended.</p>
         */
        @java.lang.Override
        @JsonSetter(value = "endedReason", nulls = Nulls.SKIP)
        public _FinalStage endedReason(Optional<CampaignEndedReason> endedReason) {
            this.endedReason = endedReason;
            return this;
        }

        @java.lang.Override
        public Campaign build() {
            return new Campaign(
                    status,
                    endedReason,
                    name,
                    assistantId,
                    workflowId,
                    phoneNumberId,
                    schedulePlan,
                    customers,
                    id,
                    orgId,
                    createdAt,
                    updatedAt,
                    calls,
                    callsCounterScheduled,
                    callsCounterQueued,
                    callsCounterInProgress,
                    callsCounterEndedVoicemail,
                    callsCounterEnded,
                    additionalProperties);
        }
    }
}
