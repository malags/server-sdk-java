/**
 * This file was auto-generated by Fern from our API Definition.
 */
package com.vapi.api.types;

import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.annotation.Nulls;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.vapi.api.core.ObjectMappers;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;

@JsonInclude(JsonInclude.Include.NON_ABSENT)
@JsonDeserialize(builder = AssistantMessage.Builder.class)
public final class AssistantMessage {
    private final Optional<String> content;

    private final Optional<String> refusal;

    private final Optional<List<ToolCall>> toolCalls;

    private final Optional<String> name;

    private final Map<String, Object> additionalProperties;

    private AssistantMessage(
            Optional<String> content,
            Optional<String> refusal,
            Optional<List<ToolCall>> toolCalls,
            Optional<String> name,
            Map<String, Object> additionalProperties) {
        this.content = content;
        this.refusal = refusal;
        this.toolCalls = toolCalls;
        this.name = name;
        this.additionalProperties = additionalProperties;
    }

    /**
     * @return This is the role of the message author
     */
    @JsonProperty("role")
    public String getRole() {
        return "assistant";
    }

    /**
     * @return This is the content of the assistant message
     */
    @JsonProperty("content")
    public Optional<String> getContent() {
        return content;
    }

    /**
     * @return This is the refusal message generated by the model
     */
    @JsonProperty("refusal")
    public Optional<String> getRefusal() {
        return refusal;
    }

    /**
     * @return This is the tool calls generated by the model
     */
    @JsonProperty("tool_calls")
    public Optional<List<ToolCall>> getToolCalls() {
        return toolCalls;
    }

    /**
     * @return This is an optional name for the participant
     */
    @JsonProperty("name")
    public Optional<String> getName() {
        return name;
    }

    @java.lang.Override
    public boolean equals(Object other) {
        if (this == other) return true;
        return other instanceof AssistantMessage && equalTo((AssistantMessage) other);
    }

    @JsonAnyGetter
    public Map<String, Object> getAdditionalProperties() {
        return this.additionalProperties;
    }

    private boolean equalTo(AssistantMessage other) {
        return content.equals(other.content)
                && refusal.equals(other.refusal)
                && toolCalls.equals(other.toolCalls)
                && name.equals(other.name);
    }

    @java.lang.Override
    public int hashCode() {
        return Objects.hash(this.content, this.refusal, this.toolCalls, this.name);
    }

    @java.lang.Override
    public String toString() {
        return ObjectMappers.stringify(this);
    }

    public static Builder builder() {
        return new Builder();
    }

    @JsonIgnoreProperties(ignoreUnknown = true)
    public static final class Builder {
        private Optional<String> content = Optional.empty();

        private Optional<String> refusal = Optional.empty();

        private Optional<List<ToolCall>> toolCalls = Optional.empty();

        private Optional<String> name = Optional.empty();

        @JsonAnySetter
        private Map<String, Object> additionalProperties = new HashMap<>();

        private Builder() {}

        public Builder from(AssistantMessage other) {
            content(other.getContent());
            refusal(other.getRefusal());
            toolCalls(other.getToolCalls());
            name(other.getName());
            return this;
        }

        /**
         * <p>This is the content of the assistant message</p>
         */
        @JsonSetter(value = "content", nulls = Nulls.SKIP)
        public Builder content(Optional<String> content) {
            this.content = content;
            return this;
        }

        public Builder content(String content) {
            this.content = Optional.ofNullable(content);
            return this;
        }

        /**
         * <p>This is the refusal message generated by the model</p>
         */
        @JsonSetter(value = "refusal", nulls = Nulls.SKIP)
        public Builder refusal(Optional<String> refusal) {
            this.refusal = refusal;
            return this;
        }

        public Builder refusal(String refusal) {
            this.refusal = Optional.ofNullable(refusal);
            return this;
        }

        /**
         * <p>This is the tool calls generated by the model</p>
         */
        @JsonSetter(value = "tool_calls", nulls = Nulls.SKIP)
        public Builder toolCalls(Optional<List<ToolCall>> toolCalls) {
            this.toolCalls = toolCalls;
            return this;
        }

        public Builder toolCalls(List<ToolCall> toolCalls) {
            this.toolCalls = Optional.ofNullable(toolCalls);
            return this;
        }

        /**
         * <p>This is an optional name for the participant</p>
         */
        @JsonSetter(value = "name", nulls = Nulls.SKIP)
        public Builder name(Optional<String> name) {
            this.name = name;
            return this;
        }

        public Builder name(String name) {
            this.name = Optional.ofNullable(name);
            return this;
        }

        public AssistantMessage build() {
            return new AssistantMessage(content, refusal, toolCalls, name, additionalProperties);
        }
    }
}
