/**
 * This file was auto-generated by Fern from our API Definition.
 */
package com.vapi.api.types;

import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.annotation.Nulls;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.vapi.api.core.ObjectMappers;
import java.util.HashMap;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;

@JsonInclude(JsonInclude.Include.NON_ABSENT)
@JsonDeserialize(builder = TransportCost.Builder.class)
public final class TransportCost {
    private final Optional<TransportCostProvider> provider;

    private final double minutes;

    private final double cost;

    private final Map<String, Object> additionalProperties;

    private TransportCost(
            Optional<TransportCostProvider> provider,
            double minutes,
            double cost,
            Map<String, Object> additionalProperties) {
        this.provider = provider;
        this.minutes = minutes;
        this.cost = cost;
        this.additionalProperties = additionalProperties;
    }

    @JsonProperty("provider")
    public Optional<TransportCostProvider> getProvider() {
        return provider;
    }

    /**
     * @return This is the minutes of <code>transport</code> usage. This should match <code>call.endedAt</code> - <code>call.startedAt</code>.
     */
    @JsonProperty("minutes")
    public double getMinutes() {
        return minutes;
    }

    /**
     * @return This is the cost of the component in USD.
     */
    @JsonProperty("cost")
    public double getCost() {
        return cost;
    }

    @java.lang.Override
    public boolean equals(Object other) {
        if (this == other) return true;
        return other instanceof TransportCost && equalTo((TransportCost) other);
    }

    @JsonAnyGetter
    public Map<String, Object> getAdditionalProperties() {
        return this.additionalProperties;
    }

    private boolean equalTo(TransportCost other) {
        return provider.equals(other.provider) && minutes == other.minutes && cost == other.cost;
    }

    @java.lang.Override
    public int hashCode() {
        return Objects.hash(this.provider, this.minutes, this.cost);
    }

    @java.lang.Override
    public String toString() {
        return ObjectMappers.stringify(this);
    }

    public static MinutesStage builder() {
        return new Builder();
    }

    public interface MinutesStage {
        /**
         * <p>This is the minutes of <code>transport</code> usage. This should match <code>call.endedAt</code> - <code>call.startedAt</code>.</p>
         */
        CostStage minutes(double minutes);

        Builder from(TransportCost other);
    }

    public interface CostStage {
        /**
         * <p>This is the cost of the component in USD.</p>
         */
        _FinalStage cost(double cost);
    }

    public interface _FinalStage {
        TransportCost build();

        _FinalStage provider(Optional<TransportCostProvider> provider);

        _FinalStage provider(TransportCostProvider provider);
    }

    @JsonIgnoreProperties(ignoreUnknown = true)
    public static final class Builder implements MinutesStage, CostStage, _FinalStage {
        private double minutes;

        private double cost;

        private Optional<TransportCostProvider> provider = Optional.empty();

        @JsonAnySetter
        private Map<String, Object> additionalProperties = new HashMap<>();

        private Builder() {}

        @java.lang.Override
        public Builder from(TransportCost other) {
            provider(other.getProvider());
            minutes(other.getMinutes());
            cost(other.getCost());
            return this;
        }

        /**
         * <p>This is the minutes of <code>transport</code> usage. This should match <code>call.endedAt</code> - <code>call.startedAt</code>.</p>
         * <p>This is the minutes of <code>transport</code> usage. This should match <code>call.endedAt</code> - <code>call.startedAt</code>.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        @JsonSetter("minutes")
        public CostStage minutes(double minutes) {
            this.minutes = minutes;
            return this;
        }

        /**
         * <p>This is the cost of the component in USD.</p>
         * <p>This is the cost of the component in USD.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        @JsonSetter("cost")
        public _FinalStage cost(double cost) {
            this.cost = cost;
            return this;
        }

        @java.lang.Override
        public _FinalStage provider(TransportCostProvider provider) {
            this.provider = Optional.ofNullable(provider);
            return this;
        }

        @java.lang.Override
        @JsonSetter(value = "provider", nulls = Nulls.SKIP)
        public _FinalStage provider(Optional<TransportCostProvider> provider) {
            this.provider = provider;
            return this;
        }

        @java.lang.Override
        public TransportCost build() {
            return new TransportCost(provider, minutes, cost, additionalProperties);
        }
    }
}
