/**
 * This file was auto-generated by Fern from our API Definition.
 */
package com.vapi.api.types;

import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.annotation.Nulls;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.vapi.api.core.ObjectMappers;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import org.jetbrains.annotations.NotNull;

@JsonInclude(JsonInclude.Include.NON_ABSENT)
@JsonDeserialize(builder = ResponseOutputText.Builder.class)
public final class ResponseOutputText {
    private final List<Map<String, Object>> annotations;

    private final String text;

    private final Map<String, Object> additionalProperties;

    private ResponseOutputText(
            List<Map<String, Object>> annotations, String text, Map<String, Object> additionalProperties) {
        this.annotations = annotations;
        this.text = text;
        this.additionalProperties = additionalProperties;
    }

    /**
     * @return Annotations in the text output
     */
    @JsonProperty("annotations")
    public List<Map<String, Object>> getAnnotations() {
        return annotations;
    }

    /**
     * @return The text output from the model
     */
    @JsonProperty("text")
    public String getText() {
        return text;
    }

    /**
     * @return The type of the output text
     */
    @JsonProperty("type")
    public String getType() {
        return "output_text";
    }

    @java.lang.Override
    public boolean equals(Object other) {
        if (this == other) return true;
        return other instanceof ResponseOutputText && equalTo((ResponseOutputText) other);
    }

    @JsonAnyGetter
    public Map<String, Object> getAdditionalProperties() {
        return this.additionalProperties;
    }

    private boolean equalTo(ResponseOutputText other) {
        return annotations.equals(other.annotations) && text.equals(other.text);
    }

    @java.lang.Override
    public int hashCode() {
        return Objects.hash(this.annotations, this.text);
    }

    @java.lang.Override
    public String toString() {
        return ObjectMappers.stringify(this);
    }

    public static TextStage builder() {
        return new Builder();
    }

    public interface TextStage {
        /**
         * <p>The text output from the model</p>
         */
        _FinalStage text(@NotNull String text);

        Builder from(ResponseOutputText other);
    }

    public interface _FinalStage {
        ResponseOutputText build();

        /**
         * <p>Annotations in the text output</p>
         */
        _FinalStage annotations(List<Map<String, Object>> annotations);

        _FinalStage addAnnotations(Map<String, Object> annotations);

        _FinalStage addAllAnnotations(List<Map<String, Object>> annotations);
    }

    @JsonIgnoreProperties(ignoreUnknown = true)
    public static final class Builder implements TextStage, _FinalStage {
        private String text;

        private List<Map<String, Object>> annotations = new ArrayList<>();

        @JsonAnySetter
        private Map<String, Object> additionalProperties = new HashMap<>();

        private Builder() {}

        @java.lang.Override
        public Builder from(ResponseOutputText other) {
            annotations(other.getAnnotations());
            text(other.getText());
            return this;
        }

        /**
         * <p>The text output from the model</p>
         * <p>The text output from the model</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        @JsonSetter("text")
        public _FinalStage text(@NotNull String text) {
            this.text = Objects.requireNonNull(text, "text must not be null");
            return this;
        }

        /**
         * <p>Annotations in the text output</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        public _FinalStage addAllAnnotations(List<Map<String, Object>> annotations) {
            this.annotations.addAll(annotations);
            return this;
        }

        /**
         * <p>Annotations in the text output</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        public _FinalStage addAnnotations(Map<String, Object> annotations) {
            this.annotations.add(annotations);
            return this;
        }

        /**
         * <p>Annotations in the text output</p>
         */
        @java.lang.Override
        @JsonSetter(value = "annotations", nulls = Nulls.SKIP)
        public _FinalStage annotations(List<Map<String, Object>> annotations) {
            this.annotations.clear();
            this.annotations.addAll(annotations);
            return this;
        }

        @java.lang.Override
        public ResponseOutputText build() {
            return new ResponseOutputText(annotations, text, additionalProperties);
        }
    }
}
