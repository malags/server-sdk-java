/**
 * This file was auto-generated by Fern from our API Definition.
 */
package com.vapi.api.types;

import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.annotation.Nulls;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.vapi.api.core.ObjectMappers;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;

@JsonInclude(JsonInclude.Include.NON_ABSENT)
@JsonDeserialize(builder = UpdateTestSuiteTestVoiceDto.Builder.class)
public final class UpdateTestSuiteTestVoiceDto {
    private final Optional<List<TestSuiteTestScorerAi>> scorers;

    private final Optional<String> name;

    private final Optional<String> script;

    private final Optional<Double> numAttempts;

    private final Map<String, Object> additionalProperties;

    private UpdateTestSuiteTestVoiceDto(
            Optional<List<TestSuiteTestScorerAi>> scorers,
            Optional<String> name,
            Optional<String> script,
            Optional<Double> numAttempts,
            Map<String, Object> additionalProperties) {
        this.scorers = scorers;
        this.name = name;
        this.script = script;
        this.numAttempts = numAttempts;
        this.additionalProperties = additionalProperties;
    }

    /**
     * @return These are the scorers used to evaluate the test.
     */
    @JsonProperty("scorers")
    public Optional<List<TestSuiteTestScorerAi>> getScorers() {
        return scorers;
    }

    /**
     * @return This is the name of the test.
     */
    @JsonProperty("name")
    public Optional<String> getName() {
        return name;
    }

    /**
     * @return This is the script to be used for the voice test.
     */
    @JsonProperty("script")
    public Optional<String> getScript() {
        return script;
    }

    /**
     * @return This is the number of attempts allowed for the test.
     */
    @JsonProperty("numAttempts")
    public Optional<Double> getNumAttempts() {
        return numAttempts;
    }

    @java.lang.Override
    public boolean equals(Object other) {
        if (this == other) return true;
        return other instanceof UpdateTestSuiteTestVoiceDto && equalTo((UpdateTestSuiteTestVoiceDto) other);
    }

    @JsonAnyGetter
    public Map<String, Object> getAdditionalProperties() {
        return this.additionalProperties;
    }

    private boolean equalTo(UpdateTestSuiteTestVoiceDto other) {
        return scorers.equals(other.scorers)
                && name.equals(other.name)
                && script.equals(other.script)
                && numAttempts.equals(other.numAttempts);
    }

    @java.lang.Override
    public int hashCode() {
        return Objects.hash(this.scorers, this.name, this.script, this.numAttempts);
    }

    @java.lang.Override
    public String toString() {
        return ObjectMappers.stringify(this);
    }

    public static Builder builder() {
        return new Builder();
    }

    @JsonIgnoreProperties(ignoreUnknown = true)
    public static final class Builder {
        private Optional<List<TestSuiteTestScorerAi>> scorers = Optional.empty();

        private Optional<String> name = Optional.empty();

        private Optional<String> script = Optional.empty();

        private Optional<Double> numAttempts = Optional.empty();

        @JsonAnySetter
        private Map<String, Object> additionalProperties = new HashMap<>();

        private Builder() {}

        public Builder from(UpdateTestSuiteTestVoiceDto other) {
            scorers(other.getScorers());
            name(other.getName());
            script(other.getScript());
            numAttempts(other.getNumAttempts());
            return this;
        }

        /**
         * <p>These are the scorers used to evaluate the test.</p>
         */
        @JsonSetter(value = "scorers", nulls = Nulls.SKIP)
        public Builder scorers(Optional<List<TestSuiteTestScorerAi>> scorers) {
            this.scorers = scorers;
            return this;
        }

        public Builder scorers(List<TestSuiteTestScorerAi> scorers) {
            this.scorers = Optional.ofNullable(scorers);
            return this;
        }

        /**
         * <p>This is the name of the test.</p>
         */
        @JsonSetter(value = "name", nulls = Nulls.SKIP)
        public Builder name(Optional<String> name) {
            this.name = name;
            return this;
        }

        public Builder name(String name) {
            this.name = Optional.ofNullable(name);
            return this;
        }

        /**
         * <p>This is the script to be used for the voice test.</p>
         */
        @JsonSetter(value = "script", nulls = Nulls.SKIP)
        public Builder script(Optional<String> script) {
            this.script = script;
            return this;
        }

        public Builder script(String script) {
            this.script = Optional.ofNullable(script);
            return this;
        }

        /**
         * <p>This is the number of attempts allowed for the test.</p>
         */
        @JsonSetter(value = "numAttempts", nulls = Nulls.SKIP)
        public Builder numAttempts(Optional<Double> numAttempts) {
            this.numAttempts = numAttempts;
            return this;
        }

        public Builder numAttempts(Double numAttempts) {
            this.numAttempts = Optional.ofNullable(numAttempts);
            return this;
        }

        public UpdateTestSuiteTestVoiceDto build() {
            return new UpdateTestSuiteTestVoiceDto(scorers, name, script, numAttempts, additionalProperties);
        }
    }
}
