/**
 * This file was auto-generated by Fern from our API Definition.
 */
package com.vapi.api.types;

import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.annotation.Nulls;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.vapi.api.core.ObjectMappers;
import java.util.HashMap;
import java.util.LinkedHashMap;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;

@JsonInclude(JsonInclude.Include.NON_ABSENT)
@JsonDeserialize(builder = OpenAiFunctionParameters.Builder.class)
public final class OpenAiFunctionParameters {
    private final Map<String, JsonSchema> properties;

    private final Optional<List<String>> required;

    private final Map<String, Object> additionalProperties;

    private OpenAiFunctionParameters(
            Map<String, JsonSchema> properties,
            Optional<List<String>> required,
            Map<String, Object> additionalProperties) {
        this.properties = properties;
        this.required = required;
        this.additionalProperties = additionalProperties;
    }

    /**
     * @return This must be set to 'object'. It instructs the model to return a JSON object containing the function call properties.
     */
    @JsonProperty("type")
    public String getType() {
        return "object";
    }

    /**
     * @return This provides a description of the properties required by the function.
     * JSON Schema can be used to specify expectations for each property.
     * Refer to <a href="https://ajv.js.org/json-schema.html#json-data-type">this doc</a> for a comprehensive guide on JSON Schema.
     */
    @JsonProperty("properties")
    public Map<String, JsonSchema> getProperties() {
        return properties;
    }

    /**
     * @return This specifies the properties that are required by the function.
     */
    @JsonProperty("required")
    public Optional<List<String>> getRequired() {
        return required;
    }

    @java.lang.Override
    public boolean equals(Object other) {
        if (this == other) return true;
        return other instanceof OpenAiFunctionParameters && equalTo((OpenAiFunctionParameters) other);
    }

    @JsonAnyGetter
    public Map<String, Object> getAdditionalProperties() {
        return this.additionalProperties;
    }

    private boolean equalTo(OpenAiFunctionParameters other) {
        return properties.equals(other.properties) && required.equals(other.required);
    }

    @java.lang.Override
    public int hashCode() {
        return Objects.hash(this.properties, this.required);
    }

    @java.lang.Override
    public String toString() {
        return ObjectMappers.stringify(this);
    }

    public static Builder builder() {
        return new Builder();
    }

    @JsonIgnoreProperties(ignoreUnknown = true)
    public static final class Builder {
        private Map<String, JsonSchema> properties = new LinkedHashMap<>();

        private Optional<List<String>> required = Optional.empty();

        @JsonAnySetter
        private Map<String, Object> additionalProperties = new HashMap<>();

        private Builder() {}

        public Builder from(OpenAiFunctionParameters other) {
            properties(other.getProperties());
            required(other.getRequired());
            return this;
        }

        /**
         * <p>This provides a description of the properties required by the function.
         * JSON Schema can be used to specify expectations for each property.
         * Refer to <a href="https://ajv.js.org/json-schema.html#json-data-type">this doc</a> for a comprehensive guide on JSON Schema.</p>
         */
        @JsonSetter(value = "properties", nulls = Nulls.SKIP)
        public Builder properties(Map<String, JsonSchema> properties) {
            this.properties.clear();
            this.properties.putAll(properties);
            return this;
        }

        public Builder putAllProperties(Map<String, JsonSchema> properties) {
            this.properties.putAll(properties);
            return this;
        }

        public Builder properties(String key, JsonSchema value) {
            this.properties.put(key, value);
            return this;
        }

        /**
         * <p>This specifies the properties that are required by the function.</p>
         */
        @JsonSetter(value = "required", nulls = Nulls.SKIP)
        public Builder required(Optional<List<String>> required) {
            this.required = required;
            return this;
        }

        public Builder required(List<String> required) {
            this.required = Optional.ofNullable(required);
            return this;
        }

        public OpenAiFunctionParameters build() {
            return new OpenAiFunctionParameters(properties, required, additionalProperties);
        }
    }
}
