/**
 * This file was auto-generated by Fern from our API Definition.
 */
package com.vapi.api.types;

import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.annotation.Nulls;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.vapi.api.core.ObjectMappers;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Objects;

@JsonInclude(JsonInclude.Include.NON_ABSENT)
@JsonDeserialize(builder = FallbackPlan.Builder.class)
public final class FallbackPlan {
    private final List<FallbackPlanVoicesItem> voices;

    private final Map<String, Object> additionalProperties;

    private FallbackPlan(List<FallbackPlanVoicesItem> voices, Map<String, Object> additionalProperties) {
        this.voices = voices;
        this.additionalProperties = additionalProperties;
    }

    /**
     * @return This is the list of voices to fallback to in the event that the primary voice provider fails.
     */
    @JsonProperty("voices")
    public List<FallbackPlanVoicesItem> getVoices() {
        return voices;
    }

    @java.lang.Override
    public boolean equals(Object other) {
        if (this == other) return true;
        return other instanceof FallbackPlan && equalTo((FallbackPlan) other);
    }

    @JsonAnyGetter
    public Map<String, Object> getAdditionalProperties() {
        return this.additionalProperties;
    }

    private boolean equalTo(FallbackPlan other) {
        return voices.equals(other.voices);
    }

    @java.lang.Override
    public int hashCode() {
        return Objects.hash(this.voices);
    }

    @java.lang.Override
    public String toString() {
        return ObjectMappers.stringify(this);
    }

    public static Builder builder() {
        return new Builder();
    }

    @JsonIgnoreProperties(ignoreUnknown = true)
    public static final class Builder {
        private List<FallbackPlanVoicesItem> voices = new ArrayList<>();

        @JsonAnySetter
        private Map<String, Object> additionalProperties = new HashMap<>();

        private Builder() {}

        public Builder from(FallbackPlan other) {
            voices(other.getVoices());
            return this;
        }

        /**
         * <p>This is the list of voices to fallback to in the event that the primary voice provider fails.</p>
         */
        @JsonSetter(value = "voices", nulls = Nulls.SKIP)
        public Builder voices(List<FallbackPlanVoicesItem> voices) {
            this.voices.clear();
            this.voices.addAll(voices);
            return this;
        }

        public Builder addVoices(FallbackPlanVoicesItem voices) {
            this.voices.add(voices);
            return this;
        }

        public Builder addAllVoices(List<FallbackPlanVoicesItem> voices) {
            this.voices.addAll(voices);
            return this;
        }

        public FallbackPlan build() {
            return new FallbackPlan(voices, additionalProperties);
        }
    }
}
