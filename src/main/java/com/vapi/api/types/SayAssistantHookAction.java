/**
 * This file was auto-generated by Fern from our API Definition.
 */
package com.vapi.api.types;

import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.annotation.Nulls;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.vapi.api.core.ObjectMappers;
import java.util.HashMap;
import java.util.LinkedHashMap;
import java.util.Map;
import java.util.Objects;

@JsonInclude(JsonInclude.Include.NON_ABSENT)
@JsonDeserialize(builder = SayAssistantHookAction.Builder.class)
public final class SayAssistantHookAction {
    private final Map<String, Object> exact;

    private final Map<String, Object> additionalProperties;

    private SayAssistantHookAction(Map<String, Object> exact, Map<String, Object> additionalProperties) {
        this.exact = exact;
        this.additionalProperties = additionalProperties;
    }

    /**
     * @return This is the message to say
     */
    @JsonProperty("exact")
    public Map<String, Object> getExact() {
        return exact;
    }

    @java.lang.Override
    public boolean equals(Object other) {
        if (this == other) return true;
        return other instanceof SayAssistantHookAction && equalTo((SayAssistantHookAction) other);
    }

    @JsonAnyGetter
    public Map<String, Object> getAdditionalProperties() {
        return this.additionalProperties;
    }

    private boolean equalTo(SayAssistantHookAction other) {
        return exact.equals(other.exact);
    }

    @java.lang.Override
    public int hashCode() {
        return Objects.hash(this.exact);
    }

    @java.lang.Override
    public String toString() {
        return ObjectMappers.stringify(this);
    }

    public static Builder builder() {
        return new Builder();
    }

    @JsonIgnoreProperties(ignoreUnknown = true)
    public static final class Builder {
        private Map<String, Object> exact = new LinkedHashMap<>();

        @JsonAnySetter
        private Map<String, Object> additionalProperties = new HashMap<>();

        private Builder() {}

        public Builder from(SayAssistantHookAction other) {
            exact(other.getExact());
            return this;
        }

        /**
         * <p>This is the message to say</p>
         */
        @JsonSetter(value = "exact", nulls = Nulls.SKIP)
        public Builder exact(Map<String, Object> exact) {
            this.exact.clear();
            this.exact.putAll(exact);
            return this;
        }

        public Builder putAllExact(Map<String, Object> exact) {
            this.exact.putAll(exact);
            return this;
        }

        public Builder exact(String key, Object value) {
            this.exact.put(key, value);
            return this;
        }

        public SayAssistantHookAction build() {
            return new SayAssistantHookAction(exact, additionalProperties);
        }
    }
}
