/**
 * This file was auto-generated by Fern from our API Definition.
 */
package com.vapi.api.types;

import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.annotation.Nulls;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.vapi.api.core.ObjectMappers;
import java.time.OffsetDateTime;
import java.util.HashMap;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import org.jetbrains.annotations.NotNull;

@JsonInclude(JsonInclude.Include.NON_ABSENT)
@JsonDeserialize(builder = Org.Builder.class)
public final class Org {
    private final Optional<Boolean> hipaaEnabled;

    private final Optional<Subscription> subscription;

    private final Optional<String> subscriptionId;

    private final String id;

    private final OffsetDateTime createdAt;

    private final OffsetDateTime updatedAt;

    private final Optional<String> stripeCustomerId;

    private final Optional<String> stripeSubscriptionId;

    private final Optional<String> stripeSubscriptionItemId;

    private final Optional<OffsetDateTime> stripeSubscriptionCurrentPeriodStart;

    private final Optional<String> stripeSubscriptionStatus;

    private final Optional<OrgPlan> plan;

    private final Optional<String> jwtSecret;

    private final Optional<Double> minutesUsed;

    private final Optional<String> name;

    private final Optional<OrgChannel> channel;

    private final Optional<Double> billingLimit;

    private final Optional<Server> server;

    private final Optional<Double> concurrencyLimit;

    private final Optional<CompliancePlan> compliancePlan;

    private final Map<String, Object> additionalProperties;

    private Org(
            Optional<Boolean> hipaaEnabled,
            Optional<Subscription> subscription,
            Optional<String> subscriptionId,
            String id,
            OffsetDateTime createdAt,
            OffsetDateTime updatedAt,
            Optional<String> stripeCustomerId,
            Optional<String> stripeSubscriptionId,
            Optional<String> stripeSubscriptionItemId,
            Optional<OffsetDateTime> stripeSubscriptionCurrentPeriodStart,
            Optional<String> stripeSubscriptionStatus,
            Optional<OrgPlan> plan,
            Optional<String> jwtSecret,
            Optional<Double> minutesUsed,
            Optional<String> name,
            Optional<OrgChannel> channel,
            Optional<Double> billingLimit,
            Optional<Server> server,
            Optional<Double> concurrencyLimit,
            Optional<CompliancePlan> compliancePlan,
            Map<String, Object> additionalProperties) {
        this.hipaaEnabled = hipaaEnabled;
        this.subscription = subscription;
        this.subscriptionId = subscriptionId;
        this.id = id;
        this.createdAt = createdAt;
        this.updatedAt = updatedAt;
        this.stripeCustomerId = stripeCustomerId;
        this.stripeSubscriptionId = stripeSubscriptionId;
        this.stripeSubscriptionItemId = stripeSubscriptionItemId;
        this.stripeSubscriptionCurrentPeriodStart = stripeSubscriptionCurrentPeriodStart;
        this.stripeSubscriptionStatus = stripeSubscriptionStatus;
        this.plan = plan;
        this.jwtSecret = jwtSecret;
        this.minutesUsed = minutesUsed;
        this.name = name;
        this.channel = channel;
        this.billingLimit = billingLimit;
        this.server = server;
        this.concurrencyLimit = concurrencyLimit;
        this.compliancePlan = compliancePlan;
        this.additionalProperties = additionalProperties;
    }

    /**
     * @return When this is enabled, no logs, recordings, or transcriptions will be stored. At the end of the call, you will still receive an end-of-call-report message to store on your server. Defaults to false.
     * When HIPAA is enabled, only OpenAI/Custom LLM or Azure Providers will be available for LLM and Voice respectively.
     * This is due to the compliance requirements of HIPAA. Other providers may not meet these requirements.
     */
    @JsonProperty("hipaaEnabled")
    public Optional<Boolean> getHipaaEnabled() {
        return hipaaEnabled;
    }

    @JsonProperty("subscription")
    public Optional<Subscription> getSubscription() {
        return subscription;
    }

    /**
     * @return This is the ID of the subscription the org belongs to.
     */
    @JsonProperty("subscriptionId")
    public Optional<String> getSubscriptionId() {
        return subscriptionId;
    }

    /**
     * @return This is the unique identifier for the org.
     */
    @JsonProperty("id")
    public String getId() {
        return id;
    }

    /**
     * @return This is the ISO 8601 date-time string of when the org was created.
     */
    @JsonProperty("createdAt")
    public OffsetDateTime getCreatedAt() {
        return createdAt;
    }

    /**
     * @return This is the ISO 8601 date-time string of when the org was last updated.
     */
    @JsonProperty("updatedAt")
    public OffsetDateTime getUpdatedAt() {
        return updatedAt;
    }

    /**
     * @return This is the Stripe customer for the org.
     */
    @JsonProperty("stripeCustomerId")
    public Optional<String> getStripeCustomerId() {
        return stripeCustomerId;
    }

    /**
     * @return This is the subscription for the org.
     */
    @JsonProperty("stripeSubscriptionId")
    public Optional<String> getStripeSubscriptionId() {
        return stripeSubscriptionId;
    }

    /**
     * @return This is the subscription's subscription item.
     */
    @JsonProperty("stripeSubscriptionItemId")
    public Optional<String> getStripeSubscriptionItemId() {
        return stripeSubscriptionItemId;
    }

    /**
     * @return This is the subscription's current period start.
     */
    @JsonProperty("stripeSubscriptionCurrentPeriodStart")
    public Optional<OffsetDateTime> getStripeSubscriptionCurrentPeriodStart() {
        return stripeSubscriptionCurrentPeriodStart;
    }

    /**
     * @return This is the subscription's status.
     */
    @JsonProperty("stripeSubscriptionStatus")
    public Optional<String> getStripeSubscriptionStatus() {
        return stripeSubscriptionStatus;
    }

    /**
     * @return This is the plan for the org.
     */
    @JsonProperty("plan")
    public Optional<OrgPlan> getPlan() {
        return plan;
    }

    /**
     * @return This is the secret key used for signing JWT tokens for the org.
     */
    @JsonProperty("jwtSecret")
    public Optional<String> getJwtSecret() {
        return jwtSecret;
    }

    /**
     * @return This is the total number of call minutes used by this org across all time.
     */
    @JsonProperty("minutesUsed")
    public Optional<Double> getMinutesUsed() {
        return minutesUsed;
    }

    /**
     * @return This is the name of the org. This is just for your own reference.
     */
    @JsonProperty("name")
    public Optional<String> getName() {
        return name;
    }

    /**
     * @return This is the channel of the org. There is the cluster the API traffic for the org will be directed.
     */
    @JsonProperty("channel")
    public Optional<OrgChannel> getChannel() {
        return channel;
    }

    /**
     * @return This is the monthly billing limit for the org. To go beyond $1000/mo, please contact us at support@vapi.ai.
     */
    @JsonProperty("billingLimit")
    public Optional<Double> getBillingLimit() {
        return billingLimit;
    }

    /**
     * @return This is where Vapi will send webhooks. You can find all webhooks available along with their shape in ServerMessage schema.
     * <p>The order of precedence is:</p>
     * <ol>
     * <li>assistant.server</li>
     * <li>phoneNumber.server</li>
     * <li>org.server</li>
     * </ol>
     */
    @JsonProperty("server")
    public Optional<Server> getServer() {
        return server;
    }

    /**
     * @return This is the concurrency limit for the org. This is the maximum number of calls that can be active at any given time. To go beyond 10, please contact us at support@vapi.ai.
     */
    @JsonProperty("concurrencyLimit")
    public Optional<Double> getConcurrencyLimit() {
        return concurrencyLimit;
    }

    /**
     * @return Stores the information about the compliance plan enforced at the organization level. Currently pciEnabled is supported through this field.
     * When this is enabled, any logs, recordings, or transcriptions will be shipped to the customer endpoints if provided else lost.
     * At the end of the call, you will receive an end-of-call-report message to store on your server, if webhook is provided.
     * Defaults to false.
     * When PCI is enabled, only PCI-compliant Providers will be available for LLM, Voice and transcribers.
     * This is due to the compliance requirements of PCI. Other providers may not meet these requirements.
     */
    @JsonProperty("compliancePlan")
    public Optional<CompliancePlan> getCompliancePlan() {
        return compliancePlan;
    }

    @java.lang.Override
    public boolean equals(Object other) {
        if (this == other) return true;
        return other instanceof Org && equalTo((Org) other);
    }

    @JsonAnyGetter
    public Map<String, Object> getAdditionalProperties() {
        return this.additionalProperties;
    }

    private boolean equalTo(Org other) {
        return hipaaEnabled.equals(other.hipaaEnabled)
                && subscription.equals(other.subscription)
                && subscriptionId.equals(other.subscriptionId)
                && id.equals(other.id)
                && createdAt.equals(other.createdAt)
                && updatedAt.equals(other.updatedAt)
                && stripeCustomerId.equals(other.stripeCustomerId)
                && stripeSubscriptionId.equals(other.stripeSubscriptionId)
                && stripeSubscriptionItemId.equals(other.stripeSubscriptionItemId)
                && stripeSubscriptionCurrentPeriodStart.equals(other.stripeSubscriptionCurrentPeriodStart)
                && stripeSubscriptionStatus.equals(other.stripeSubscriptionStatus)
                && plan.equals(other.plan)
                && jwtSecret.equals(other.jwtSecret)
                && minutesUsed.equals(other.minutesUsed)
                && name.equals(other.name)
                && channel.equals(other.channel)
                && billingLimit.equals(other.billingLimit)
                && server.equals(other.server)
                && concurrencyLimit.equals(other.concurrencyLimit)
                && compliancePlan.equals(other.compliancePlan);
    }

    @java.lang.Override
    public int hashCode() {
        return Objects.hash(
                this.hipaaEnabled,
                this.subscription,
                this.subscriptionId,
                this.id,
                this.createdAt,
                this.updatedAt,
                this.stripeCustomerId,
                this.stripeSubscriptionId,
                this.stripeSubscriptionItemId,
                this.stripeSubscriptionCurrentPeriodStart,
                this.stripeSubscriptionStatus,
                this.plan,
                this.jwtSecret,
                this.minutesUsed,
                this.name,
                this.channel,
                this.billingLimit,
                this.server,
                this.concurrencyLimit,
                this.compliancePlan);
    }

    @java.lang.Override
    public String toString() {
        return ObjectMappers.stringify(this);
    }

    public static IdStage builder() {
        return new Builder();
    }

    public interface IdStage {
        /**
         * <p>This is the unique identifier for the org.</p>
         */
        CreatedAtStage id(@NotNull String id);

        Builder from(Org other);
    }

    public interface CreatedAtStage {
        /**
         * <p>This is the ISO 8601 date-time string of when the org was created.</p>
         */
        UpdatedAtStage createdAt(@NotNull OffsetDateTime createdAt);
    }

    public interface UpdatedAtStage {
        /**
         * <p>This is the ISO 8601 date-time string of when the org was last updated.</p>
         */
        _FinalStage updatedAt(@NotNull OffsetDateTime updatedAt);
    }

    public interface _FinalStage {
        Org build();

        /**
         * <p>When this is enabled, no logs, recordings, or transcriptions will be stored. At the end of the call, you will still receive an end-of-call-report message to store on your server. Defaults to false.
         * When HIPAA is enabled, only OpenAI/Custom LLM or Azure Providers will be available for LLM and Voice respectively.
         * This is due to the compliance requirements of HIPAA. Other providers may not meet these requirements.</p>
         */
        _FinalStage hipaaEnabled(Optional<Boolean> hipaaEnabled);

        _FinalStage hipaaEnabled(Boolean hipaaEnabled);

        _FinalStage subscription(Optional<Subscription> subscription);

        _FinalStage subscription(Subscription subscription);

        /**
         * <p>This is the ID of the subscription the org belongs to.</p>
         */
        _FinalStage subscriptionId(Optional<String> subscriptionId);

        _FinalStage subscriptionId(String subscriptionId);

        /**
         * <p>This is the Stripe customer for the org.</p>
         */
        _FinalStage stripeCustomerId(Optional<String> stripeCustomerId);

        _FinalStage stripeCustomerId(String stripeCustomerId);

        /**
         * <p>This is the subscription for the org.</p>
         */
        _FinalStage stripeSubscriptionId(Optional<String> stripeSubscriptionId);

        _FinalStage stripeSubscriptionId(String stripeSubscriptionId);

        /**
         * <p>This is the subscription's subscription item.</p>
         */
        _FinalStage stripeSubscriptionItemId(Optional<String> stripeSubscriptionItemId);

        _FinalStage stripeSubscriptionItemId(String stripeSubscriptionItemId);

        /**
         * <p>This is the subscription's current period start.</p>
         */
        _FinalStage stripeSubscriptionCurrentPeriodStart(Optional<OffsetDateTime> stripeSubscriptionCurrentPeriodStart);

        _FinalStage stripeSubscriptionCurrentPeriodStart(OffsetDateTime stripeSubscriptionCurrentPeriodStart);

        /**
         * <p>This is the subscription's status.</p>
         */
        _FinalStage stripeSubscriptionStatus(Optional<String> stripeSubscriptionStatus);

        _FinalStage stripeSubscriptionStatus(String stripeSubscriptionStatus);

        /**
         * <p>This is the plan for the org.</p>
         */
        _FinalStage plan(Optional<OrgPlan> plan);

        _FinalStage plan(OrgPlan plan);

        /**
         * <p>This is the secret key used for signing JWT tokens for the org.</p>
         */
        _FinalStage jwtSecret(Optional<String> jwtSecret);

        _FinalStage jwtSecret(String jwtSecret);

        /**
         * <p>This is the total number of call minutes used by this org across all time.</p>
         */
        _FinalStage minutesUsed(Optional<Double> minutesUsed);

        _FinalStage minutesUsed(Double minutesUsed);

        /**
         * <p>This is the name of the org. This is just for your own reference.</p>
         */
        _FinalStage name(Optional<String> name);

        _FinalStage name(String name);

        /**
         * <p>This is the channel of the org. There is the cluster the API traffic for the org will be directed.</p>
         */
        _FinalStage channel(Optional<OrgChannel> channel);

        _FinalStage channel(OrgChannel channel);

        /**
         * <p>This is the monthly billing limit for the org. To go beyond $1000/mo, please contact us at support@vapi.ai.</p>
         */
        _FinalStage billingLimit(Optional<Double> billingLimit);

        _FinalStage billingLimit(Double billingLimit);

        /**
         * <p>This is where Vapi will send webhooks. You can find all webhooks available along with their shape in ServerMessage schema.</p>
         * <p>The order of precedence is:</p>
         * <ol>
         * <li>assistant.server</li>
         * <li>phoneNumber.server</li>
         * <li>org.server</li>
         * </ol>
         */
        _FinalStage server(Optional<Server> server);

        _FinalStage server(Server server);

        /**
         * <p>This is the concurrency limit for the org. This is the maximum number of calls that can be active at any given time. To go beyond 10, please contact us at support@vapi.ai.</p>
         */
        _FinalStage concurrencyLimit(Optional<Double> concurrencyLimit);

        _FinalStage concurrencyLimit(Double concurrencyLimit);

        /**
         * <p>Stores the information about the compliance plan enforced at the organization level. Currently pciEnabled is supported through this field.
         * When this is enabled, any logs, recordings, or transcriptions will be shipped to the customer endpoints if provided else lost.
         * At the end of the call, you will receive an end-of-call-report message to store on your server, if webhook is provided.
         * Defaults to false.
         * When PCI is enabled, only PCI-compliant Providers will be available for LLM, Voice and transcribers.
         * This is due to the compliance requirements of PCI. Other providers may not meet these requirements.</p>
         */
        _FinalStage compliancePlan(Optional<CompliancePlan> compliancePlan);

        _FinalStage compliancePlan(CompliancePlan compliancePlan);
    }

    @JsonIgnoreProperties(ignoreUnknown = true)
    public static final class Builder implements IdStage, CreatedAtStage, UpdatedAtStage, _FinalStage {
        private String id;

        private OffsetDateTime createdAt;

        private OffsetDateTime updatedAt;

        private Optional<CompliancePlan> compliancePlan = Optional.empty();

        private Optional<Double> concurrencyLimit = Optional.empty();

        private Optional<Server> server = Optional.empty();

        private Optional<Double> billingLimit = Optional.empty();

        private Optional<OrgChannel> channel = Optional.empty();

        private Optional<String> name = Optional.empty();

        private Optional<Double> minutesUsed = Optional.empty();

        private Optional<String> jwtSecret = Optional.empty();

        private Optional<OrgPlan> plan = Optional.empty();

        private Optional<String> stripeSubscriptionStatus = Optional.empty();

        private Optional<OffsetDateTime> stripeSubscriptionCurrentPeriodStart = Optional.empty();

        private Optional<String> stripeSubscriptionItemId = Optional.empty();

        private Optional<String> stripeSubscriptionId = Optional.empty();

        private Optional<String> stripeCustomerId = Optional.empty();

        private Optional<String> subscriptionId = Optional.empty();

        private Optional<Subscription> subscription = Optional.empty();

        private Optional<Boolean> hipaaEnabled = Optional.empty();

        @JsonAnySetter
        private Map<String, Object> additionalProperties = new HashMap<>();

        private Builder() {}

        @java.lang.Override
        public Builder from(Org other) {
            hipaaEnabled(other.getHipaaEnabled());
            subscription(other.getSubscription());
            subscriptionId(other.getSubscriptionId());
            id(other.getId());
            createdAt(other.getCreatedAt());
            updatedAt(other.getUpdatedAt());
            stripeCustomerId(other.getStripeCustomerId());
            stripeSubscriptionId(other.getStripeSubscriptionId());
            stripeSubscriptionItemId(other.getStripeSubscriptionItemId());
            stripeSubscriptionCurrentPeriodStart(other.getStripeSubscriptionCurrentPeriodStart());
            stripeSubscriptionStatus(other.getStripeSubscriptionStatus());
            plan(other.getPlan());
            jwtSecret(other.getJwtSecret());
            minutesUsed(other.getMinutesUsed());
            name(other.getName());
            channel(other.getChannel());
            billingLimit(other.getBillingLimit());
            server(other.getServer());
            concurrencyLimit(other.getConcurrencyLimit());
            compliancePlan(other.getCompliancePlan());
            return this;
        }

        /**
         * <p>This is the unique identifier for the org.</p>
         * <p>This is the unique identifier for the org.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        @JsonSetter("id")
        public CreatedAtStage id(@NotNull String id) {
            this.id = Objects.requireNonNull(id, "id must not be null");
            return this;
        }

        /**
         * <p>This is the ISO 8601 date-time string of when the org was created.</p>
         * <p>This is the ISO 8601 date-time string of when the org was created.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        @JsonSetter("createdAt")
        public UpdatedAtStage createdAt(@NotNull OffsetDateTime createdAt) {
            this.createdAt = Objects.requireNonNull(createdAt, "createdAt must not be null");
            return this;
        }

        /**
         * <p>This is the ISO 8601 date-time string of when the org was last updated.</p>
         * <p>This is the ISO 8601 date-time string of when the org was last updated.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        @JsonSetter("updatedAt")
        public _FinalStage updatedAt(@NotNull OffsetDateTime updatedAt) {
            this.updatedAt = Objects.requireNonNull(updatedAt, "updatedAt must not be null");
            return this;
        }

        /**
         * <p>Stores the information about the compliance plan enforced at the organization level. Currently pciEnabled is supported through this field.
         * When this is enabled, any logs, recordings, or transcriptions will be shipped to the customer endpoints if provided else lost.
         * At the end of the call, you will receive an end-of-call-report message to store on your server, if webhook is provided.
         * Defaults to false.
         * When PCI is enabled, only PCI-compliant Providers will be available for LLM, Voice and transcribers.
         * This is due to the compliance requirements of PCI. Other providers may not meet these requirements.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        public _FinalStage compliancePlan(CompliancePlan compliancePlan) {
            this.compliancePlan = Optional.ofNullable(compliancePlan);
            return this;
        }

        /**
         * <p>Stores the information about the compliance plan enforced at the organization level. Currently pciEnabled is supported through this field.
         * When this is enabled, any logs, recordings, or transcriptions will be shipped to the customer endpoints if provided else lost.
         * At the end of the call, you will receive an end-of-call-report message to store on your server, if webhook is provided.
         * Defaults to false.
         * When PCI is enabled, only PCI-compliant Providers will be available for LLM, Voice and transcribers.
         * This is due to the compliance requirements of PCI. Other providers may not meet these requirements.</p>
         */
        @java.lang.Override
        @JsonSetter(value = "compliancePlan", nulls = Nulls.SKIP)
        public _FinalStage compliancePlan(Optional<CompliancePlan> compliancePlan) {
            this.compliancePlan = compliancePlan;
            return this;
        }

        /**
         * <p>This is the concurrency limit for the org. This is the maximum number of calls that can be active at any given time. To go beyond 10, please contact us at support@vapi.ai.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        public _FinalStage concurrencyLimit(Double concurrencyLimit) {
            this.concurrencyLimit = Optional.ofNullable(concurrencyLimit);
            return this;
        }

        /**
         * <p>This is the concurrency limit for the org. This is the maximum number of calls that can be active at any given time. To go beyond 10, please contact us at support@vapi.ai.</p>
         */
        @java.lang.Override
        @JsonSetter(value = "concurrencyLimit", nulls = Nulls.SKIP)
        public _FinalStage concurrencyLimit(Optional<Double> concurrencyLimit) {
            this.concurrencyLimit = concurrencyLimit;
            return this;
        }

        /**
         * <p>This is where Vapi will send webhooks. You can find all webhooks available along with their shape in ServerMessage schema.</p>
         * <p>The order of precedence is:</p>
         * <ol>
         * <li>assistant.server</li>
         * <li>phoneNumber.server</li>
         * <li>org.server</li>
         * </ol>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        public _FinalStage server(Server server) {
            this.server = Optional.ofNullable(server);
            return this;
        }

        /**
         * <p>This is where Vapi will send webhooks. You can find all webhooks available along with their shape in ServerMessage schema.</p>
         * <p>The order of precedence is:</p>
         * <ol>
         * <li>assistant.server</li>
         * <li>phoneNumber.server</li>
         * <li>org.server</li>
         * </ol>
         */
        @java.lang.Override
        @JsonSetter(value = "server", nulls = Nulls.SKIP)
        public _FinalStage server(Optional<Server> server) {
            this.server = server;
            return this;
        }

        /**
         * <p>This is the monthly billing limit for the org. To go beyond $1000/mo, please contact us at support@vapi.ai.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        public _FinalStage billingLimit(Double billingLimit) {
            this.billingLimit = Optional.ofNullable(billingLimit);
            return this;
        }

        /**
         * <p>This is the monthly billing limit for the org. To go beyond $1000/mo, please contact us at support@vapi.ai.</p>
         */
        @java.lang.Override
        @JsonSetter(value = "billingLimit", nulls = Nulls.SKIP)
        public _FinalStage billingLimit(Optional<Double> billingLimit) {
            this.billingLimit = billingLimit;
            return this;
        }

        /**
         * <p>This is the channel of the org. There is the cluster the API traffic for the org will be directed.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        public _FinalStage channel(OrgChannel channel) {
            this.channel = Optional.ofNullable(channel);
            return this;
        }

        /**
         * <p>This is the channel of the org. There is the cluster the API traffic for the org will be directed.</p>
         */
        @java.lang.Override
        @JsonSetter(value = "channel", nulls = Nulls.SKIP)
        public _FinalStage channel(Optional<OrgChannel> channel) {
            this.channel = channel;
            return this;
        }

        /**
         * <p>This is the name of the org. This is just for your own reference.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        public _FinalStage name(String name) {
            this.name = Optional.ofNullable(name);
            return this;
        }

        /**
         * <p>This is the name of the org. This is just for your own reference.</p>
         */
        @java.lang.Override
        @JsonSetter(value = "name", nulls = Nulls.SKIP)
        public _FinalStage name(Optional<String> name) {
            this.name = name;
            return this;
        }

        /**
         * <p>This is the total number of call minutes used by this org across all time.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        public _FinalStage minutesUsed(Double minutesUsed) {
            this.minutesUsed = Optional.ofNullable(minutesUsed);
            return this;
        }

        /**
         * <p>This is the total number of call minutes used by this org across all time.</p>
         */
        @java.lang.Override
        @JsonSetter(value = "minutesUsed", nulls = Nulls.SKIP)
        public _FinalStage minutesUsed(Optional<Double> minutesUsed) {
            this.minutesUsed = minutesUsed;
            return this;
        }

        /**
         * <p>This is the secret key used for signing JWT tokens for the org.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        public _FinalStage jwtSecret(String jwtSecret) {
            this.jwtSecret = Optional.ofNullable(jwtSecret);
            return this;
        }

        /**
         * <p>This is the secret key used for signing JWT tokens for the org.</p>
         */
        @java.lang.Override
        @JsonSetter(value = "jwtSecret", nulls = Nulls.SKIP)
        public _FinalStage jwtSecret(Optional<String> jwtSecret) {
            this.jwtSecret = jwtSecret;
            return this;
        }

        /**
         * <p>This is the plan for the org.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        public _FinalStage plan(OrgPlan plan) {
            this.plan = Optional.ofNullable(plan);
            return this;
        }

        /**
         * <p>This is the plan for the org.</p>
         */
        @java.lang.Override
        @JsonSetter(value = "plan", nulls = Nulls.SKIP)
        public _FinalStage plan(Optional<OrgPlan> plan) {
            this.plan = plan;
            return this;
        }

        /**
         * <p>This is the subscription's status.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        public _FinalStage stripeSubscriptionStatus(String stripeSubscriptionStatus) {
            this.stripeSubscriptionStatus = Optional.ofNullable(stripeSubscriptionStatus);
            return this;
        }

        /**
         * <p>This is the subscription's status.</p>
         */
        @java.lang.Override
        @JsonSetter(value = "stripeSubscriptionStatus", nulls = Nulls.SKIP)
        public _FinalStage stripeSubscriptionStatus(Optional<String> stripeSubscriptionStatus) {
            this.stripeSubscriptionStatus = stripeSubscriptionStatus;
            return this;
        }

        /**
         * <p>This is the subscription's current period start.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        public _FinalStage stripeSubscriptionCurrentPeriodStart(OffsetDateTime stripeSubscriptionCurrentPeriodStart) {
            this.stripeSubscriptionCurrentPeriodStart = Optional.ofNullable(stripeSubscriptionCurrentPeriodStart);
            return this;
        }

        /**
         * <p>This is the subscription's current period start.</p>
         */
        @java.lang.Override
        @JsonSetter(value = "stripeSubscriptionCurrentPeriodStart", nulls = Nulls.SKIP)
        public _FinalStage stripeSubscriptionCurrentPeriodStart(
                Optional<OffsetDateTime> stripeSubscriptionCurrentPeriodStart) {
            this.stripeSubscriptionCurrentPeriodStart = stripeSubscriptionCurrentPeriodStart;
            return this;
        }

        /**
         * <p>This is the subscription's subscription item.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        public _FinalStage stripeSubscriptionItemId(String stripeSubscriptionItemId) {
            this.stripeSubscriptionItemId = Optional.ofNullable(stripeSubscriptionItemId);
            return this;
        }

        /**
         * <p>This is the subscription's subscription item.</p>
         */
        @java.lang.Override
        @JsonSetter(value = "stripeSubscriptionItemId", nulls = Nulls.SKIP)
        public _FinalStage stripeSubscriptionItemId(Optional<String> stripeSubscriptionItemId) {
            this.stripeSubscriptionItemId = stripeSubscriptionItemId;
            return this;
        }

        /**
         * <p>This is the subscription for the org.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        public _FinalStage stripeSubscriptionId(String stripeSubscriptionId) {
            this.stripeSubscriptionId = Optional.ofNullable(stripeSubscriptionId);
            return this;
        }

        /**
         * <p>This is the subscription for the org.</p>
         */
        @java.lang.Override
        @JsonSetter(value = "stripeSubscriptionId", nulls = Nulls.SKIP)
        public _FinalStage stripeSubscriptionId(Optional<String> stripeSubscriptionId) {
            this.stripeSubscriptionId = stripeSubscriptionId;
            return this;
        }

        /**
         * <p>This is the Stripe customer for the org.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        public _FinalStage stripeCustomerId(String stripeCustomerId) {
            this.stripeCustomerId = Optional.ofNullable(stripeCustomerId);
            return this;
        }

        /**
         * <p>This is the Stripe customer for the org.</p>
         */
        @java.lang.Override
        @JsonSetter(value = "stripeCustomerId", nulls = Nulls.SKIP)
        public _FinalStage stripeCustomerId(Optional<String> stripeCustomerId) {
            this.stripeCustomerId = stripeCustomerId;
            return this;
        }

        /**
         * <p>This is the ID of the subscription the org belongs to.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        public _FinalStage subscriptionId(String subscriptionId) {
            this.subscriptionId = Optional.ofNullable(subscriptionId);
            return this;
        }

        /**
         * <p>This is the ID of the subscription the org belongs to.</p>
         */
        @java.lang.Override
        @JsonSetter(value = "subscriptionId", nulls = Nulls.SKIP)
        public _FinalStage subscriptionId(Optional<String> subscriptionId) {
            this.subscriptionId = subscriptionId;
            return this;
        }

        @java.lang.Override
        public _FinalStage subscription(Subscription subscription) {
            this.subscription = Optional.ofNullable(subscription);
            return this;
        }

        @java.lang.Override
        @JsonSetter(value = "subscription", nulls = Nulls.SKIP)
        public _FinalStage subscription(Optional<Subscription> subscription) {
            this.subscription = subscription;
            return this;
        }

        /**
         * <p>When this is enabled, no logs, recordings, or transcriptions will be stored. At the end of the call, you will still receive an end-of-call-report message to store on your server. Defaults to false.
         * When HIPAA is enabled, only OpenAI/Custom LLM or Azure Providers will be available for LLM and Voice respectively.
         * This is due to the compliance requirements of HIPAA. Other providers may not meet these requirements.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        public _FinalStage hipaaEnabled(Boolean hipaaEnabled) {
            this.hipaaEnabled = Optional.ofNullable(hipaaEnabled);
            return this;
        }

        /**
         * <p>When this is enabled, no logs, recordings, or transcriptions will be stored. At the end of the call, you will still receive an end-of-call-report message to store on your server. Defaults to false.
         * When HIPAA is enabled, only OpenAI/Custom LLM or Azure Providers will be available for LLM and Voice respectively.
         * This is due to the compliance requirements of HIPAA. Other providers may not meet these requirements.</p>
         */
        @java.lang.Override
        @JsonSetter(value = "hipaaEnabled", nulls = Nulls.SKIP)
        public _FinalStage hipaaEnabled(Optional<Boolean> hipaaEnabled) {
            this.hipaaEnabled = hipaaEnabled;
            return this;
        }

        @java.lang.Override
        public Org build() {
            return new Org(
                    hipaaEnabled,
                    subscription,
                    subscriptionId,
                    id,
                    createdAt,
                    updatedAt,
                    stripeCustomerId,
                    stripeSubscriptionId,
                    stripeSubscriptionItemId,
                    stripeSubscriptionCurrentPeriodStart,
                    stripeSubscriptionStatus,
                    plan,
                    jwtSecret,
                    minutesUsed,
                    name,
                    channel,
                    billingLimit,
                    server,
                    concurrencyLimit,
                    compliancePlan,
                    additionalProperties);
        }
    }
}
