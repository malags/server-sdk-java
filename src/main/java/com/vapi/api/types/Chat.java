/**
 * This file was auto-generated by Fern from our API Definition.
 */
package com.vapi.api.types;

import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.annotation.Nulls;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.vapi.api.core.ObjectMappers;
import java.time.OffsetDateTime;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import org.jetbrains.annotations.NotNull;

@JsonInclude(JsonInclude.Include.NON_ABSENT)
@JsonDeserialize(builder = Chat.Builder.class)
public final class Chat {
    private final Optional<String> assistantId;

    private final Optional<CreateAssistantDto> assistant;

    private final Optional<AssistantOverrides> assistantOverrides;

    private final Optional<String> name;

    private final Optional<String> sessionId;

    private final Optional<ChatInput> input;

    private final Optional<Boolean> stream;

    private final Optional<String> previousChatId;

    private final String id;

    private final String orgId;

    private final Optional<List<ChatMessagesItem>> messages;

    private final Optional<List<ChatOutputItem>> output;

    private final OffsetDateTime createdAt;

    private final OffsetDateTime updatedAt;

    private final Optional<List<ChatCostsItem>> costs;

    private final Optional<Double> cost;

    private final Map<String, Object> additionalProperties;

    private Chat(
            Optional<String> assistantId,
            Optional<CreateAssistantDto> assistant,
            Optional<AssistantOverrides> assistantOverrides,
            Optional<String> name,
            Optional<String> sessionId,
            Optional<ChatInput> input,
            Optional<Boolean> stream,
            Optional<String> previousChatId,
            String id,
            String orgId,
            Optional<List<ChatMessagesItem>> messages,
            Optional<List<ChatOutputItem>> output,
            OffsetDateTime createdAt,
            OffsetDateTime updatedAt,
            Optional<List<ChatCostsItem>> costs,
            Optional<Double> cost,
            Map<String, Object> additionalProperties) {
        this.assistantId = assistantId;
        this.assistant = assistant;
        this.assistantOverrides = assistantOverrides;
        this.name = name;
        this.sessionId = sessionId;
        this.input = input;
        this.stream = stream;
        this.previousChatId = previousChatId;
        this.id = id;
        this.orgId = orgId;
        this.messages = messages;
        this.output = output;
        this.createdAt = createdAt;
        this.updatedAt = updatedAt;
        this.costs = costs;
        this.cost = cost;
        this.additionalProperties = additionalProperties;
    }

    /**
     * @return This is the assistant that will be used for the chat. To use an existing assistant, use <code>assistantId</code> instead.
     */
    @JsonProperty("assistantId")
    public Optional<String> getAssistantId() {
        return assistantId;
    }

    /**
     * @return This is the assistant that will be used for the chat. To use an existing assistant, use <code>assistantId</code> instead.
     */
    @JsonProperty("assistant")
    public Optional<CreateAssistantDto> getAssistant() {
        return assistant;
    }

    /**
     * @return These are the variable values that will be used to replace template variables in the assistant messages.
     * Only variable substitution is supported in chat contexts - other assistant properties cannot be overridden.
     */
    @JsonProperty("assistantOverrides")
    public Optional<AssistantOverrides> getAssistantOverrides() {
        return assistantOverrides;
    }

    /**
     * @return This is the name of the chat. This is just for your own reference.
     */
    @JsonProperty("name")
    public Optional<String> getName() {
        return name;
    }

    /**
     * @return This is the ID of the session that will be used for the chat.
     * Mutually exclusive with previousChatId.
     */
    @JsonProperty("sessionId")
    public Optional<String> getSessionId() {
        return sessionId;
    }

    /**
     * @return This is the input text for the chat.
     * Can be a string or an array of chat messages.
     */
    @JsonProperty("input")
    public Optional<ChatInput> getInput() {
        return input;
    }

    /**
     * @return This is a flag that determines whether the response should be streamed.
     * When true, the response will be sent as chunks of text.
     */
    @JsonProperty("stream")
    public Optional<Boolean> getStream() {
        return stream;
    }

    /**
     * @return This is the ID of the chat that will be used as context for the new chat.
     * The messages from the previous chat will be used as context.
     * Mutually exclusive with sessionId.
     */
    @JsonProperty("previousChatId")
    public Optional<String> getPreviousChatId() {
        return previousChatId;
    }

    /**
     * @return This is the unique identifier for the chat.
     */
    @JsonProperty("id")
    public String getId() {
        return id;
    }

    /**
     * @return This is the unique identifier for the org that this chat belongs to.
     */
    @JsonProperty("orgId")
    public String getOrgId() {
        return orgId;
    }

    /**
     * @return This is an array of messages used as context for the chat.
     * Used to provide message history for multi-turn conversations.
     */
    @JsonProperty("messages")
    public Optional<List<ChatMessagesItem>> getMessages() {
        return messages;
    }

    /**
     * @return This is the output messages generated by the system in response to the input.
     */
    @JsonProperty("output")
    public Optional<List<ChatOutputItem>> getOutput() {
        return output;
    }

    /**
     * @return This is the ISO 8601 date-time string of when the chat was created.
     */
    @JsonProperty("createdAt")
    public OffsetDateTime getCreatedAt() {
        return createdAt;
    }

    /**
     * @return This is the ISO 8601 date-time string of when the chat was last updated.
     */
    @JsonProperty("updatedAt")
    public OffsetDateTime getUpdatedAt() {
        return updatedAt;
    }

    /**
     * @return These are the costs of individual components of the chat in USD.
     */
    @JsonProperty("costs")
    public Optional<List<ChatCostsItem>> getCosts() {
        return costs;
    }

    /**
     * @return This is the cost of the chat in USD.
     */
    @JsonProperty("cost")
    public Optional<Double> getCost() {
        return cost;
    }

    @java.lang.Override
    public boolean equals(Object other) {
        if (this == other) return true;
        return other instanceof Chat && equalTo((Chat) other);
    }

    @JsonAnyGetter
    public Map<String, Object> getAdditionalProperties() {
        return this.additionalProperties;
    }

    private boolean equalTo(Chat other) {
        return assistantId.equals(other.assistantId)
                && assistant.equals(other.assistant)
                && assistantOverrides.equals(other.assistantOverrides)
                && name.equals(other.name)
                && sessionId.equals(other.sessionId)
                && input.equals(other.input)
                && stream.equals(other.stream)
                && previousChatId.equals(other.previousChatId)
                && id.equals(other.id)
                && orgId.equals(other.orgId)
                && messages.equals(other.messages)
                && output.equals(other.output)
                && createdAt.equals(other.createdAt)
                && updatedAt.equals(other.updatedAt)
                && costs.equals(other.costs)
                && cost.equals(other.cost);
    }

    @java.lang.Override
    public int hashCode() {
        return Objects.hash(
                this.assistantId,
                this.assistant,
                this.assistantOverrides,
                this.name,
                this.sessionId,
                this.input,
                this.stream,
                this.previousChatId,
                this.id,
                this.orgId,
                this.messages,
                this.output,
                this.createdAt,
                this.updatedAt,
                this.costs,
                this.cost);
    }

    @java.lang.Override
    public String toString() {
        return ObjectMappers.stringify(this);
    }

    public static IdStage builder() {
        return new Builder();
    }

    public interface IdStage {
        /**
         * <p>This is the unique identifier for the chat.</p>
         */
        OrgIdStage id(@NotNull String id);

        Builder from(Chat other);
    }

    public interface OrgIdStage {
        /**
         * <p>This is the unique identifier for the org that this chat belongs to.</p>
         */
        CreatedAtStage orgId(@NotNull String orgId);
    }

    public interface CreatedAtStage {
        /**
         * <p>This is the ISO 8601 date-time string of when the chat was created.</p>
         */
        UpdatedAtStage createdAt(@NotNull OffsetDateTime createdAt);
    }

    public interface UpdatedAtStage {
        /**
         * <p>This is the ISO 8601 date-time string of when the chat was last updated.</p>
         */
        _FinalStage updatedAt(@NotNull OffsetDateTime updatedAt);
    }

    public interface _FinalStage {
        Chat build();

        /**
         * <p>This is the assistant that will be used for the chat. To use an existing assistant, use <code>assistantId</code> instead.</p>
         */
        _FinalStage assistantId(Optional<String> assistantId);

        _FinalStage assistantId(String assistantId);

        /**
         * <p>This is the assistant that will be used for the chat. To use an existing assistant, use <code>assistantId</code> instead.</p>
         */
        _FinalStage assistant(Optional<CreateAssistantDto> assistant);

        _FinalStage assistant(CreateAssistantDto assistant);

        /**
         * <p>These are the variable values that will be used to replace template variables in the assistant messages.
         * Only variable substitution is supported in chat contexts - other assistant properties cannot be overridden.</p>
         */
        _FinalStage assistantOverrides(Optional<AssistantOverrides> assistantOverrides);

        _FinalStage assistantOverrides(AssistantOverrides assistantOverrides);

        /**
         * <p>This is the name of the chat. This is just for your own reference.</p>
         */
        _FinalStage name(Optional<String> name);

        _FinalStage name(String name);

        /**
         * <p>This is the ID of the session that will be used for the chat.
         * Mutually exclusive with previousChatId.</p>
         */
        _FinalStage sessionId(Optional<String> sessionId);

        _FinalStage sessionId(String sessionId);

        /**
         * <p>This is the input text for the chat.
         * Can be a string or an array of chat messages.</p>
         */
        _FinalStage input(Optional<ChatInput> input);

        _FinalStage input(ChatInput input);

        /**
         * <p>This is a flag that determines whether the response should be streamed.
         * When true, the response will be sent as chunks of text.</p>
         */
        _FinalStage stream(Optional<Boolean> stream);

        _FinalStage stream(Boolean stream);

        /**
         * <p>This is the ID of the chat that will be used as context for the new chat.
         * The messages from the previous chat will be used as context.
         * Mutually exclusive with sessionId.</p>
         */
        _FinalStage previousChatId(Optional<String> previousChatId);

        _FinalStage previousChatId(String previousChatId);

        /**
         * <p>This is an array of messages used as context for the chat.
         * Used to provide message history for multi-turn conversations.</p>
         */
        _FinalStage messages(Optional<List<ChatMessagesItem>> messages);

        _FinalStage messages(List<ChatMessagesItem> messages);

        /**
         * <p>This is the output messages generated by the system in response to the input.</p>
         */
        _FinalStage output(Optional<List<ChatOutputItem>> output);

        _FinalStage output(List<ChatOutputItem> output);

        /**
         * <p>These are the costs of individual components of the chat in USD.</p>
         */
        _FinalStage costs(Optional<List<ChatCostsItem>> costs);

        _FinalStage costs(List<ChatCostsItem> costs);

        /**
         * <p>This is the cost of the chat in USD.</p>
         */
        _FinalStage cost(Optional<Double> cost);

        _FinalStage cost(Double cost);
    }

    @JsonIgnoreProperties(ignoreUnknown = true)
    public static final class Builder implements IdStage, OrgIdStage, CreatedAtStage, UpdatedAtStage, _FinalStage {
        private String id;

        private String orgId;

        private OffsetDateTime createdAt;

        private OffsetDateTime updatedAt;

        private Optional<Double> cost = Optional.empty();

        private Optional<List<ChatCostsItem>> costs = Optional.empty();

        private Optional<List<ChatOutputItem>> output = Optional.empty();

        private Optional<List<ChatMessagesItem>> messages = Optional.empty();

        private Optional<String> previousChatId = Optional.empty();

        private Optional<Boolean> stream = Optional.empty();

        private Optional<ChatInput> input = Optional.empty();

        private Optional<String> sessionId = Optional.empty();

        private Optional<String> name = Optional.empty();

        private Optional<AssistantOverrides> assistantOverrides = Optional.empty();

        private Optional<CreateAssistantDto> assistant = Optional.empty();

        private Optional<String> assistantId = Optional.empty();

        @JsonAnySetter
        private Map<String, Object> additionalProperties = new HashMap<>();

        private Builder() {}

        @java.lang.Override
        public Builder from(Chat other) {
            assistantId(other.getAssistantId());
            assistant(other.getAssistant());
            assistantOverrides(other.getAssistantOverrides());
            name(other.getName());
            sessionId(other.getSessionId());
            input(other.getInput());
            stream(other.getStream());
            previousChatId(other.getPreviousChatId());
            id(other.getId());
            orgId(other.getOrgId());
            messages(other.getMessages());
            output(other.getOutput());
            createdAt(other.getCreatedAt());
            updatedAt(other.getUpdatedAt());
            costs(other.getCosts());
            cost(other.getCost());
            return this;
        }

        /**
         * <p>This is the unique identifier for the chat.</p>
         * <p>This is the unique identifier for the chat.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        @JsonSetter("id")
        public OrgIdStage id(@NotNull String id) {
            this.id = Objects.requireNonNull(id, "id must not be null");
            return this;
        }

        /**
         * <p>This is the unique identifier for the org that this chat belongs to.</p>
         * <p>This is the unique identifier for the org that this chat belongs to.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        @JsonSetter("orgId")
        public CreatedAtStage orgId(@NotNull String orgId) {
            this.orgId = Objects.requireNonNull(orgId, "orgId must not be null");
            return this;
        }

        /**
         * <p>This is the ISO 8601 date-time string of when the chat was created.</p>
         * <p>This is the ISO 8601 date-time string of when the chat was created.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        @JsonSetter("createdAt")
        public UpdatedAtStage createdAt(@NotNull OffsetDateTime createdAt) {
            this.createdAt = Objects.requireNonNull(createdAt, "createdAt must not be null");
            return this;
        }

        /**
         * <p>This is the ISO 8601 date-time string of when the chat was last updated.</p>
         * <p>This is the ISO 8601 date-time string of when the chat was last updated.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        @JsonSetter("updatedAt")
        public _FinalStage updatedAt(@NotNull OffsetDateTime updatedAt) {
            this.updatedAt = Objects.requireNonNull(updatedAt, "updatedAt must not be null");
            return this;
        }

        /**
         * <p>This is the cost of the chat in USD.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        public _FinalStage cost(Double cost) {
            this.cost = Optional.ofNullable(cost);
            return this;
        }

        /**
         * <p>This is the cost of the chat in USD.</p>
         */
        @java.lang.Override
        @JsonSetter(value = "cost", nulls = Nulls.SKIP)
        public _FinalStage cost(Optional<Double> cost) {
            this.cost = cost;
            return this;
        }

        /**
         * <p>These are the costs of individual components of the chat in USD.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        public _FinalStage costs(List<ChatCostsItem> costs) {
            this.costs = Optional.ofNullable(costs);
            return this;
        }

        /**
         * <p>These are the costs of individual components of the chat in USD.</p>
         */
        @java.lang.Override
        @JsonSetter(value = "costs", nulls = Nulls.SKIP)
        public _FinalStage costs(Optional<List<ChatCostsItem>> costs) {
            this.costs = costs;
            return this;
        }

        /**
         * <p>This is the output messages generated by the system in response to the input.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        public _FinalStage output(List<ChatOutputItem> output) {
            this.output = Optional.ofNullable(output);
            return this;
        }

        /**
         * <p>This is the output messages generated by the system in response to the input.</p>
         */
        @java.lang.Override
        @JsonSetter(value = "output", nulls = Nulls.SKIP)
        public _FinalStage output(Optional<List<ChatOutputItem>> output) {
            this.output = output;
            return this;
        }

        /**
         * <p>This is an array of messages used as context for the chat.
         * Used to provide message history for multi-turn conversations.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        public _FinalStage messages(List<ChatMessagesItem> messages) {
            this.messages = Optional.ofNullable(messages);
            return this;
        }

        /**
         * <p>This is an array of messages used as context for the chat.
         * Used to provide message history for multi-turn conversations.</p>
         */
        @java.lang.Override
        @JsonSetter(value = "messages", nulls = Nulls.SKIP)
        public _FinalStage messages(Optional<List<ChatMessagesItem>> messages) {
            this.messages = messages;
            return this;
        }

        /**
         * <p>This is the ID of the chat that will be used as context for the new chat.
         * The messages from the previous chat will be used as context.
         * Mutually exclusive with sessionId.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        public _FinalStage previousChatId(String previousChatId) {
            this.previousChatId = Optional.ofNullable(previousChatId);
            return this;
        }

        /**
         * <p>This is the ID of the chat that will be used as context for the new chat.
         * The messages from the previous chat will be used as context.
         * Mutually exclusive with sessionId.</p>
         */
        @java.lang.Override
        @JsonSetter(value = "previousChatId", nulls = Nulls.SKIP)
        public _FinalStage previousChatId(Optional<String> previousChatId) {
            this.previousChatId = previousChatId;
            return this;
        }

        /**
         * <p>This is a flag that determines whether the response should be streamed.
         * When true, the response will be sent as chunks of text.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        public _FinalStage stream(Boolean stream) {
            this.stream = Optional.ofNullable(stream);
            return this;
        }

        /**
         * <p>This is a flag that determines whether the response should be streamed.
         * When true, the response will be sent as chunks of text.</p>
         */
        @java.lang.Override
        @JsonSetter(value = "stream", nulls = Nulls.SKIP)
        public _FinalStage stream(Optional<Boolean> stream) {
            this.stream = stream;
            return this;
        }

        /**
         * <p>This is the input text for the chat.
         * Can be a string or an array of chat messages.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        public _FinalStage input(ChatInput input) {
            this.input = Optional.ofNullable(input);
            return this;
        }

        /**
         * <p>This is the input text for the chat.
         * Can be a string or an array of chat messages.</p>
         */
        @java.lang.Override
        @JsonSetter(value = "input", nulls = Nulls.SKIP)
        public _FinalStage input(Optional<ChatInput> input) {
            this.input = input;
            return this;
        }

        /**
         * <p>This is the ID of the session that will be used for the chat.
         * Mutually exclusive with previousChatId.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        public _FinalStage sessionId(String sessionId) {
            this.sessionId = Optional.ofNullable(sessionId);
            return this;
        }

        /**
         * <p>This is the ID of the session that will be used for the chat.
         * Mutually exclusive with previousChatId.</p>
         */
        @java.lang.Override
        @JsonSetter(value = "sessionId", nulls = Nulls.SKIP)
        public _FinalStage sessionId(Optional<String> sessionId) {
            this.sessionId = sessionId;
            return this;
        }

        /**
         * <p>This is the name of the chat. This is just for your own reference.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        public _FinalStage name(String name) {
            this.name = Optional.ofNullable(name);
            return this;
        }

        /**
         * <p>This is the name of the chat. This is just for your own reference.</p>
         */
        @java.lang.Override
        @JsonSetter(value = "name", nulls = Nulls.SKIP)
        public _FinalStage name(Optional<String> name) {
            this.name = name;
            return this;
        }

        /**
         * <p>These are the variable values that will be used to replace template variables in the assistant messages.
         * Only variable substitution is supported in chat contexts - other assistant properties cannot be overridden.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        public _FinalStage assistantOverrides(AssistantOverrides assistantOverrides) {
            this.assistantOverrides = Optional.ofNullable(assistantOverrides);
            return this;
        }

        /**
         * <p>These are the variable values that will be used to replace template variables in the assistant messages.
         * Only variable substitution is supported in chat contexts - other assistant properties cannot be overridden.</p>
         */
        @java.lang.Override
        @JsonSetter(value = "assistantOverrides", nulls = Nulls.SKIP)
        public _FinalStage assistantOverrides(Optional<AssistantOverrides> assistantOverrides) {
            this.assistantOverrides = assistantOverrides;
            return this;
        }

        /**
         * <p>This is the assistant that will be used for the chat. To use an existing assistant, use <code>assistantId</code> instead.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        public _FinalStage assistant(CreateAssistantDto assistant) {
            this.assistant = Optional.ofNullable(assistant);
            return this;
        }

        /**
         * <p>This is the assistant that will be used for the chat. To use an existing assistant, use <code>assistantId</code> instead.</p>
         */
        @java.lang.Override
        @JsonSetter(value = "assistant", nulls = Nulls.SKIP)
        public _FinalStage assistant(Optional<CreateAssistantDto> assistant) {
            this.assistant = assistant;
            return this;
        }

        /**
         * <p>This is the assistant that will be used for the chat. To use an existing assistant, use <code>assistantId</code> instead.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        public _FinalStage assistantId(String assistantId) {
            this.assistantId = Optional.ofNullable(assistantId);
            return this;
        }

        /**
         * <p>This is the assistant that will be used for the chat. To use an existing assistant, use <code>assistantId</code> instead.</p>
         */
        @java.lang.Override
        @JsonSetter(value = "assistantId", nulls = Nulls.SKIP)
        public _FinalStage assistantId(Optional<String> assistantId) {
            this.assistantId = assistantId;
            return this;
        }

        @java.lang.Override
        public Chat build() {
            return new Chat(
                    assistantId,
                    assistant,
                    assistantOverrides,
                    name,
                    sessionId,
                    input,
                    stream,
                    previousChatId,
                    id,
                    orgId,
                    messages,
                    output,
                    createdAt,
                    updatedAt,
                    costs,
                    cost,
                    additionalProperties);
        }
    }
}
