/**
 * This file was auto-generated by Fern from our API Definition.
 */
package com.vapi.api.types;

import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.vapi.api.core.ObjectMappers;
import java.util.HashMap;
import java.util.Map;
import java.util.Objects;
import org.jetbrains.annotations.NotNull;

@JsonInclude(JsonInclude.Include.NON_ABSENT)
@JsonDeserialize(builder = ResponseTextDoneEvent.Builder.class)
public final class ResponseTextDoneEvent {
    private final double contentIndex;

    private final String itemId;

    private final double outputIndex;

    private final String text;

    private final Map<String, Object> additionalProperties;

    private ResponseTextDoneEvent(
            double contentIndex,
            String itemId,
            double outputIndex,
            String text,
            Map<String, Object> additionalProperties) {
        this.contentIndex = contentIndex;
        this.itemId = itemId;
        this.outputIndex = outputIndex;
        this.text = text;
        this.additionalProperties = additionalProperties;
    }

    /**
     * @return Index of the content part
     */
    @JsonProperty("content_index")
    public double getContentIndex() {
        return contentIndex;
    }

    /**
     * @return ID of the output item
     */
    @JsonProperty("item_id")
    public String getItemId() {
        return itemId;
    }

    /**
     * @return Index of the output item
     */
    @JsonProperty("output_index")
    public double getOutputIndex() {
        return outputIndex;
    }

    /**
     * @return Complete text content
     */
    @JsonProperty("text")
    public String getText() {
        return text;
    }

    /**
     * @return Event type
     */
    @JsonProperty("type")
    public String getType() {
        return "response.output_text.done";
    }

    @java.lang.Override
    public boolean equals(Object other) {
        if (this == other) return true;
        return other instanceof ResponseTextDoneEvent && equalTo((ResponseTextDoneEvent) other);
    }

    @JsonAnyGetter
    public Map<String, Object> getAdditionalProperties() {
        return this.additionalProperties;
    }

    private boolean equalTo(ResponseTextDoneEvent other) {
        return contentIndex == other.contentIndex
                && itemId.equals(other.itemId)
                && outputIndex == other.outputIndex
                && text.equals(other.text);
    }

    @java.lang.Override
    public int hashCode() {
        return Objects.hash(this.contentIndex, this.itemId, this.outputIndex, this.text);
    }

    @java.lang.Override
    public String toString() {
        return ObjectMappers.stringify(this);
    }

    public static ContentIndexStage builder() {
        return new Builder();
    }

    public interface ContentIndexStage {
        /**
         * <p>Index of the content part</p>
         */
        ItemIdStage contentIndex(double contentIndex);

        Builder from(ResponseTextDoneEvent other);
    }

    public interface ItemIdStage {
        /**
         * <p>ID of the output item</p>
         */
        OutputIndexStage itemId(@NotNull String itemId);
    }

    public interface OutputIndexStage {
        /**
         * <p>Index of the output item</p>
         */
        TextStage outputIndex(double outputIndex);
    }

    public interface TextStage {
        /**
         * <p>Complete text content</p>
         */
        _FinalStage text(@NotNull String text);
    }

    public interface _FinalStage {
        ResponseTextDoneEvent build();
    }

    @JsonIgnoreProperties(ignoreUnknown = true)
    public static final class Builder
            implements ContentIndexStage, ItemIdStage, OutputIndexStage, TextStage, _FinalStage {
        private double contentIndex;

        private String itemId;

        private double outputIndex;

        private String text;

        @JsonAnySetter
        private Map<String, Object> additionalProperties = new HashMap<>();

        private Builder() {}

        @java.lang.Override
        public Builder from(ResponseTextDoneEvent other) {
            contentIndex(other.getContentIndex());
            itemId(other.getItemId());
            outputIndex(other.getOutputIndex());
            text(other.getText());
            return this;
        }

        /**
         * <p>Index of the content part</p>
         * <p>Index of the content part</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        @JsonSetter("content_index")
        public ItemIdStage contentIndex(double contentIndex) {
            this.contentIndex = contentIndex;
            return this;
        }

        /**
         * <p>ID of the output item</p>
         * <p>ID of the output item</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        @JsonSetter("item_id")
        public OutputIndexStage itemId(@NotNull String itemId) {
            this.itemId = Objects.requireNonNull(itemId, "itemId must not be null");
            return this;
        }

        /**
         * <p>Index of the output item</p>
         * <p>Index of the output item</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        @JsonSetter("output_index")
        public TextStage outputIndex(double outputIndex) {
            this.outputIndex = outputIndex;
            return this;
        }

        /**
         * <p>Complete text content</p>
         * <p>Complete text content</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        @JsonSetter("text")
        public _FinalStage text(@NotNull String text) {
            this.text = Objects.requireNonNull(text, "text must not be null");
            return this;
        }

        @java.lang.Override
        public ResponseTextDoneEvent build() {
            return new ResponseTextDoneEvent(contentIndex, itemId, outputIndex, text, additionalProperties);
        }
    }
}
