/**
 * This file was auto-generated by Fern from our API Definition.
 */
package com.vapi.api.resources.analytics.requests;

import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.annotation.Nulls;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.vapi.api.core.ObjectMappers;
import com.vapi.api.types.AnalyticsQuery;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Objects;

@JsonInclude(JsonInclude.Include.NON_ABSENT)
@JsonDeserialize(builder = AnalyticsQueryDto.Builder.class)
public final class AnalyticsQueryDto {
    private final List<AnalyticsQuery> queries;

    private final Map<String, Object> additionalProperties;

    private AnalyticsQueryDto(List<AnalyticsQuery> queries, Map<String, Object> additionalProperties) {
        this.queries = queries;
        this.additionalProperties = additionalProperties;
    }

    /**
     * @return This is the list of metric queries you want to perform.
     */
    @JsonProperty("queries")
    public List<AnalyticsQuery> getQueries() {
        return queries;
    }

    @java.lang.Override
    public boolean equals(Object other) {
        if (this == other) return true;
        return other instanceof AnalyticsQueryDto && equalTo((AnalyticsQueryDto) other);
    }

    @JsonAnyGetter
    public Map<String, Object> getAdditionalProperties() {
        return this.additionalProperties;
    }

    private boolean equalTo(AnalyticsQueryDto other) {
        return queries.equals(other.queries);
    }

    @java.lang.Override
    public int hashCode() {
        return Objects.hash(this.queries);
    }

    @java.lang.Override
    public String toString() {
        return ObjectMappers.stringify(this);
    }

    public static Builder builder() {
        return new Builder();
    }

    @JsonIgnoreProperties(ignoreUnknown = true)
    public static final class Builder {
        private List<AnalyticsQuery> queries = new ArrayList<>();

        @JsonAnySetter
        private Map<String, Object> additionalProperties = new HashMap<>();

        private Builder() {}

        public Builder from(AnalyticsQueryDto other) {
            queries(other.getQueries());
            return this;
        }

        /**
         * <p>This is the list of metric queries you want to perform.</p>
         */
        @JsonSetter(value = "queries", nulls = Nulls.SKIP)
        public Builder queries(List<AnalyticsQuery> queries) {
            this.queries.clear();
            this.queries.addAll(queries);
            return this;
        }

        public Builder addQueries(AnalyticsQuery queries) {
            this.queries.add(queries);
            return this;
        }

        public Builder addAllQueries(List<AnalyticsQuery> queries) {
            this.queries.addAll(queries);
            return this;
        }

        public AnalyticsQueryDto build() {
            return new AnalyticsQueryDto(queries, additionalProperties);
        }
    }
}
