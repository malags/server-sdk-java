/**
 * This file was auto-generated by Fern from our API Definition.
 */
package com.vapi.api.types;

import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.annotation.Nulls;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.vapi.api.core.ObjectMappers;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;

@JsonInclude(JsonInclude.Include.NON_ABSENT)
@JsonDeserialize(builder = SuccessEvaluationPlan.Builder.class)
public final class SuccessEvaluationPlan {
    private final Optional<SuccessEvaluationPlanRubric> rubric;

    private final Optional<List<Map<String, Object>>> messages;

    private final Optional<Boolean> enabled;

    private final Optional<Double> timeoutSeconds;

    private final Map<String, Object> additionalProperties;

    private SuccessEvaluationPlan(
            Optional<SuccessEvaluationPlanRubric> rubric,
            Optional<List<Map<String, Object>>> messages,
            Optional<Boolean> enabled,
            Optional<Double> timeoutSeconds,
            Map<String, Object> additionalProperties) {
        this.rubric = rubric;
        this.messages = messages;
        this.enabled = enabled;
        this.timeoutSeconds = timeoutSeconds;
        this.additionalProperties = additionalProperties;
    }

    /**
     * @return This enforces the rubric of the evaluation. The output is stored in <code>call.analysis.successEvaluation</code>.
     * <p>Options include:</p>
     * <ul>
     * <li>'NumericScale': A scale of 1 to 10.</li>
     * <li>'DescriptiveScale': A scale of Excellent, Good, Fair, Poor.</li>
     * <li>'Checklist': A checklist of criteria and their status.</li>
     * <li>'Matrix': A grid that evaluates multiple criteria across different performance levels.</li>
     * <li>'PercentageScale': A scale of 0% to 100%.</li>
     * <li>'LikertScale': A scale of Strongly Agree, Agree, Neutral, Disagree, Strongly Disagree.</li>
     * <li>'AutomaticRubric': Automatically break down evaluation into several criteria, each with its own score.</li>
     * <li>'PassFail': A simple 'true' if call passed, 'false' if not.</li>
     * </ul>
     * <p>Default is 'PassFail'.</p>
     */
    @JsonProperty("rubric")
    public Optional<SuccessEvaluationPlanRubric> getRubric() {
        return rubric;
    }

    /**
     * @return These are the messages used to generate the success evaluation.
     * <p>@default: <code>[ { &quot;role&quot;: &quot;system&quot;, &quot;content&quot;: &quot;You are an expert call evaluator. You will be given a transcript of a call and the system prompt of the AI participant. Determine if the call was successful based on the objectives inferred from the system prompt. DO NOT return anything except the result.\n\nRubric:\\n{{rubric}}\n\nOnly respond with the result.&quot; }, { &quot;role&quot;: &quot;user&quot;, &quot;content&quot;: &quot;Here is the transcript:\n\n{{transcript}}\n\n&quot; }, { &quot;role&quot;: &quot;user&quot;, &quot;content&quot;: &quot;Here was the system prompt of the call:\n\n{{systemPrompt}}\n\n. Here is the ended reason of the call:\n\n{{endedReason}}\n\n&quot; } ]</code></p>
     * <p>You can customize by providing any messages you want.</p>
     * <p>Here are the template variables available:</p>
     * <ul>
     * <li>{{transcript}}: the transcript of the call from <code>call.artifact.transcript</code>- {{systemPrompt}}: the system prompt of the call from <code>assistant.model.messages[type=system].content</code>- {{rubric}}: the rubric of the success evaluation from <code>successEvaluationPlan.rubric</code>- {{endedReason}}: the ended reason of the call from <code>call.endedReason</code></li>
     * </ul>
     */
    @JsonProperty("messages")
    public Optional<List<Map<String, Object>>> getMessages() {
        return messages;
    }

    /**
     * @return This determines whether a success evaluation is generated and stored in <code>call.analysis.successEvaluation</code>. Defaults to true.
     * <p>Usage:</p>
     * <ul>
     * <li>If you want to disable the success evaluation, set this to false.</li>
     * </ul>
     * <p>@default true</p>
     */
    @JsonProperty("enabled")
    public Optional<Boolean> getEnabled() {
        return enabled;
    }

    /**
     * @return This is how long the request is tried before giving up. When request times out, <code>call.analysis.successEvaluation</code> will be empty.
     * <p>Usage:</p>
     * <ul>
     * <li>To guarantee the success evaluation is generated, set this value high. Note, this will delay the end of call report in cases where model is slow to respond.</li>
     * </ul>
     * <p>@default 5 seconds</p>
     */
    @JsonProperty("timeoutSeconds")
    public Optional<Double> getTimeoutSeconds() {
        return timeoutSeconds;
    }

    @java.lang.Override
    public boolean equals(Object other) {
        if (this == other) return true;
        return other instanceof SuccessEvaluationPlan && equalTo((SuccessEvaluationPlan) other);
    }

    @JsonAnyGetter
    public Map<String, Object> getAdditionalProperties() {
        return this.additionalProperties;
    }

    private boolean equalTo(SuccessEvaluationPlan other) {
        return rubric.equals(other.rubric)
                && messages.equals(other.messages)
                && enabled.equals(other.enabled)
                && timeoutSeconds.equals(other.timeoutSeconds);
    }

    @java.lang.Override
    public int hashCode() {
        return Objects.hash(this.rubric, this.messages, this.enabled, this.timeoutSeconds);
    }

    @java.lang.Override
    public String toString() {
        return ObjectMappers.stringify(this);
    }

    public static Builder builder() {
        return new Builder();
    }

    @JsonIgnoreProperties(ignoreUnknown = true)
    public static final class Builder {
        private Optional<SuccessEvaluationPlanRubric> rubric = Optional.empty();

        private Optional<List<Map<String, Object>>> messages = Optional.empty();

        private Optional<Boolean> enabled = Optional.empty();

        private Optional<Double> timeoutSeconds = Optional.empty();

        @JsonAnySetter
        private Map<String, Object> additionalProperties = new HashMap<>();

        private Builder() {}

        public Builder from(SuccessEvaluationPlan other) {
            rubric(other.getRubric());
            messages(other.getMessages());
            enabled(other.getEnabled());
            timeoutSeconds(other.getTimeoutSeconds());
            return this;
        }

        /**
         * <p>This enforces the rubric of the evaluation. The output is stored in <code>call.analysis.successEvaluation</code>.</p>
         * <p>Options include:</p>
         * <ul>
         * <li>'NumericScale': A scale of 1 to 10.</li>
         * <li>'DescriptiveScale': A scale of Excellent, Good, Fair, Poor.</li>
         * <li>'Checklist': A checklist of criteria and their status.</li>
         * <li>'Matrix': A grid that evaluates multiple criteria across different performance levels.</li>
         * <li>'PercentageScale': A scale of 0% to 100%.</li>
         * <li>'LikertScale': A scale of Strongly Agree, Agree, Neutral, Disagree, Strongly Disagree.</li>
         * <li>'AutomaticRubric': Automatically break down evaluation into several criteria, each with its own score.</li>
         * <li>'PassFail': A simple 'true' if call passed, 'false' if not.</li>
         * </ul>
         * <p>Default is 'PassFail'.</p>
         */
        @JsonSetter(value = "rubric", nulls = Nulls.SKIP)
        public Builder rubric(Optional<SuccessEvaluationPlanRubric> rubric) {
            this.rubric = rubric;
            return this;
        }

        public Builder rubric(SuccessEvaluationPlanRubric rubric) {
            this.rubric = Optional.ofNullable(rubric);
            return this;
        }

        /**
         * <p>These are the messages used to generate the success evaluation.</p>
         * <p>@default: <code>[ { &quot;role&quot;: &quot;system&quot;, &quot;content&quot;: &quot;You are an expert call evaluator. You will be given a transcript of a call and the system prompt of the AI participant. Determine if the call was successful based on the objectives inferred from the system prompt. DO NOT return anything except the result.\n\nRubric:\\n{{rubric}}\n\nOnly respond with the result.&quot; }, { &quot;role&quot;: &quot;user&quot;, &quot;content&quot;: &quot;Here is the transcript:\n\n{{transcript}}\n\n&quot; }, { &quot;role&quot;: &quot;user&quot;, &quot;content&quot;: &quot;Here was the system prompt of the call:\n\n{{systemPrompt}}\n\n. Here is the ended reason of the call:\n\n{{endedReason}}\n\n&quot; } ]</code></p>
         * <p>You can customize by providing any messages you want.</p>
         * <p>Here are the template variables available:</p>
         * <ul>
         * <li>{{transcript}}: the transcript of the call from <code>call.artifact.transcript</code>- {{systemPrompt}}: the system prompt of the call from <code>assistant.model.messages[type=system].content</code>- {{rubric}}: the rubric of the success evaluation from <code>successEvaluationPlan.rubric</code>- {{endedReason}}: the ended reason of the call from <code>call.endedReason</code></li>
         * </ul>
         */
        @JsonSetter(value = "messages", nulls = Nulls.SKIP)
        public Builder messages(Optional<List<Map<String, Object>>> messages) {
            this.messages = messages;
            return this;
        }

        public Builder messages(List<Map<String, Object>> messages) {
            this.messages = Optional.ofNullable(messages);
            return this;
        }

        /**
         * <p>This determines whether a success evaluation is generated and stored in <code>call.analysis.successEvaluation</code>. Defaults to true.</p>
         * <p>Usage:</p>
         * <ul>
         * <li>If you want to disable the success evaluation, set this to false.</li>
         * </ul>
         * <p>@default true</p>
         */
        @JsonSetter(value = "enabled", nulls = Nulls.SKIP)
        public Builder enabled(Optional<Boolean> enabled) {
            this.enabled = enabled;
            return this;
        }

        public Builder enabled(Boolean enabled) {
            this.enabled = Optional.ofNullable(enabled);
            return this;
        }

        /**
         * <p>This is how long the request is tried before giving up. When request times out, <code>call.analysis.successEvaluation</code> will be empty.</p>
         * <p>Usage:</p>
         * <ul>
         * <li>To guarantee the success evaluation is generated, set this value high. Note, this will delay the end of call report in cases where model is slow to respond.</li>
         * </ul>
         * <p>@default 5 seconds</p>
         */
        @JsonSetter(value = "timeoutSeconds", nulls = Nulls.SKIP)
        public Builder timeoutSeconds(Optional<Double> timeoutSeconds) {
            this.timeoutSeconds = timeoutSeconds;
            return this;
        }

        public Builder timeoutSeconds(Double timeoutSeconds) {
            this.timeoutSeconds = Optional.ofNullable(timeoutSeconds);
            return this;
        }

        public SuccessEvaluationPlan build() {
            return new SuccessEvaluationPlan(rubric, messages, enabled, timeoutSeconds, additionalProperties);
        }
    }
}
