/**
 * This file was auto-generated by Fern from our API Definition.
 */
package com.vapi.api.types;

import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.annotation.Nulls;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.vapi.api.core.ObjectMappers;
import java.time.OffsetDateTime;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import org.jetbrains.annotations.NotNull;

@JsonInclude(JsonInclude.Include.NON_ABSENT)
@JsonDeserialize(builder = Session.Builder.class)
public final class Session {
    private final String id;

    private final String orgId;

    private final OffsetDateTime createdAt;

    private final OffsetDateTime updatedAt;

    private final Optional<String> name;

    private final Optional<SessionStatus> status;

    private final Optional<Double> expirationSeconds;

    private final Optional<String> assistantId;

    private final Optional<CreateAssistantDto> assistant;

    private final Optional<List<SessionMessagesItem>> messages;

    private final Optional<CreateCustomerDto> customer;

    private final Optional<String> phoneNumberId;

    private final Optional<ImportTwilioPhoneNumberDto> phoneNumber;

    private final Map<String, Object> additionalProperties;

    private Session(
            String id,
            String orgId,
            OffsetDateTime createdAt,
            OffsetDateTime updatedAt,
            Optional<String> name,
            Optional<SessionStatus> status,
            Optional<Double> expirationSeconds,
            Optional<String> assistantId,
            Optional<CreateAssistantDto> assistant,
            Optional<List<SessionMessagesItem>> messages,
            Optional<CreateCustomerDto> customer,
            Optional<String> phoneNumberId,
            Optional<ImportTwilioPhoneNumberDto> phoneNumber,
            Map<String, Object> additionalProperties) {
        this.id = id;
        this.orgId = orgId;
        this.createdAt = createdAt;
        this.updatedAt = updatedAt;
        this.name = name;
        this.status = status;
        this.expirationSeconds = expirationSeconds;
        this.assistantId = assistantId;
        this.assistant = assistant;
        this.messages = messages;
        this.customer = customer;
        this.phoneNumberId = phoneNumberId;
        this.phoneNumber = phoneNumber;
        this.additionalProperties = additionalProperties;
    }

    /**
     * @return This is the unique identifier for the session.
     */
    @JsonProperty("id")
    public String getId() {
        return id;
    }

    /**
     * @return This is the unique identifier for the organization that owns this session.
     */
    @JsonProperty("orgId")
    public String getOrgId() {
        return orgId;
    }

    /**
     * @return This is the ISO 8601 timestamp indicating when the session was created.
     */
    @JsonProperty("createdAt")
    public OffsetDateTime getCreatedAt() {
        return createdAt;
    }

    /**
     * @return This is the ISO 8601 timestamp indicating when the session was last updated.
     */
    @JsonProperty("updatedAt")
    public OffsetDateTime getUpdatedAt() {
        return updatedAt;
    }

    /**
     * @return This is a user-defined name for the session. Maximum length is 40 characters.
     */
    @JsonProperty("name")
    public Optional<String> getName() {
        return name;
    }

    /**
     * @return This is the current status of the session. Can be either 'active' or 'completed'.
     */
    @JsonProperty("status")
    public Optional<SessionStatus> getStatus() {
        return status;
    }

    /**
     * @return Session expiration time in seconds. Defaults to 24 hours (86400 seconds) if not set.
     */
    @JsonProperty("expirationSeconds")
    public Optional<Double> getExpirationSeconds() {
        return expirationSeconds;
    }

    /**
     * @return This is the ID of the assistant associated with this session. Use this when referencing an existing assistant.
     */
    @JsonProperty("assistantId")
    public Optional<String> getAssistantId() {
        return assistantId;
    }

    /**
     * @return This is the assistant configuration for this session. Use this when creating a new assistant configuration.
     * If assistantId is provided, this will be ignored.
     */
    @JsonProperty("assistant")
    public Optional<CreateAssistantDto> getAssistant() {
        return assistant;
    }

    /**
     * @return This is an array of chat messages in the session.
     */
    @JsonProperty("messages")
    public Optional<List<SessionMessagesItem>> getMessages() {
        return messages;
    }

    /**
     * @return This is the customer information associated with this session.
     */
    @JsonProperty("customer")
    public Optional<CreateCustomerDto> getCustomer() {
        return customer;
    }

    /**
     * @return This is the ID of the phone number associated with this session.
     */
    @JsonProperty("phoneNumberId")
    public Optional<String> getPhoneNumberId() {
        return phoneNumberId;
    }

    /**
     * @return This is the phone number configuration for this session.
     */
    @JsonProperty("phoneNumber")
    public Optional<ImportTwilioPhoneNumberDto> getPhoneNumber() {
        return phoneNumber;
    }

    @java.lang.Override
    public boolean equals(Object other) {
        if (this == other) return true;
        return other instanceof Session && equalTo((Session) other);
    }

    @JsonAnyGetter
    public Map<String, Object> getAdditionalProperties() {
        return this.additionalProperties;
    }

    private boolean equalTo(Session other) {
        return id.equals(other.id)
                && orgId.equals(other.orgId)
                && createdAt.equals(other.createdAt)
                && updatedAt.equals(other.updatedAt)
                && name.equals(other.name)
                && status.equals(other.status)
                && expirationSeconds.equals(other.expirationSeconds)
                && assistantId.equals(other.assistantId)
                && assistant.equals(other.assistant)
                && messages.equals(other.messages)
                && customer.equals(other.customer)
                && phoneNumberId.equals(other.phoneNumberId)
                && phoneNumber.equals(other.phoneNumber);
    }

    @java.lang.Override
    public int hashCode() {
        return Objects.hash(
                this.id,
                this.orgId,
                this.createdAt,
                this.updatedAt,
                this.name,
                this.status,
                this.expirationSeconds,
                this.assistantId,
                this.assistant,
                this.messages,
                this.customer,
                this.phoneNumberId,
                this.phoneNumber);
    }

    @java.lang.Override
    public String toString() {
        return ObjectMappers.stringify(this);
    }

    public static IdStage builder() {
        return new Builder();
    }

    public interface IdStage {
        /**
         * <p>This is the unique identifier for the session.</p>
         */
        OrgIdStage id(@NotNull String id);

        Builder from(Session other);
    }

    public interface OrgIdStage {
        /**
         * <p>This is the unique identifier for the organization that owns this session.</p>
         */
        CreatedAtStage orgId(@NotNull String orgId);
    }

    public interface CreatedAtStage {
        /**
         * <p>This is the ISO 8601 timestamp indicating when the session was created.</p>
         */
        UpdatedAtStage createdAt(@NotNull OffsetDateTime createdAt);
    }

    public interface UpdatedAtStage {
        /**
         * <p>This is the ISO 8601 timestamp indicating when the session was last updated.</p>
         */
        _FinalStage updatedAt(@NotNull OffsetDateTime updatedAt);
    }

    public interface _FinalStage {
        Session build();

        /**
         * <p>This is a user-defined name for the session. Maximum length is 40 characters.</p>
         */
        _FinalStage name(Optional<String> name);

        _FinalStage name(String name);

        /**
         * <p>This is the current status of the session. Can be either 'active' or 'completed'.</p>
         */
        _FinalStage status(Optional<SessionStatus> status);

        _FinalStage status(SessionStatus status);

        /**
         * <p>Session expiration time in seconds. Defaults to 24 hours (86400 seconds) if not set.</p>
         */
        _FinalStage expirationSeconds(Optional<Double> expirationSeconds);

        _FinalStage expirationSeconds(Double expirationSeconds);

        /**
         * <p>This is the ID of the assistant associated with this session. Use this when referencing an existing assistant.</p>
         */
        _FinalStage assistantId(Optional<String> assistantId);

        _FinalStage assistantId(String assistantId);

        /**
         * <p>This is the assistant configuration for this session. Use this when creating a new assistant configuration.
         * If assistantId is provided, this will be ignored.</p>
         */
        _FinalStage assistant(Optional<CreateAssistantDto> assistant);

        _FinalStage assistant(CreateAssistantDto assistant);

        /**
         * <p>This is an array of chat messages in the session.</p>
         */
        _FinalStage messages(Optional<List<SessionMessagesItem>> messages);

        _FinalStage messages(List<SessionMessagesItem> messages);

        /**
         * <p>This is the customer information associated with this session.</p>
         */
        _FinalStage customer(Optional<CreateCustomerDto> customer);

        _FinalStage customer(CreateCustomerDto customer);

        /**
         * <p>This is the ID of the phone number associated with this session.</p>
         */
        _FinalStage phoneNumberId(Optional<String> phoneNumberId);

        _FinalStage phoneNumberId(String phoneNumberId);

        /**
         * <p>This is the phone number configuration for this session.</p>
         */
        _FinalStage phoneNumber(Optional<ImportTwilioPhoneNumberDto> phoneNumber);

        _FinalStage phoneNumber(ImportTwilioPhoneNumberDto phoneNumber);
    }

    @JsonIgnoreProperties(ignoreUnknown = true)
    public static final class Builder implements IdStage, OrgIdStage, CreatedAtStage, UpdatedAtStage, _FinalStage {
        private String id;

        private String orgId;

        private OffsetDateTime createdAt;

        private OffsetDateTime updatedAt;

        private Optional<ImportTwilioPhoneNumberDto> phoneNumber = Optional.empty();

        private Optional<String> phoneNumberId = Optional.empty();

        private Optional<CreateCustomerDto> customer = Optional.empty();

        private Optional<List<SessionMessagesItem>> messages = Optional.empty();

        private Optional<CreateAssistantDto> assistant = Optional.empty();

        private Optional<String> assistantId = Optional.empty();

        private Optional<Double> expirationSeconds = Optional.empty();

        private Optional<SessionStatus> status = Optional.empty();

        private Optional<String> name = Optional.empty();

        @JsonAnySetter
        private Map<String, Object> additionalProperties = new HashMap<>();

        private Builder() {}

        @java.lang.Override
        public Builder from(Session other) {
            id(other.getId());
            orgId(other.getOrgId());
            createdAt(other.getCreatedAt());
            updatedAt(other.getUpdatedAt());
            name(other.getName());
            status(other.getStatus());
            expirationSeconds(other.getExpirationSeconds());
            assistantId(other.getAssistantId());
            assistant(other.getAssistant());
            messages(other.getMessages());
            customer(other.getCustomer());
            phoneNumberId(other.getPhoneNumberId());
            phoneNumber(other.getPhoneNumber());
            return this;
        }

        /**
         * <p>This is the unique identifier for the session.</p>
         * <p>This is the unique identifier for the session.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        @JsonSetter("id")
        public OrgIdStage id(@NotNull String id) {
            this.id = Objects.requireNonNull(id, "id must not be null");
            return this;
        }

        /**
         * <p>This is the unique identifier for the organization that owns this session.</p>
         * <p>This is the unique identifier for the organization that owns this session.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        @JsonSetter("orgId")
        public CreatedAtStage orgId(@NotNull String orgId) {
            this.orgId = Objects.requireNonNull(orgId, "orgId must not be null");
            return this;
        }

        /**
         * <p>This is the ISO 8601 timestamp indicating when the session was created.</p>
         * <p>This is the ISO 8601 timestamp indicating when the session was created.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        @JsonSetter("createdAt")
        public UpdatedAtStage createdAt(@NotNull OffsetDateTime createdAt) {
            this.createdAt = Objects.requireNonNull(createdAt, "createdAt must not be null");
            return this;
        }

        /**
         * <p>This is the ISO 8601 timestamp indicating when the session was last updated.</p>
         * <p>This is the ISO 8601 timestamp indicating when the session was last updated.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        @JsonSetter("updatedAt")
        public _FinalStage updatedAt(@NotNull OffsetDateTime updatedAt) {
            this.updatedAt = Objects.requireNonNull(updatedAt, "updatedAt must not be null");
            return this;
        }

        /**
         * <p>This is the phone number configuration for this session.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        public _FinalStage phoneNumber(ImportTwilioPhoneNumberDto phoneNumber) {
            this.phoneNumber = Optional.ofNullable(phoneNumber);
            return this;
        }

        /**
         * <p>This is the phone number configuration for this session.</p>
         */
        @java.lang.Override
        @JsonSetter(value = "phoneNumber", nulls = Nulls.SKIP)
        public _FinalStage phoneNumber(Optional<ImportTwilioPhoneNumberDto> phoneNumber) {
            this.phoneNumber = phoneNumber;
            return this;
        }

        /**
         * <p>This is the ID of the phone number associated with this session.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        public _FinalStage phoneNumberId(String phoneNumberId) {
            this.phoneNumberId = Optional.ofNullable(phoneNumberId);
            return this;
        }

        /**
         * <p>This is the ID of the phone number associated with this session.</p>
         */
        @java.lang.Override
        @JsonSetter(value = "phoneNumberId", nulls = Nulls.SKIP)
        public _FinalStage phoneNumberId(Optional<String> phoneNumberId) {
            this.phoneNumberId = phoneNumberId;
            return this;
        }

        /**
         * <p>This is the customer information associated with this session.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        public _FinalStage customer(CreateCustomerDto customer) {
            this.customer = Optional.ofNullable(customer);
            return this;
        }

        /**
         * <p>This is the customer information associated with this session.</p>
         */
        @java.lang.Override
        @JsonSetter(value = "customer", nulls = Nulls.SKIP)
        public _FinalStage customer(Optional<CreateCustomerDto> customer) {
            this.customer = customer;
            return this;
        }

        /**
         * <p>This is an array of chat messages in the session.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        public _FinalStage messages(List<SessionMessagesItem> messages) {
            this.messages = Optional.ofNullable(messages);
            return this;
        }

        /**
         * <p>This is an array of chat messages in the session.</p>
         */
        @java.lang.Override
        @JsonSetter(value = "messages", nulls = Nulls.SKIP)
        public _FinalStage messages(Optional<List<SessionMessagesItem>> messages) {
            this.messages = messages;
            return this;
        }

        /**
         * <p>This is the assistant configuration for this session. Use this when creating a new assistant configuration.
         * If assistantId is provided, this will be ignored.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        public _FinalStage assistant(CreateAssistantDto assistant) {
            this.assistant = Optional.ofNullable(assistant);
            return this;
        }

        /**
         * <p>This is the assistant configuration for this session. Use this when creating a new assistant configuration.
         * If assistantId is provided, this will be ignored.</p>
         */
        @java.lang.Override
        @JsonSetter(value = "assistant", nulls = Nulls.SKIP)
        public _FinalStage assistant(Optional<CreateAssistantDto> assistant) {
            this.assistant = assistant;
            return this;
        }

        /**
         * <p>This is the ID of the assistant associated with this session. Use this when referencing an existing assistant.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        public _FinalStage assistantId(String assistantId) {
            this.assistantId = Optional.ofNullable(assistantId);
            return this;
        }

        /**
         * <p>This is the ID of the assistant associated with this session. Use this when referencing an existing assistant.</p>
         */
        @java.lang.Override
        @JsonSetter(value = "assistantId", nulls = Nulls.SKIP)
        public _FinalStage assistantId(Optional<String> assistantId) {
            this.assistantId = assistantId;
            return this;
        }

        /**
         * <p>Session expiration time in seconds. Defaults to 24 hours (86400 seconds) if not set.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        public _FinalStage expirationSeconds(Double expirationSeconds) {
            this.expirationSeconds = Optional.ofNullable(expirationSeconds);
            return this;
        }

        /**
         * <p>Session expiration time in seconds. Defaults to 24 hours (86400 seconds) if not set.</p>
         */
        @java.lang.Override
        @JsonSetter(value = "expirationSeconds", nulls = Nulls.SKIP)
        public _FinalStage expirationSeconds(Optional<Double> expirationSeconds) {
            this.expirationSeconds = expirationSeconds;
            return this;
        }

        /**
         * <p>This is the current status of the session. Can be either 'active' or 'completed'.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        public _FinalStage status(SessionStatus status) {
            this.status = Optional.ofNullable(status);
            return this;
        }

        /**
         * <p>This is the current status of the session. Can be either 'active' or 'completed'.</p>
         */
        @java.lang.Override
        @JsonSetter(value = "status", nulls = Nulls.SKIP)
        public _FinalStage status(Optional<SessionStatus> status) {
            this.status = status;
            return this;
        }

        /**
         * <p>This is a user-defined name for the session. Maximum length is 40 characters.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        public _FinalStage name(String name) {
            this.name = Optional.ofNullable(name);
            return this;
        }

        /**
         * <p>This is a user-defined name for the session. Maximum length is 40 characters.</p>
         */
        @java.lang.Override
        @JsonSetter(value = "name", nulls = Nulls.SKIP)
        public _FinalStage name(Optional<String> name) {
            this.name = name;
            return this;
        }

        @java.lang.Override
        public Session build() {
            return new Session(
                    id,
                    orgId,
                    createdAt,
                    updatedAt,
                    name,
                    status,
                    expirationSeconds,
                    assistantId,
                    assistant,
                    messages,
                    customer,
                    phoneNumberId,
                    phoneNumber,
                    additionalProperties);
        }
    }
}
