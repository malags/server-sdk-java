/**
 * This file was auto-generated by Fern from our API Definition.
 */
package com.vapi.api.resources.chats;

import com.vapi.api.core.ClientOptions;
import com.vapi.api.core.RequestOptions;
import com.vapi.api.resources.chats.requests.ChatsListRequest;
import com.vapi.api.resources.chats.requests.CreateChatDto;
import com.vapi.api.resources.chats.requests.OpenAiResponsesRequest;
import com.vapi.api.resources.chats.types.ChatsCreateResponse;
import com.vapi.api.resources.chats.types.ChatsCreateResponseResponse;
import com.vapi.api.types.Chat;
import com.vapi.api.types.ChatPaginatedResponse;
import java.util.concurrent.CompletableFuture;

public class AsyncChatsClient {
    protected final ClientOptions clientOptions;

    private final AsyncRawChatsClient rawClient;

    public AsyncChatsClient(ClientOptions clientOptions) {
        this.clientOptions = clientOptions;
        this.rawClient = new AsyncRawChatsClient(clientOptions);
    }

    /**
     * Get responses with HTTP metadata like headers
     */
    public AsyncRawChatsClient withRawResponse() {
        return this.rawClient;
    }

    public CompletableFuture<ChatPaginatedResponse> list() {
        return this.rawClient.list().thenApply(response -> response.body());
    }

    public CompletableFuture<ChatPaginatedResponse> list(ChatsListRequest request) {
        return this.rawClient.list(request).thenApply(response -> response.body());
    }

    public CompletableFuture<ChatPaginatedResponse> list(ChatsListRequest request, RequestOptions requestOptions) {
        return this.rawClient.list(request, requestOptions).thenApply(response -> response.body());
    }

    /**
     * Creates a new chat. Requires at least one of: assistantId/assistant, sessionId, or previousChatId. Note: sessionId and previousChatId are mutually exclusive.
     */
    public CompletableFuture<ChatsCreateResponse> create(CreateChatDto request) {
        return this.rawClient.create(request).thenApply(response -> response.body());
    }

    /**
     * Creates a new chat. Requires at least one of: assistantId/assistant, sessionId, or previousChatId. Note: sessionId and previousChatId are mutually exclusive.
     */
    public CompletableFuture<ChatsCreateResponse> create(CreateChatDto request, RequestOptions requestOptions) {
        return this.rawClient.create(request, requestOptions).thenApply(response -> response.body());
    }

    public CompletableFuture<Chat> get(String id) {
        return this.rawClient.get(id).thenApply(response -> response.body());
    }

    public CompletableFuture<Chat> get(String id, RequestOptions requestOptions) {
        return this.rawClient.get(id, requestOptions).thenApply(response -> response.body());
    }

    public CompletableFuture<Chat> delete(String id) {
        return this.rawClient.delete(id).thenApply(response -> response.body());
    }

    public CompletableFuture<Chat> delete(String id, RequestOptions requestOptions) {
        return this.rawClient.delete(id, requestOptions).thenApply(response -> response.body());
    }

    public CompletableFuture<ChatsCreateResponseResponse> createResponse(OpenAiResponsesRequest request) {
        return this.rawClient.createResponse(request).thenApply(response -> response.body());
    }

    public CompletableFuture<ChatsCreateResponseResponse> createResponse(
            OpenAiResponsesRequest request, RequestOptions requestOptions) {
        return this.rawClient.createResponse(request, requestOptions).thenApply(response -> response.body());
    }
}
