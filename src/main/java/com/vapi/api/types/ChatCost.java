/**
 * This file was auto-generated by Fern from our API Definition.
 */
package com.vapi.api.types;

import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.vapi.api.core.ObjectMappers;
import java.util.HashMap;
import java.util.Map;
import java.util.Objects;

@JsonInclude(JsonInclude.Include.NON_ABSENT)
@JsonDeserialize(builder = ChatCost.Builder.class)
public final class ChatCost {
    private final double cost;

    private final Map<String, Object> additionalProperties;

    private ChatCost(double cost, Map<String, Object> additionalProperties) {
        this.cost = cost;
        this.additionalProperties = additionalProperties;
    }

    /**
     * @return This is the cost of the component in USD.
     */
    @JsonProperty("cost")
    public double getCost() {
        return cost;
    }

    @java.lang.Override
    public boolean equals(Object other) {
        if (this == other) return true;
        return other instanceof ChatCost && equalTo((ChatCost) other);
    }

    @JsonAnyGetter
    public Map<String, Object> getAdditionalProperties() {
        return this.additionalProperties;
    }

    private boolean equalTo(ChatCost other) {
        return cost == other.cost;
    }

    @java.lang.Override
    public int hashCode() {
        return Objects.hash(this.cost);
    }

    @java.lang.Override
    public String toString() {
        return ObjectMappers.stringify(this);
    }

    public static CostStage builder() {
        return new Builder();
    }

    public interface CostStage {
        /**
         * <p>This is the cost of the component in USD.</p>
         */
        _FinalStage cost(double cost);

        Builder from(ChatCost other);
    }

    public interface _FinalStage {
        ChatCost build();
    }

    @JsonIgnoreProperties(ignoreUnknown = true)
    public static final class Builder implements CostStage, _FinalStage {
        private double cost;

        @JsonAnySetter
        private Map<String, Object> additionalProperties = new HashMap<>();

        private Builder() {}

        @java.lang.Override
        public Builder from(ChatCost other) {
            cost(other.getCost());
            return this;
        }

        /**
         * <p>This is the cost of the component in USD.</p>
         * <p>This is the cost of the component in USD.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        @JsonSetter("cost")
        public _FinalStage cost(double cost) {
            this.cost = cost;
            return this;
        }

        @java.lang.Override
        public ChatCost build() {
            return new ChatCost(cost, additionalProperties);
        }
    }
}
