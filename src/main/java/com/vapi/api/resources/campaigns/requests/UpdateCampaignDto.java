/**
 * This file was auto-generated by Fern from our API Definition.
 */
package com.vapi.api.resources.campaigns.requests;

import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.annotation.Nulls;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.vapi.api.core.ObjectMappers;
import com.vapi.api.types.SchedulePlan;
import java.util.HashMap;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;

@JsonInclude(JsonInclude.Include.NON_ABSENT)
@JsonDeserialize(builder = UpdateCampaignDto.Builder.class)
public final class UpdateCampaignDto {
    private final Optional<String> name;

    private final Optional<String> assistantId;

    private final Optional<String> workflowId;

    private final Optional<String> phoneNumberId;

    private final Optional<SchedulePlan> schedulePlan;

    private final Optional<String> status;

    private final Map<String, Object> additionalProperties;

    private UpdateCampaignDto(
            Optional<String> name,
            Optional<String> assistantId,
            Optional<String> workflowId,
            Optional<String> phoneNumberId,
            Optional<SchedulePlan> schedulePlan,
            Optional<String> status,
            Map<String, Object> additionalProperties) {
        this.name = name;
        this.assistantId = assistantId;
        this.workflowId = workflowId;
        this.phoneNumberId = phoneNumberId;
        this.schedulePlan = schedulePlan;
        this.status = status;
        this.additionalProperties = additionalProperties;
    }

    /**
     * @return This is the name of the campaign. This is just for your own reference.
     */
    @JsonProperty("name")
    public Optional<String> getName() {
        return name;
    }

    /**
     * @return This is the assistant ID that will be used for the campaign calls.
     * Can only be updated if campaign is not in progress or has ended.
     */
    @JsonProperty("assistantId")
    public Optional<String> getAssistantId() {
        return assistantId;
    }

    /**
     * @return This is the workflow ID that will be used for the campaign calls.
     * Can only be updated if campaign is not in progress or has ended.
     */
    @JsonProperty("workflowId")
    public Optional<String> getWorkflowId() {
        return workflowId;
    }

    /**
     * @return This is the phone number ID that will be used for the campaign calls.
     * Can only be updated if campaign is not in progress or has ended.
     */
    @JsonProperty("phoneNumberId")
    public Optional<String> getPhoneNumberId() {
        return phoneNumberId;
    }

    /**
     * @return This is the schedule plan for the campaign.
     * Can only be updated if campaign is not in progress or has ended.
     */
    @JsonProperty("schedulePlan")
    public Optional<SchedulePlan> getSchedulePlan() {
        return schedulePlan;
    }

    /**
     * @return This is the status of the campaign.
     * Can only be updated to 'ended' if you want to end the campaign.
     * When set to 'ended', it will delete all scheduled calls. Calls in progress will be allowed to complete.
     */
    @JsonProperty("status")
    public Optional<String> getStatus() {
        return status;
    }

    @java.lang.Override
    public boolean equals(Object other) {
        if (this == other) return true;
        return other instanceof UpdateCampaignDto && equalTo((UpdateCampaignDto) other);
    }

    @JsonAnyGetter
    public Map<String, Object> getAdditionalProperties() {
        return this.additionalProperties;
    }

    private boolean equalTo(UpdateCampaignDto other) {
        return name.equals(other.name)
                && assistantId.equals(other.assistantId)
                && workflowId.equals(other.workflowId)
                && phoneNumberId.equals(other.phoneNumberId)
                && schedulePlan.equals(other.schedulePlan)
                && status.equals(other.status);
    }

    @java.lang.Override
    public int hashCode() {
        return Objects.hash(
                this.name, this.assistantId, this.workflowId, this.phoneNumberId, this.schedulePlan, this.status);
    }

    @java.lang.Override
    public String toString() {
        return ObjectMappers.stringify(this);
    }

    public static Builder builder() {
        return new Builder();
    }

    @JsonIgnoreProperties(ignoreUnknown = true)
    public static final class Builder {
        private Optional<String> name = Optional.empty();

        private Optional<String> assistantId = Optional.empty();

        private Optional<String> workflowId = Optional.empty();

        private Optional<String> phoneNumberId = Optional.empty();

        private Optional<SchedulePlan> schedulePlan = Optional.empty();

        private Optional<String> status = Optional.empty();

        @JsonAnySetter
        private Map<String, Object> additionalProperties = new HashMap<>();

        private Builder() {}

        public Builder from(UpdateCampaignDto other) {
            name(other.getName());
            assistantId(other.getAssistantId());
            workflowId(other.getWorkflowId());
            phoneNumberId(other.getPhoneNumberId());
            schedulePlan(other.getSchedulePlan());
            status(other.getStatus());
            return this;
        }

        /**
         * <p>This is the name of the campaign. This is just for your own reference.</p>
         */
        @JsonSetter(value = "name", nulls = Nulls.SKIP)
        public Builder name(Optional<String> name) {
            this.name = name;
            return this;
        }

        public Builder name(String name) {
            this.name = Optional.ofNullable(name);
            return this;
        }

        /**
         * <p>This is the assistant ID that will be used for the campaign calls.
         * Can only be updated if campaign is not in progress or has ended.</p>
         */
        @JsonSetter(value = "assistantId", nulls = Nulls.SKIP)
        public Builder assistantId(Optional<String> assistantId) {
            this.assistantId = assistantId;
            return this;
        }

        public Builder assistantId(String assistantId) {
            this.assistantId = Optional.ofNullable(assistantId);
            return this;
        }

        /**
         * <p>This is the workflow ID that will be used for the campaign calls.
         * Can only be updated if campaign is not in progress or has ended.</p>
         */
        @JsonSetter(value = "workflowId", nulls = Nulls.SKIP)
        public Builder workflowId(Optional<String> workflowId) {
            this.workflowId = workflowId;
            return this;
        }

        public Builder workflowId(String workflowId) {
            this.workflowId = Optional.ofNullable(workflowId);
            return this;
        }

        /**
         * <p>This is the phone number ID that will be used for the campaign calls.
         * Can only be updated if campaign is not in progress or has ended.</p>
         */
        @JsonSetter(value = "phoneNumberId", nulls = Nulls.SKIP)
        public Builder phoneNumberId(Optional<String> phoneNumberId) {
            this.phoneNumberId = phoneNumberId;
            return this;
        }

        public Builder phoneNumberId(String phoneNumberId) {
            this.phoneNumberId = Optional.ofNullable(phoneNumberId);
            return this;
        }

        /**
         * <p>This is the schedule plan for the campaign.
         * Can only be updated if campaign is not in progress or has ended.</p>
         */
        @JsonSetter(value = "schedulePlan", nulls = Nulls.SKIP)
        public Builder schedulePlan(Optional<SchedulePlan> schedulePlan) {
            this.schedulePlan = schedulePlan;
            return this;
        }

        public Builder schedulePlan(SchedulePlan schedulePlan) {
            this.schedulePlan = Optional.ofNullable(schedulePlan);
            return this;
        }

        /**
         * <p>This is the status of the campaign.
         * Can only be updated to 'ended' if you want to end the campaign.
         * When set to 'ended', it will delete all scheduled calls. Calls in progress will be allowed to complete.</p>
         */
        @JsonSetter(value = "status", nulls = Nulls.SKIP)
        public Builder status(Optional<String> status) {
            this.status = status;
            return this;
        }

        public Builder status(String status) {
            this.status = Optional.ofNullable(status);
            return this;
        }

        public UpdateCampaignDto build() {
            return new UpdateCampaignDto(
                    name, assistantId, workflowId, phoneNumberId, schedulePlan, status, additionalProperties);
        }
    }
}
