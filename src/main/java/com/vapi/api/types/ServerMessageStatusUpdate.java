/**
 * This file was auto-generated by Fern from our API Definition.
 */
package com.vapi.api.types;

import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.annotation.Nulls;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.vapi.api.core.ObjectMappers;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import org.jetbrains.annotations.NotNull;

@JsonInclude(JsonInclude.Include.NON_ABSENT)
@JsonDeserialize(builder = ServerMessageStatusUpdate.Builder.class)
public final class ServerMessageStatusUpdate {
    private final Optional<ServerMessageStatusUpdatePhoneNumber> phoneNumber;

    private final ServerMessageStatusUpdateStatus status;

    private final Optional<ServerMessageStatusUpdateEndedReason> endedReason;

    private final Optional<List<ServerMessageStatusUpdateMessagesItem>> messages;

    private final Optional<List<OpenAiMessage>> messagesOpenAiFormatted;

    private final Optional<ServerMessageStatusUpdateDestination> destination;

    private final Optional<Double> timestamp;

    private final Optional<Artifact> artifact;

    private final Optional<CreateAssistantDto> assistant;

    private final Optional<CreateCustomerDto> customer;

    private final Optional<Call> call;

    private final Optional<Chat> chat;

    private final Optional<String> transcript;

    private final Optional<String> summary;

    private final Optional<Map<String, Object>> inboundPhoneCallDebuggingArtifacts;

    private final Map<String, Object> additionalProperties;

    private ServerMessageStatusUpdate(
            Optional<ServerMessageStatusUpdatePhoneNumber> phoneNumber,
            ServerMessageStatusUpdateStatus status,
            Optional<ServerMessageStatusUpdateEndedReason> endedReason,
            Optional<List<ServerMessageStatusUpdateMessagesItem>> messages,
            Optional<List<OpenAiMessage>> messagesOpenAiFormatted,
            Optional<ServerMessageStatusUpdateDestination> destination,
            Optional<Double> timestamp,
            Optional<Artifact> artifact,
            Optional<CreateAssistantDto> assistant,
            Optional<CreateCustomerDto> customer,
            Optional<Call> call,
            Optional<Chat> chat,
            Optional<String> transcript,
            Optional<String> summary,
            Optional<Map<String, Object>> inboundPhoneCallDebuggingArtifacts,
            Map<String, Object> additionalProperties) {
        this.phoneNumber = phoneNumber;
        this.status = status;
        this.endedReason = endedReason;
        this.messages = messages;
        this.messagesOpenAiFormatted = messagesOpenAiFormatted;
        this.destination = destination;
        this.timestamp = timestamp;
        this.artifact = artifact;
        this.assistant = assistant;
        this.customer = customer;
        this.call = call;
        this.chat = chat;
        this.transcript = transcript;
        this.summary = summary;
        this.inboundPhoneCallDebuggingArtifacts = inboundPhoneCallDebuggingArtifacts;
        this.additionalProperties = additionalProperties;
    }

    /**
     * @return This is the phone number that the message is associated with.
     */
    @JsonProperty("phoneNumber")
    public Optional<ServerMessageStatusUpdatePhoneNumber> getPhoneNumber() {
        return phoneNumber;
    }

    /**
     * @return This is the type of the message. &quot;status-update&quot; is sent whenever the <code>call.status</code> changes.
     */
    @JsonProperty("type")
    public String getType() {
        return "status-update";
    }

    /**
     * @return This is the status of the call.
     */
    @JsonProperty("status")
    public ServerMessageStatusUpdateStatus getStatus() {
        return status;
    }

    /**
     * @return This is the reason the call ended. This is only sent if the status is &quot;ended&quot;.
     */
    @JsonProperty("endedReason")
    public Optional<ServerMessageStatusUpdateEndedReason> getEndedReason() {
        return endedReason;
    }

    /**
     * @return These are the conversation messages of the call. This is only sent if the status is &quot;forwarding&quot;.
     */
    @JsonProperty("messages")
    public Optional<List<ServerMessageStatusUpdateMessagesItem>> getMessages() {
        return messages;
    }

    /**
     * @return These are the conversation messages of the call. This is only sent if the status is &quot;forwarding&quot;.
     */
    @JsonProperty("messagesOpenAIFormatted")
    public Optional<List<OpenAiMessage>> getMessagesOpenAiFormatted() {
        return messagesOpenAiFormatted;
    }

    /**
     * @return This is the destination the call is being transferred to. This is only sent if the status is &quot;forwarding&quot;.
     */
    @JsonProperty("destination")
    public Optional<ServerMessageStatusUpdateDestination> getDestination() {
        return destination;
    }

    /**
     * @return This is the timestamp of the message.
     */
    @JsonProperty("timestamp")
    public Optional<Double> getTimestamp() {
        return timestamp;
    }

    /**
     * @return This is a live version of the <code>call.artifact</code>.
     * <p>This matches what is stored on <code>call.artifact</code> after the call.</p>
     */
    @JsonProperty("artifact")
    public Optional<Artifact> getArtifact() {
        return artifact;
    }

    /**
     * @return This is the assistant that the message is associated with.
     */
    @JsonProperty("assistant")
    public Optional<CreateAssistantDto> getAssistant() {
        return assistant;
    }

    /**
     * @return This is the customer that the message is associated with.
     */
    @JsonProperty("customer")
    public Optional<CreateCustomerDto> getCustomer() {
        return customer;
    }

    /**
     * @return This is the call that the message is associated with.
     */
    @JsonProperty("call")
    public Optional<Call> getCall() {
        return call;
    }

    /**
     * @return This is the chat object.
     */
    @JsonProperty("chat")
    public Optional<Chat> getChat() {
        return chat;
    }

    /**
     * @return This is the transcript of the call. This is only sent if the status is &quot;forwarding&quot;.
     */
    @JsonProperty("transcript")
    public Optional<String> getTranscript() {
        return transcript;
    }

    /**
     * @return This is the summary of the call. This is only sent if the status is &quot;forwarding&quot;.
     */
    @JsonProperty("summary")
    public Optional<String> getSummary() {
        return summary;
    }

    /**
     * @return This is the inbound phone call debugging artifacts. This is only sent if the status is &quot;ended&quot; and there was an error accepting the inbound phone call.
     * <p>This will include any errors related to the &quot;assistant-request&quot; if one was made.</p>
     */
    @JsonProperty("inboundPhoneCallDebuggingArtifacts")
    public Optional<Map<String, Object>> getInboundPhoneCallDebuggingArtifacts() {
        return inboundPhoneCallDebuggingArtifacts;
    }

    @java.lang.Override
    public boolean equals(Object other) {
        if (this == other) return true;
        return other instanceof ServerMessageStatusUpdate && equalTo((ServerMessageStatusUpdate) other);
    }

    @JsonAnyGetter
    public Map<String, Object> getAdditionalProperties() {
        return this.additionalProperties;
    }

    private boolean equalTo(ServerMessageStatusUpdate other) {
        return phoneNumber.equals(other.phoneNumber)
                && status.equals(other.status)
                && endedReason.equals(other.endedReason)
                && messages.equals(other.messages)
                && messagesOpenAiFormatted.equals(other.messagesOpenAiFormatted)
                && destination.equals(other.destination)
                && timestamp.equals(other.timestamp)
                && artifact.equals(other.artifact)
                && assistant.equals(other.assistant)
                && customer.equals(other.customer)
                && call.equals(other.call)
                && chat.equals(other.chat)
                && transcript.equals(other.transcript)
                && summary.equals(other.summary)
                && inboundPhoneCallDebuggingArtifacts.equals(other.inboundPhoneCallDebuggingArtifacts);
    }

    @java.lang.Override
    public int hashCode() {
        return Objects.hash(
                this.phoneNumber,
                this.status,
                this.endedReason,
                this.messages,
                this.messagesOpenAiFormatted,
                this.destination,
                this.timestamp,
                this.artifact,
                this.assistant,
                this.customer,
                this.call,
                this.chat,
                this.transcript,
                this.summary,
                this.inboundPhoneCallDebuggingArtifacts);
    }

    @java.lang.Override
    public String toString() {
        return ObjectMappers.stringify(this);
    }

    public static StatusStage builder() {
        return new Builder();
    }

    public interface StatusStage {
        /**
         * <p>This is the status of the call.</p>
         */
        _FinalStage status(@NotNull ServerMessageStatusUpdateStatus status);

        Builder from(ServerMessageStatusUpdate other);
    }

    public interface _FinalStage {
        ServerMessageStatusUpdate build();

        /**
         * <p>This is the phone number that the message is associated with.</p>
         */
        _FinalStage phoneNumber(Optional<ServerMessageStatusUpdatePhoneNumber> phoneNumber);

        _FinalStage phoneNumber(ServerMessageStatusUpdatePhoneNumber phoneNumber);

        /**
         * <p>This is the reason the call ended. This is only sent if the status is &quot;ended&quot;.</p>
         */
        _FinalStage endedReason(Optional<ServerMessageStatusUpdateEndedReason> endedReason);

        _FinalStage endedReason(ServerMessageStatusUpdateEndedReason endedReason);

        /**
         * <p>These are the conversation messages of the call. This is only sent if the status is &quot;forwarding&quot;.</p>
         */
        _FinalStage messages(Optional<List<ServerMessageStatusUpdateMessagesItem>> messages);

        _FinalStage messages(List<ServerMessageStatusUpdateMessagesItem> messages);

        /**
         * <p>These are the conversation messages of the call. This is only sent if the status is &quot;forwarding&quot;.</p>
         */
        _FinalStage messagesOpenAiFormatted(Optional<List<OpenAiMessage>> messagesOpenAiFormatted);

        _FinalStage messagesOpenAiFormatted(List<OpenAiMessage> messagesOpenAiFormatted);

        /**
         * <p>This is the destination the call is being transferred to. This is only sent if the status is &quot;forwarding&quot;.</p>
         */
        _FinalStage destination(Optional<ServerMessageStatusUpdateDestination> destination);

        _FinalStage destination(ServerMessageStatusUpdateDestination destination);

        /**
         * <p>This is the timestamp of the message.</p>
         */
        _FinalStage timestamp(Optional<Double> timestamp);

        _FinalStage timestamp(Double timestamp);

        /**
         * <p>This is a live version of the <code>call.artifact</code>.</p>
         * <p>This matches what is stored on <code>call.artifact</code> after the call.</p>
         */
        _FinalStage artifact(Optional<Artifact> artifact);

        _FinalStage artifact(Artifact artifact);

        /**
         * <p>This is the assistant that the message is associated with.</p>
         */
        _FinalStage assistant(Optional<CreateAssistantDto> assistant);

        _FinalStage assistant(CreateAssistantDto assistant);

        /**
         * <p>This is the customer that the message is associated with.</p>
         */
        _FinalStage customer(Optional<CreateCustomerDto> customer);

        _FinalStage customer(CreateCustomerDto customer);

        /**
         * <p>This is the call that the message is associated with.</p>
         */
        _FinalStage call(Optional<Call> call);

        _FinalStage call(Call call);

        /**
         * <p>This is the chat object.</p>
         */
        _FinalStage chat(Optional<Chat> chat);

        _FinalStage chat(Chat chat);

        /**
         * <p>This is the transcript of the call. This is only sent if the status is &quot;forwarding&quot;.</p>
         */
        _FinalStage transcript(Optional<String> transcript);

        _FinalStage transcript(String transcript);

        /**
         * <p>This is the summary of the call. This is only sent if the status is &quot;forwarding&quot;.</p>
         */
        _FinalStage summary(Optional<String> summary);

        _FinalStage summary(String summary);

        /**
         * <p>This is the inbound phone call debugging artifacts. This is only sent if the status is &quot;ended&quot; and there was an error accepting the inbound phone call.</p>
         * <p>This will include any errors related to the &quot;assistant-request&quot; if one was made.</p>
         */
        _FinalStage inboundPhoneCallDebuggingArtifacts(
                Optional<Map<String, Object>> inboundPhoneCallDebuggingArtifacts);

        _FinalStage inboundPhoneCallDebuggingArtifacts(Map<String, Object> inboundPhoneCallDebuggingArtifacts);
    }

    @JsonIgnoreProperties(ignoreUnknown = true)
    public static final class Builder implements StatusStage, _FinalStage {
        private ServerMessageStatusUpdateStatus status;

        private Optional<Map<String, Object>> inboundPhoneCallDebuggingArtifacts = Optional.empty();

        private Optional<String> summary = Optional.empty();

        private Optional<String> transcript = Optional.empty();

        private Optional<Chat> chat = Optional.empty();

        private Optional<Call> call = Optional.empty();

        private Optional<CreateCustomerDto> customer = Optional.empty();

        private Optional<CreateAssistantDto> assistant = Optional.empty();

        private Optional<Artifact> artifact = Optional.empty();

        private Optional<Double> timestamp = Optional.empty();

        private Optional<ServerMessageStatusUpdateDestination> destination = Optional.empty();

        private Optional<List<OpenAiMessage>> messagesOpenAiFormatted = Optional.empty();

        private Optional<List<ServerMessageStatusUpdateMessagesItem>> messages = Optional.empty();

        private Optional<ServerMessageStatusUpdateEndedReason> endedReason = Optional.empty();

        private Optional<ServerMessageStatusUpdatePhoneNumber> phoneNumber = Optional.empty();

        @JsonAnySetter
        private Map<String, Object> additionalProperties = new HashMap<>();

        private Builder() {}

        @java.lang.Override
        public Builder from(ServerMessageStatusUpdate other) {
            phoneNumber(other.getPhoneNumber());
            status(other.getStatus());
            endedReason(other.getEndedReason());
            messages(other.getMessages());
            messagesOpenAiFormatted(other.getMessagesOpenAiFormatted());
            destination(other.getDestination());
            timestamp(other.getTimestamp());
            artifact(other.getArtifact());
            assistant(other.getAssistant());
            customer(other.getCustomer());
            call(other.getCall());
            chat(other.getChat());
            transcript(other.getTranscript());
            summary(other.getSummary());
            inboundPhoneCallDebuggingArtifacts(other.getInboundPhoneCallDebuggingArtifacts());
            return this;
        }

        /**
         * <p>This is the status of the call.</p>
         * <p>This is the status of the call.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        @JsonSetter("status")
        public _FinalStage status(@NotNull ServerMessageStatusUpdateStatus status) {
            this.status = Objects.requireNonNull(status, "status must not be null");
            return this;
        }

        /**
         * <p>This is the inbound phone call debugging artifacts. This is only sent if the status is &quot;ended&quot; and there was an error accepting the inbound phone call.</p>
         * <p>This will include any errors related to the &quot;assistant-request&quot; if one was made.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        public _FinalStage inboundPhoneCallDebuggingArtifacts(Map<String, Object> inboundPhoneCallDebuggingArtifacts) {
            this.inboundPhoneCallDebuggingArtifacts = Optional.ofNullable(inboundPhoneCallDebuggingArtifacts);
            return this;
        }

        /**
         * <p>This is the inbound phone call debugging artifacts. This is only sent if the status is &quot;ended&quot; and there was an error accepting the inbound phone call.</p>
         * <p>This will include any errors related to the &quot;assistant-request&quot; if one was made.</p>
         */
        @java.lang.Override
        @JsonSetter(value = "inboundPhoneCallDebuggingArtifacts", nulls = Nulls.SKIP)
        public _FinalStage inboundPhoneCallDebuggingArtifacts(
                Optional<Map<String, Object>> inboundPhoneCallDebuggingArtifacts) {
            this.inboundPhoneCallDebuggingArtifacts = inboundPhoneCallDebuggingArtifacts;
            return this;
        }

        /**
         * <p>This is the summary of the call. This is only sent if the status is &quot;forwarding&quot;.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        public _FinalStage summary(String summary) {
            this.summary = Optional.ofNullable(summary);
            return this;
        }

        /**
         * <p>This is the summary of the call. This is only sent if the status is &quot;forwarding&quot;.</p>
         */
        @java.lang.Override
        @JsonSetter(value = "summary", nulls = Nulls.SKIP)
        public _FinalStage summary(Optional<String> summary) {
            this.summary = summary;
            return this;
        }

        /**
         * <p>This is the transcript of the call. This is only sent if the status is &quot;forwarding&quot;.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        public _FinalStage transcript(String transcript) {
            this.transcript = Optional.ofNullable(transcript);
            return this;
        }

        /**
         * <p>This is the transcript of the call. This is only sent if the status is &quot;forwarding&quot;.</p>
         */
        @java.lang.Override
        @JsonSetter(value = "transcript", nulls = Nulls.SKIP)
        public _FinalStage transcript(Optional<String> transcript) {
            this.transcript = transcript;
            return this;
        }

        /**
         * <p>This is the chat object.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        public _FinalStage chat(Chat chat) {
            this.chat = Optional.ofNullable(chat);
            return this;
        }

        /**
         * <p>This is the chat object.</p>
         */
        @java.lang.Override
        @JsonSetter(value = "chat", nulls = Nulls.SKIP)
        public _FinalStage chat(Optional<Chat> chat) {
            this.chat = chat;
            return this;
        }

        /**
         * <p>This is the call that the message is associated with.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        public _FinalStage call(Call call) {
            this.call = Optional.ofNullable(call);
            return this;
        }

        /**
         * <p>This is the call that the message is associated with.</p>
         */
        @java.lang.Override
        @JsonSetter(value = "call", nulls = Nulls.SKIP)
        public _FinalStage call(Optional<Call> call) {
            this.call = call;
            return this;
        }

        /**
         * <p>This is the customer that the message is associated with.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        public _FinalStage customer(CreateCustomerDto customer) {
            this.customer = Optional.ofNullable(customer);
            return this;
        }

        /**
         * <p>This is the customer that the message is associated with.</p>
         */
        @java.lang.Override
        @JsonSetter(value = "customer", nulls = Nulls.SKIP)
        public _FinalStage customer(Optional<CreateCustomerDto> customer) {
            this.customer = customer;
            return this;
        }

        /**
         * <p>This is the assistant that the message is associated with.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        public _FinalStage assistant(CreateAssistantDto assistant) {
            this.assistant = Optional.ofNullable(assistant);
            return this;
        }

        /**
         * <p>This is the assistant that the message is associated with.</p>
         */
        @java.lang.Override
        @JsonSetter(value = "assistant", nulls = Nulls.SKIP)
        public _FinalStage assistant(Optional<CreateAssistantDto> assistant) {
            this.assistant = assistant;
            return this;
        }

        /**
         * <p>This is a live version of the <code>call.artifact</code>.</p>
         * <p>This matches what is stored on <code>call.artifact</code> after the call.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        public _FinalStage artifact(Artifact artifact) {
            this.artifact = Optional.ofNullable(artifact);
            return this;
        }

        /**
         * <p>This is a live version of the <code>call.artifact</code>.</p>
         * <p>This matches what is stored on <code>call.artifact</code> after the call.</p>
         */
        @java.lang.Override
        @JsonSetter(value = "artifact", nulls = Nulls.SKIP)
        public _FinalStage artifact(Optional<Artifact> artifact) {
            this.artifact = artifact;
            return this;
        }

        /**
         * <p>This is the timestamp of the message.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        public _FinalStage timestamp(Double timestamp) {
            this.timestamp = Optional.ofNullable(timestamp);
            return this;
        }

        /**
         * <p>This is the timestamp of the message.</p>
         */
        @java.lang.Override
        @JsonSetter(value = "timestamp", nulls = Nulls.SKIP)
        public _FinalStage timestamp(Optional<Double> timestamp) {
            this.timestamp = timestamp;
            return this;
        }

        /**
         * <p>This is the destination the call is being transferred to. This is only sent if the status is &quot;forwarding&quot;.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        public _FinalStage destination(ServerMessageStatusUpdateDestination destination) {
            this.destination = Optional.ofNullable(destination);
            return this;
        }

        /**
         * <p>This is the destination the call is being transferred to. This is only sent if the status is &quot;forwarding&quot;.</p>
         */
        @java.lang.Override
        @JsonSetter(value = "destination", nulls = Nulls.SKIP)
        public _FinalStage destination(Optional<ServerMessageStatusUpdateDestination> destination) {
            this.destination = destination;
            return this;
        }

        /**
         * <p>These are the conversation messages of the call. This is only sent if the status is &quot;forwarding&quot;.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        public _FinalStage messagesOpenAiFormatted(List<OpenAiMessage> messagesOpenAiFormatted) {
            this.messagesOpenAiFormatted = Optional.ofNullable(messagesOpenAiFormatted);
            return this;
        }

        /**
         * <p>These are the conversation messages of the call. This is only sent if the status is &quot;forwarding&quot;.</p>
         */
        @java.lang.Override
        @JsonSetter(value = "messagesOpenAIFormatted", nulls = Nulls.SKIP)
        public _FinalStage messagesOpenAiFormatted(Optional<List<OpenAiMessage>> messagesOpenAiFormatted) {
            this.messagesOpenAiFormatted = messagesOpenAiFormatted;
            return this;
        }

        /**
         * <p>These are the conversation messages of the call. This is only sent if the status is &quot;forwarding&quot;.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        public _FinalStage messages(List<ServerMessageStatusUpdateMessagesItem> messages) {
            this.messages = Optional.ofNullable(messages);
            return this;
        }

        /**
         * <p>These are the conversation messages of the call. This is only sent if the status is &quot;forwarding&quot;.</p>
         */
        @java.lang.Override
        @JsonSetter(value = "messages", nulls = Nulls.SKIP)
        public _FinalStage messages(Optional<List<ServerMessageStatusUpdateMessagesItem>> messages) {
            this.messages = messages;
            return this;
        }

        /**
         * <p>This is the reason the call ended. This is only sent if the status is &quot;ended&quot;.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        public _FinalStage endedReason(ServerMessageStatusUpdateEndedReason endedReason) {
            this.endedReason = Optional.ofNullable(endedReason);
            return this;
        }

        /**
         * <p>This is the reason the call ended. This is only sent if the status is &quot;ended&quot;.</p>
         */
        @java.lang.Override
        @JsonSetter(value = "endedReason", nulls = Nulls.SKIP)
        public _FinalStage endedReason(Optional<ServerMessageStatusUpdateEndedReason> endedReason) {
            this.endedReason = endedReason;
            return this;
        }

        /**
         * <p>This is the phone number that the message is associated with.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        public _FinalStage phoneNumber(ServerMessageStatusUpdatePhoneNumber phoneNumber) {
            this.phoneNumber = Optional.ofNullable(phoneNumber);
            return this;
        }

        /**
         * <p>This is the phone number that the message is associated with.</p>
         */
        @java.lang.Override
        @JsonSetter(value = "phoneNumber", nulls = Nulls.SKIP)
        public _FinalStage phoneNumber(Optional<ServerMessageStatusUpdatePhoneNumber> phoneNumber) {
            this.phoneNumber = phoneNumber;
            return this;
        }

        @java.lang.Override
        public ServerMessageStatusUpdate build() {
            return new ServerMessageStatusUpdate(
                    phoneNumber,
                    status,
                    endedReason,
                    messages,
                    messagesOpenAiFormatted,
                    destination,
                    timestamp,
                    artifact,
                    assistant,
                    customer,
                    call,
                    chat,
                    transcript,
                    summary,
                    inboundPhoneCallDebuggingArtifacts,
                    additionalProperties);
        }
    }
}
