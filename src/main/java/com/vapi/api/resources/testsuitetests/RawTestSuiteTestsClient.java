/**
 * This file was auto-generated by Fern from our API Definition.
 */
package com.vapi.api.resources.testsuitetests;

import com.fasterxml.jackson.core.JsonProcessingException;
import com.vapi.api.core.ClientOptions;
import com.vapi.api.core.MediaTypes;
import com.vapi.api.core.ObjectMappers;
import com.vapi.api.core.QueryStringMapper;
import com.vapi.api.core.RequestOptions;
import com.vapi.api.core.VapiApiException;
import com.vapi.api.core.VapiException;
import com.vapi.api.core.VapiHttpResponse;
import com.vapi.api.resources.testsuitetests.requests.TestSuiteTestControllerFindAllPaginatedRequest;
import com.vapi.api.resources.testsuitetests.types.TestSuiteTestControllerCreateRequest;
import com.vapi.api.resources.testsuitetests.types.TestSuiteTestControllerCreateResponse;
import com.vapi.api.resources.testsuitetests.types.TestSuiteTestControllerFindOneResponse;
import com.vapi.api.resources.testsuitetests.types.TestSuiteTestControllerRemoveResponse;
import com.vapi.api.resources.testsuitetests.types.TestSuiteTestControllerUpdateRequest;
import com.vapi.api.resources.testsuitetests.types.TestSuiteTestControllerUpdateResponse;
import com.vapi.api.types.TestSuiteTestsPaginatedResponse;
import java.io.IOException;
import okhttp3.Headers;
import okhttp3.HttpUrl;
import okhttp3.OkHttpClient;
import okhttp3.Request;
import okhttp3.RequestBody;
import okhttp3.Response;
import okhttp3.ResponseBody;

public class RawTestSuiteTestsClient {
    protected final ClientOptions clientOptions;

    public RawTestSuiteTestsClient(ClientOptions clientOptions) {
        this.clientOptions = clientOptions;
    }

    public VapiHttpResponse<TestSuiteTestsPaginatedResponse> testSuiteTestControllerFindAllPaginated(
            String testSuiteId) {
        return testSuiteTestControllerFindAllPaginated(
                testSuiteId,
                TestSuiteTestControllerFindAllPaginatedRequest.builder().build());
    }

    public VapiHttpResponse<TestSuiteTestsPaginatedResponse> testSuiteTestControllerFindAllPaginated(
            String testSuiteId, TestSuiteTestControllerFindAllPaginatedRequest request) {
        return testSuiteTestControllerFindAllPaginated(testSuiteId, request, null);
    }

    public VapiHttpResponse<TestSuiteTestsPaginatedResponse> testSuiteTestControllerFindAllPaginated(
            String testSuiteId, TestSuiteTestControllerFindAllPaginatedRequest request, RequestOptions requestOptions) {
        HttpUrl.Builder httpUrl = HttpUrl.parse(this.clientOptions.environment().getUrl())
                .newBuilder()
                .addPathSegments("test-suite")
                .addPathSegment(testSuiteId)
                .addPathSegments("test");
        if (request.getPage().isPresent()) {
            QueryStringMapper.addQueryParameter(
                    httpUrl, "page", request.getPage().get(), false);
        }
        if (request.getSortOrder().isPresent()) {
            QueryStringMapper.addQueryParameter(
                    httpUrl, "sortOrder", request.getSortOrder().get(), false);
        }
        if (request.getLimit().isPresent()) {
            QueryStringMapper.addQueryParameter(
                    httpUrl, "limit", request.getLimit().get(), false);
        }
        if (request.getCreatedAtGt().isPresent()) {
            QueryStringMapper.addQueryParameter(
                    httpUrl, "createdAtGt", request.getCreatedAtGt().get(), false);
        }
        if (request.getCreatedAtLt().isPresent()) {
            QueryStringMapper.addQueryParameter(
                    httpUrl, "createdAtLt", request.getCreatedAtLt().get(), false);
        }
        if (request.getCreatedAtGe().isPresent()) {
            QueryStringMapper.addQueryParameter(
                    httpUrl, "createdAtGe", request.getCreatedAtGe().get(), false);
        }
        if (request.getCreatedAtLe().isPresent()) {
            QueryStringMapper.addQueryParameter(
                    httpUrl, "createdAtLe", request.getCreatedAtLe().get(), false);
        }
        if (request.getUpdatedAtGt().isPresent()) {
            QueryStringMapper.addQueryParameter(
                    httpUrl, "updatedAtGt", request.getUpdatedAtGt().get(), false);
        }
        if (request.getUpdatedAtLt().isPresent()) {
            QueryStringMapper.addQueryParameter(
                    httpUrl, "updatedAtLt", request.getUpdatedAtLt().get(), false);
        }
        if (request.getUpdatedAtGe().isPresent()) {
            QueryStringMapper.addQueryParameter(
                    httpUrl, "updatedAtGe", request.getUpdatedAtGe().get(), false);
        }
        if (request.getUpdatedAtLe().isPresent()) {
            QueryStringMapper.addQueryParameter(
                    httpUrl, "updatedAtLe", request.getUpdatedAtLe().get(), false);
        }
        Request.Builder _requestBuilder = new Request.Builder()
                .url(httpUrl.build())
                .method("GET", null)
                .headers(Headers.of(clientOptions.headers(requestOptions)))
                .addHeader("Accept", "application/json");
        Request okhttpRequest = _requestBuilder.build();
        OkHttpClient client = clientOptions.httpClient();
        if (requestOptions != null && requestOptions.getTimeout().isPresent()) {
            client = clientOptions.httpClientWithTimeout(requestOptions);
        }
        try (Response response = client.newCall(okhttpRequest).execute()) {
            ResponseBody responseBody = response.body();
            if (response.isSuccessful()) {
                return new VapiHttpResponse<>(
                        ObjectMappers.JSON_MAPPER.readValue(
                                responseBody.string(), TestSuiteTestsPaginatedResponse.class),
                        response);
            }
            String responseBodyString = responseBody != null ? responseBody.string() : "{}";
            throw new VapiApiException(
                    "Error with status code " + response.code(),
                    response.code(),
                    ObjectMappers.JSON_MAPPER.readValue(responseBodyString, Object.class),
                    response);
        } catch (IOException e) {
            throw new VapiException("Network error executing HTTP request", e);
        }
    }

    public VapiHttpResponse<TestSuiteTestControllerCreateResponse> testSuiteTestControllerCreate(
            String testSuiteId, TestSuiteTestControllerCreateRequest request) {
        return testSuiteTestControllerCreate(testSuiteId, request, null);
    }

    public VapiHttpResponse<TestSuiteTestControllerCreateResponse> testSuiteTestControllerCreate(
            String testSuiteId, TestSuiteTestControllerCreateRequest request, RequestOptions requestOptions) {
        HttpUrl httpUrl = HttpUrl.parse(this.clientOptions.environment().getUrl())
                .newBuilder()
                .addPathSegments("test-suite")
                .addPathSegment(testSuiteId)
                .addPathSegments("test")
                .build();
        RequestBody body;
        try {
            body = RequestBody.create(
                    ObjectMappers.JSON_MAPPER.writeValueAsBytes(request), MediaTypes.APPLICATION_JSON);
        } catch (JsonProcessingException e) {
            throw new VapiException("Failed to serialize request", e);
        }
        Request okhttpRequest = new Request.Builder()
                .url(httpUrl)
                .method("POST", body)
                .headers(Headers.of(clientOptions.headers(requestOptions)))
                .addHeader("Content-Type", "application/json")
                .addHeader("Accept", "application/json")
                .build();
        OkHttpClient client = clientOptions.httpClient();
        if (requestOptions != null && requestOptions.getTimeout().isPresent()) {
            client = clientOptions.httpClientWithTimeout(requestOptions);
        }
        try (Response response = client.newCall(okhttpRequest).execute()) {
            ResponseBody responseBody = response.body();
            if (response.isSuccessful()) {
                return new VapiHttpResponse<>(
                        ObjectMappers.JSON_MAPPER.readValue(
                                responseBody.string(), TestSuiteTestControllerCreateResponse.class),
                        response);
            }
            String responseBodyString = responseBody != null ? responseBody.string() : "{}";
            throw new VapiApiException(
                    "Error with status code " + response.code(),
                    response.code(),
                    ObjectMappers.JSON_MAPPER.readValue(responseBodyString, Object.class),
                    response);
        } catch (IOException e) {
            throw new VapiException("Network error executing HTTP request", e);
        }
    }

    public VapiHttpResponse<TestSuiteTestControllerFindOneResponse> testSuiteTestControllerFindOne(
            String testSuiteId, String id) {
        return testSuiteTestControllerFindOne(testSuiteId, id, null);
    }

    public VapiHttpResponse<TestSuiteTestControllerFindOneResponse> testSuiteTestControllerFindOne(
            String testSuiteId, String id, RequestOptions requestOptions) {
        HttpUrl httpUrl = HttpUrl.parse(this.clientOptions.environment().getUrl())
                .newBuilder()
                .addPathSegments("test-suite")
                .addPathSegment(testSuiteId)
                .addPathSegments("test")
                .addPathSegment(id)
                .build();
        Request okhttpRequest = new Request.Builder()
                .url(httpUrl)
                .method("GET", null)
                .headers(Headers.of(clientOptions.headers(requestOptions)))
                .addHeader("Accept", "application/json")
                .build();
        OkHttpClient client = clientOptions.httpClient();
        if (requestOptions != null && requestOptions.getTimeout().isPresent()) {
            client = clientOptions.httpClientWithTimeout(requestOptions);
        }
        try (Response response = client.newCall(okhttpRequest).execute()) {
            ResponseBody responseBody = response.body();
            if (response.isSuccessful()) {
                return new VapiHttpResponse<>(
                        ObjectMappers.JSON_MAPPER.readValue(
                                responseBody.string(), TestSuiteTestControllerFindOneResponse.class),
                        response);
            }
            String responseBodyString = responseBody != null ? responseBody.string() : "{}";
            throw new VapiApiException(
                    "Error with status code " + response.code(),
                    response.code(),
                    ObjectMappers.JSON_MAPPER.readValue(responseBodyString, Object.class),
                    response);
        } catch (IOException e) {
            throw new VapiException("Network error executing HTTP request", e);
        }
    }

    public VapiHttpResponse<TestSuiteTestControllerRemoveResponse> testSuiteTestControllerRemove(
            String testSuiteId, String id) {
        return testSuiteTestControllerRemove(testSuiteId, id, null);
    }

    public VapiHttpResponse<TestSuiteTestControllerRemoveResponse> testSuiteTestControllerRemove(
            String testSuiteId, String id, RequestOptions requestOptions) {
        HttpUrl httpUrl = HttpUrl.parse(this.clientOptions.environment().getUrl())
                .newBuilder()
                .addPathSegments("test-suite")
                .addPathSegment(testSuiteId)
                .addPathSegments("test")
                .addPathSegment(id)
                .build();
        Request okhttpRequest = new Request.Builder()
                .url(httpUrl)
                .method("DELETE", null)
                .headers(Headers.of(clientOptions.headers(requestOptions)))
                .addHeader("Accept", "application/json")
                .build();
        OkHttpClient client = clientOptions.httpClient();
        if (requestOptions != null && requestOptions.getTimeout().isPresent()) {
            client = clientOptions.httpClientWithTimeout(requestOptions);
        }
        try (Response response = client.newCall(okhttpRequest).execute()) {
            ResponseBody responseBody = response.body();
            if (response.isSuccessful()) {
                return new VapiHttpResponse<>(
                        ObjectMappers.JSON_MAPPER.readValue(
                                responseBody.string(), TestSuiteTestControllerRemoveResponse.class),
                        response);
            }
            String responseBodyString = responseBody != null ? responseBody.string() : "{}";
            throw new VapiApiException(
                    "Error with status code " + response.code(),
                    response.code(),
                    ObjectMappers.JSON_MAPPER.readValue(responseBodyString, Object.class),
                    response);
        } catch (IOException e) {
            throw new VapiException("Network error executing HTTP request", e);
        }
    }

    public VapiHttpResponse<TestSuiteTestControllerUpdateResponse> testSuiteTestControllerUpdate(
            String testSuiteId, String id, TestSuiteTestControllerUpdateRequest request) {
        return testSuiteTestControllerUpdate(testSuiteId, id, request, null);
    }

    public VapiHttpResponse<TestSuiteTestControllerUpdateResponse> testSuiteTestControllerUpdate(
            String testSuiteId,
            String id,
            TestSuiteTestControllerUpdateRequest request,
            RequestOptions requestOptions) {
        HttpUrl httpUrl = HttpUrl.parse(this.clientOptions.environment().getUrl())
                .newBuilder()
                .addPathSegments("test-suite")
                .addPathSegment(testSuiteId)
                .addPathSegments("test")
                .addPathSegment(id)
                .build();
        RequestBody body;
        try {
            body = RequestBody.create(
                    ObjectMappers.JSON_MAPPER.writeValueAsBytes(request), MediaTypes.APPLICATION_JSON);
        } catch (JsonProcessingException e) {
            throw new VapiException("Failed to serialize request", e);
        }
        Request okhttpRequest = new Request.Builder()
                .url(httpUrl)
                .method("PATCH", body)
                .headers(Headers.of(clientOptions.headers(requestOptions)))
                .addHeader("Content-Type", "application/json")
                .addHeader("Accept", "application/json")
                .build();
        OkHttpClient client = clientOptions.httpClient();
        if (requestOptions != null && requestOptions.getTimeout().isPresent()) {
            client = clientOptions.httpClientWithTimeout(requestOptions);
        }
        try (Response response = client.newCall(okhttpRequest).execute()) {
            ResponseBody responseBody = response.body();
            if (response.isSuccessful()) {
                return new VapiHttpResponse<>(
                        ObjectMappers.JSON_MAPPER.readValue(
                                responseBody.string(), TestSuiteTestControllerUpdateResponse.class),
                        response);
            }
            String responseBodyString = responseBody != null ? responseBody.string() : "{}";
            throw new VapiApiException(
                    "Error with status code " + response.code(),
                    response.code(),
                    ObjectMappers.JSON_MAPPER.readValue(responseBodyString, Object.class),
                    response);
        } catch (IOException e) {
            throw new VapiException("Network error executing HTTP request", e);
        }
    }
}
