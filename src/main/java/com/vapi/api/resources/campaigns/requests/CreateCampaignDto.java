/**
 * This file was auto-generated by Fern from our API Definition.
 */
package com.vapi.api.resources.campaigns.requests;

import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.annotation.Nulls;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.vapi.api.core.ObjectMappers;
import com.vapi.api.types.CreateCustomerDto;
import com.vapi.api.types.SchedulePlan;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import org.jetbrains.annotations.NotNull;

@JsonInclude(JsonInclude.Include.NON_ABSENT)
@JsonDeserialize(builder = CreateCampaignDto.Builder.class)
public final class CreateCampaignDto {
    private final String name;

    private final Optional<String> assistantId;

    private final Optional<String> workflowId;

    private final String phoneNumberId;

    private final Optional<SchedulePlan> schedulePlan;

    private final List<CreateCustomerDto> customers;

    private final Map<String, Object> additionalProperties;

    private CreateCampaignDto(
            String name,
            Optional<String> assistantId,
            Optional<String> workflowId,
            String phoneNumberId,
            Optional<SchedulePlan> schedulePlan,
            List<CreateCustomerDto> customers,
            Map<String, Object> additionalProperties) {
        this.name = name;
        this.assistantId = assistantId;
        this.workflowId = workflowId;
        this.phoneNumberId = phoneNumberId;
        this.schedulePlan = schedulePlan;
        this.customers = customers;
        this.additionalProperties = additionalProperties;
    }

    /**
     * @return This is the name of the campaign. This is just for your own reference.
     */
    @JsonProperty("name")
    public String getName() {
        return name;
    }

    /**
     * @return This is the assistant ID that will be used for the campaign calls. Note: Either assistantId or workflowId can be used, but not both.
     */
    @JsonProperty("assistantId")
    public Optional<String> getAssistantId() {
        return assistantId;
    }

    /**
     * @return This is the workflow ID that will be used for the campaign calls. Note: Either assistantId or workflowId can be used, but not both.
     */
    @JsonProperty("workflowId")
    public Optional<String> getWorkflowId() {
        return workflowId;
    }

    /**
     * @return This is the phone number ID that will be used for the campaign calls.
     */
    @JsonProperty("phoneNumberId")
    public String getPhoneNumberId() {
        return phoneNumberId;
    }

    /**
     * @return This is the schedule plan for the campaign.
     */
    @JsonProperty("schedulePlan")
    public Optional<SchedulePlan> getSchedulePlan() {
        return schedulePlan;
    }

    /**
     * @return These are the customers that will be called in the campaign.
     */
    @JsonProperty("customers")
    public List<CreateCustomerDto> getCustomers() {
        return customers;
    }

    @java.lang.Override
    public boolean equals(Object other) {
        if (this == other) return true;
        return other instanceof CreateCampaignDto && equalTo((CreateCampaignDto) other);
    }

    @JsonAnyGetter
    public Map<String, Object> getAdditionalProperties() {
        return this.additionalProperties;
    }

    private boolean equalTo(CreateCampaignDto other) {
        return name.equals(other.name)
                && assistantId.equals(other.assistantId)
                && workflowId.equals(other.workflowId)
                && phoneNumberId.equals(other.phoneNumberId)
                && schedulePlan.equals(other.schedulePlan)
                && customers.equals(other.customers);
    }

    @java.lang.Override
    public int hashCode() {
        return Objects.hash(
                this.name, this.assistantId, this.workflowId, this.phoneNumberId, this.schedulePlan, this.customers);
    }

    @java.lang.Override
    public String toString() {
        return ObjectMappers.stringify(this);
    }

    public static NameStage builder() {
        return new Builder();
    }

    public interface NameStage {
        /**
         * <p>This is the name of the campaign. This is just for your own reference.</p>
         */
        PhoneNumberIdStage name(@NotNull String name);

        Builder from(CreateCampaignDto other);
    }

    public interface PhoneNumberIdStage {
        /**
         * <p>This is the phone number ID that will be used for the campaign calls.</p>
         */
        _FinalStage phoneNumberId(@NotNull String phoneNumberId);
    }

    public interface _FinalStage {
        CreateCampaignDto build();

        /**
         * <p>This is the assistant ID that will be used for the campaign calls. Note: Either assistantId or workflowId can be used, but not both.</p>
         */
        _FinalStage assistantId(Optional<String> assistantId);

        _FinalStage assistantId(String assistantId);

        /**
         * <p>This is the workflow ID that will be used for the campaign calls. Note: Either assistantId or workflowId can be used, but not both.</p>
         */
        _FinalStage workflowId(Optional<String> workflowId);

        _FinalStage workflowId(String workflowId);

        /**
         * <p>This is the schedule plan for the campaign.</p>
         */
        _FinalStage schedulePlan(Optional<SchedulePlan> schedulePlan);

        _FinalStage schedulePlan(SchedulePlan schedulePlan);

        /**
         * <p>These are the customers that will be called in the campaign.</p>
         */
        _FinalStage customers(List<CreateCustomerDto> customers);

        _FinalStage addCustomers(CreateCustomerDto customers);

        _FinalStage addAllCustomers(List<CreateCustomerDto> customers);
    }

    @JsonIgnoreProperties(ignoreUnknown = true)
    public static final class Builder implements NameStage, PhoneNumberIdStage, _FinalStage {
        private String name;

        private String phoneNumberId;

        private List<CreateCustomerDto> customers = new ArrayList<>();

        private Optional<SchedulePlan> schedulePlan = Optional.empty();

        private Optional<String> workflowId = Optional.empty();

        private Optional<String> assistantId = Optional.empty();

        @JsonAnySetter
        private Map<String, Object> additionalProperties = new HashMap<>();

        private Builder() {}

        @java.lang.Override
        public Builder from(CreateCampaignDto other) {
            name(other.getName());
            assistantId(other.getAssistantId());
            workflowId(other.getWorkflowId());
            phoneNumberId(other.getPhoneNumberId());
            schedulePlan(other.getSchedulePlan());
            customers(other.getCustomers());
            return this;
        }

        /**
         * <p>This is the name of the campaign. This is just for your own reference.</p>
         * <p>This is the name of the campaign. This is just for your own reference.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        @JsonSetter("name")
        public PhoneNumberIdStage name(@NotNull String name) {
            this.name = Objects.requireNonNull(name, "name must not be null");
            return this;
        }

        /**
         * <p>This is the phone number ID that will be used for the campaign calls.</p>
         * <p>This is the phone number ID that will be used for the campaign calls.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        @JsonSetter("phoneNumberId")
        public _FinalStage phoneNumberId(@NotNull String phoneNumberId) {
            this.phoneNumberId = Objects.requireNonNull(phoneNumberId, "phoneNumberId must not be null");
            return this;
        }

        /**
         * <p>These are the customers that will be called in the campaign.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        public _FinalStage addAllCustomers(List<CreateCustomerDto> customers) {
            this.customers.addAll(customers);
            return this;
        }

        /**
         * <p>These are the customers that will be called in the campaign.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        public _FinalStage addCustomers(CreateCustomerDto customers) {
            this.customers.add(customers);
            return this;
        }

        /**
         * <p>These are the customers that will be called in the campaign.</p>
         */
        @java.lang.Override
        @JsonSetter(value = "customers", nulls = Nulls.SKIP)
        public _FinalStage customers(List<CreateCustomerDto> customers) {
            this.customers.clear();
            this.customers.addAll(customers);
            return this;
        }

        /**
         * <p>This is the schedule plan for the campaign.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        public _FinalStage schedulePlan(SchedulePlan schedulePlan) {
            this.schedulePlan = Optional.ofNullable(schedulePlan);
            return this;
        }

        /**
         * <p>This is the schedule plan for the campaign.</p>
         */
        @java.lang.Override
        @JsonSetter(value = "schedulePlan", nulls = Nulls.SKIP)
        public _FinalStage schedulePlan(Optional<SchedulePlan> schedulePlan) {
            this.schedulePlan = schedulePlan;
            return this;
        }

        /**
         * <p>This is the workflow ID that will be used for the campaign calls. Note: Either assistantId or workflowId can be used, but not both.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        public _FinalStage workflowId(String workflowId) {
            this.workflowId = Optional.ofNullable(workflowId);
            return this;
        }

        /**
         * <p>This is the workflow ID that will be used for the campaign calls. Note: Either assistantId or workflowId can be used, but not both.</p>
         */
        @java.lang.Override
        @JsonSetter(value = "workflowId", nulls = Nulls.SKIP)
        public _FinalStage workflowId(Optional<String> workflowId) {
            this.workflowId = workflowId;
            return this;
        }

        /**
         * <p>This is the assistant ID that will be used for the campaign calls. Note: Either assistantId or workflowId can be used, but not both.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        public _FinalStage assistantId(String assistantId) {
            this.assistantId = Optional.ofNullable(assistantId);
            return this;
        }

        /**
         * <p>This is the assistant ID that will be used for the campaign calls. Note: Either assistantId or workflowId can be used, but not both.</p>
         */
        @java.lang.Override
        @JsonSetter(value = "assistantId", nulls = Nulls.SKIP)
        public _FinalStage assistantId(Optional<String> assistantId) {
            this.assistantId = assistantId;
            return this;
        }

        @java.lang.Override
        public CreateCampaignDto build() {
            return new CreateCampaignDto(
                    name, assistantId, workflowId, phoneNumberId, schedulePlan, customers, additionalProperties);
        }
    }
}
