/**
 * This file was auto-generated by Fern from our API Definition.
 */
package com.vapi.api.types;

import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.annotation.Nulls;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.vapi.api.core.ObjectMappers;
import java.util.HashMap;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import org.jetbrains.annotations.NotNull;

@JsonInclude(JsonInclude.Include.NON_ABSENT)
@JsonDeserialize(builder = SipTrunkGateway.Builder.class)
public final class SipTrunkGateway {
    private final String ip;

    private final Optional<Double> port;

    private final Optional<Double> netmask;

    private final Optional<Boolean> inboundEnabled;

    private final Optional<Boolean> outboundEnabled;

    private final Optional<SipTrunkGatewayOutboundProtocol> outboundProtocol;

    private final Optional<Boolean> optionsPingEnabled;

    private final Map<String, Object> additionalProperties;

    private SipTrunkGateway(
            String ip,
            Optional<Double> port,
            Optional<Double> netmask,
            Optional<Boolean> inboundEnabled,
            Optional<Boolean> outboundEnabled,
            Optional<SipTrunkGatewayOutboundProtocol> outboundProtocol,
            Optional<Boolean> optionsPingEnabled,
            Map<String, Object> additionalProperties) {
        this.ip = ip;
        this.port = port;
        this.netmask = netmask;
        this.inboundEnabled = inboundEnabled;
        this.outboundEnabled = outboundEnabled;
        this.outboundProtocol = outboundProtocol;
        this.optionsPingEnabled = optionsPingEnabled;
        this.additionalProperties = additionalProperties;
    }

    /**
     * @return This is the address of the gateway. It can be an IPv4 address like 1.1.1.1 or a fully qualified domain name like my-sip-trunk.pstn.twilio.com.
     */
    @JsonProperty("ip")
    public String getIp() {
        return ip;
    }

    /**
     * @return This is the port number of the gateway. Default is 5060.
     * <p>@default 5060</p>
     */
    @JsonProperty("port")
    public Optional<Double> getPort() {
        return port;
    }

    /**
     * @return This is the netmask of the gateway. Defaults to 32.
     * <p>@default 32</p>
     */
    @JsonProperty("netmask")
    public Optional<Double> getNetmask() {
        return netmask;
    }

    /**
     * @return This is whether inbound calls are allowed from this gateway. Default is true.
     * <p>@default true</p>
     */
    @JsonProperty("inboundEnabled")
    public Optional<Boolean> getInboundEnabled() {
        return inboundEnabled;
    }

    /**
     * @return This is whether outbound calls should be sent to this gateway. Default is true.
     * <p>Note, if netmask is less than 32, it doesn't affect the outbound IPs that are tried. 1 attempt is made to <code>ip:port</code>.</p>
     * <p>@default true</p>
     */
    @JsonProperty("outboundEnabled")
    public Optional<Boolean> getOutboundEnabled() {
        return outboundEnabled;
    }

    /**
     * @return This is the protocol to use for SIP signaling outbound calls. Default is udp.
     * <p>@default udp</p>
     */
    @JsonProperty("outboundProtocol")
    public Optional<SipTrunkGatewayOutboundProtocol> getOutboundProtocol() {
        return outboundProtocol;
    }

    /**
     * @return This is whether to send options ping to the gateway. This can be used to check if the gateway is reachable. Default is false.
     * <p>This is useful for high availability setups where you want to check if the gateway is reachable before routing calls to it. Note, if no gateway for a trunk is reachable, outbound calls will be rejected.</p>
     * <p>@default false</p>
     */
    @JsonProperty("optionsPingEnabled")
    public Optional<Boolean> getOptionsPingEnabled() {
        return optionsPingEnabled;
    }

    @java.lang.Override
    public boolean equals(Object other) {
        if (this == other) return true;
        return other instanceof SipTrunkGateway && equalTo((SipTrunkGateway) other);
    }

    @JsonAnyGetter
    public Map<String, Object> getAdditionalProperties() {
        return this.additionalProperties;
    }

    private boolean equalTo(SipTrunkGateway other) {
        return ip.equals(other.ip)
                && port.equals(other.port)
                && netmask.equals(other.netmask)
                && inboundEnabled.equals(other.inboundEnabled)
                && outboundEnabled.equals(other.outboundEnabled)
                && outboundProtocol.equals(other.outboundProtocol)
                && optionsPingEnabled.equals(other.optionsPingEnabled);
    }

    @java.lang.Override
    public int hashCode() {
        return Objects.hash(
                this.ip,
                this.port,
                this.netmask,
                this.inboundEnabled,
                this.outboundEnabled,
                this.outboundProtocol,
                this.optionsPingEnabled);
    }

    @java.lang.Override
    public String toString() {
        return ObjectMappers.stringify(this);
    }

    public static IpStage builder() {
        return new Builder();
    }

    public interface IpStage {
        /**
         * <p>This is the address of the gateway. It can be an IPv4 address like 1.1.1.1 or a fully qualified domain name like my-sip-trunk.pstn.twilio.com.</p>
         */
        _FinalStage ip(@NotNull String ip);

        Builder from(SipTrunkGateway other);
    }

    public interface _FinalStage {
        SipTrunkGateway build();

        /**
         * <p>This is the port number of the gateway. Default is 5060.</p>
         * <p>@default 5060</p>
         */
        _FinalStage port(Optional<Double> port);

        _FinalStage port(Double port);

        /**
         * <p>This is the netmask of the gateway. Defaults to 32.</p>
         * <p>@default 32</p>
         */
        _FinalStage netmask(Optional<Double> netmask);

        _FinalStage netmask(Double netmask);

        /**
         * <p>This is whether inbound calls are allowed from this gateway. Default is true.</p>
         * <p>@default true</p>
         */
        _FinalStage inboundEnabled(Optional<Boolean> inboundEnabled);

        _FinalStage inboundEnabled(Boolean inboundEnabled);

        /**
         * <p>This is whether outbound calls should be sent to this gateway. Default is true.</p>
         * <p>Note, if netmask is less than 32, it doesn't affect the outbound IPs that are tried. 1 attempt is made to <code>ip:port</code>.</p>
         * <p>@default true</p>
         */
        _FinalStage outboundEnabled(Optional<Boolean> outboundEnabled);

        _FinalStage outboundEnabled(Boolean outboundEnabled);

        /**
         * <p>This is the protocol to use for SIP signaling outbound calls. Default is udp.</p>
         * <p>@default udp</p>
         */
        _FinalStage outboundProtocol(Optional<SipTrunkGatewayOutboundProtocol> outboundProtocol);

        _FinalStage outboundProtocol(SipTrunkGatewayOutboundProtocol outboundProtocol);

        /**
         * <p>This is whether to send options ping to the gateway. This can be used to check if the gateway is reachable. Default is false.</p>
         * <p>This is useful for high availability setups where you want to check if the gateway is reachable before routing calls to it. Note, if no gateway for a trunk is reachable, outbound calls will be rejected.</p>
         * <p>@default false</p>
         */
        _FinalStage optionsPingEnabled(Optional<Boolean> optionsPingEnabled);

        _FinalStage optionsPingEnabled(Boolean optionsPingEnabled);
    }

    @JsonIgnoreProperties(ignoreUnknown = true)
    public static final class Builder implements IpStage, _FinalStage {
        private String ip;

        private Optional<Boolean> optionsPingEnabled = Optional.empty();

        private Optional<SipTrunkGatewayOutboundProtocol> outboundProtocol = Optional.empty();

        private Optional<Boolean> outboundEnabled = Optional.empty();

        private Optional<Boolean> inboundEnabled = Optional.empty();

        private Optional<Double> netmask = Optional.empty();

        private Optional<Double> port = Optional.empty();

        @JsonAnySetter
        private Map<String, Object> additionalProperties = new HashMap<>();

        private Builder() {}

        @java.lang.Override
        public Builder from(SipTrunkGateway other) {
            ip(other.getIp());
            port(other.getPort());
            netmask(other.getNetmask());
            inboundEnabled(other.getInboundEnabled());
            outboundEnabled(other.getOutboundEnabled());
            outboundProtocol(other.getOutboundProtocol());
            optionsPingEnabled(other.getOptionsPingEnabled());
            return this;
        }

        /**
         * <p>This is the address of the gateway. It can be an IPv4 address like 1.1.1.1 or a fully qualified domain name like my-sip-trunk.pstn.twilio.com.</p>
         * <p>This is the address of the gateway. It can be an IPv4 address like 1.1.1.1 or a fully qualified domain name like my-sip-trunk.pstn.twilio.com.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        @JsonSetter("ip")
        public _FinalStage ip(@NotNull String ip) {
            this.ip = Objects.requireNonNull(ip, "ip must not be null");
            return this;
        }

        /**
         * <p>This is whether to send options ping to the gateway. This can be used to check if the gateway is reachable. Default is false.</p>
         * <p>This is useful for high availability setups where you want to check if the gateway is reachable before routing calls to it. Note, if no gateway for a trunk is reachable, outbound calls will be rejected.</p>
         * <p>@default false</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        public _FinalStage optionsPingEnabled(Boolean optionsPingEnabled) {
            this.optionsPingEnabled = Optional.ofNullable(optionsPingEnabled);
            return this;
        }

        /**
         * <p>This is whether to send options ping to the gateway. This can be used to check if the gateway is reachable. Default is false.</p>
         * <p>This is useful for high availability setups where you want to check if the gateway is reachable before routing calls to it. Note, if no gateway for a trunk is reachable, outbound calls will be rejected.</p>
         * <p>@default false</p>
         */
        @java.lang.Override
        @JsonSetter(value = "optionsPingEnabled", nulls = Nulls.SKIP)
        public _FinalStage optionsPingEnabled(Optional<Boolean> optionsPingEnabled) {
            this.optionsPingEnabled = optionsPingEnabled;
            return this;
        }

        /**
         * <p>This is the protocol to use for SIP signaling outbound calls. Default is udp.</p>
         * <p>@default udp</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        public _FinalStage outboundProtocol(SipTrunkGatewayOutboundProtocol outboundProtocol) {
            this.outboundProtocol = Optional.ofNullable(outboundProtocol);
            return this;
        }

        /**
         * <p>This is the protocol to use for SIP signaling outbound calls. Default is udp.</p>
         * <p>@default udp</p>
         */
        @java.lang.Override
        @JsonSetter(value = "outboundProtocol", nulls = Nulls.SKIP)
        public _FinalStage outboundProtocol(Optional<SipTrunkGatewayOutboundProtocol> outboundProtocol) {
            this.outboundProtocol = outboundProtocol;
            return this;
        }

        /**
         * <p>This is whether outbound calls should be sent to this gateway. Default is true.</p>
         * <p>Note, if netmask is less than 32, it doesn't affect the outbound IPs that are tried. 1 attempt is made to <code>ip:port</code>.</p>
         * <p>@default true</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        public _FinalStage outboundEnabled(Boolean outboundEnabled) {
            this.outboundEnabled = Optional.ofNullable(outboundEnabled);
            return this;
        }

        /**
         * <p>This is whether outbound calls should be sent to this gateway. Default is true.</p>
         * <p>Note, if netmask is less than 32, it doesn't affect the outbound IPs that are tried. 1 attempt is made to <code>ip:port</code>.</p>
         * <p>@default true</p>
         */
        @java.lang.Override
        @JsonSetter(value = "outboundEnabled", nulls = Nulls.SKIP)
        public _FinalStage outboundEnabled(Optional<Boolean> outboundEnabled) {
            this.outboundEnabled = outboundEnabled;
            return this;
        }

        /**
         * <p>This is whether inbound calls are allowed from this gateway. Default is true.</p>
         * <p>@default true</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        public _FinalStage inboundEnabled(Boolean inboundEnabled) {
            this.inboundEnabled = Optional.ofNullable(inboundEnabled);
            return this;
        }

        /**
         * <p>This is whether inbound calls are allowed from this gateway. Default is true.</p>
         * <p>@default true</p>
         */
        @java.lang.Override
        @JsonSetter(value = "inboundEnabled", nulls = Nulls.SKIP)
        public _FinalStage inboundEnabled(Optional<Boolean> inboundEnabled) {
            this.inboundEnabled = inboundEnabled;
            return this;
        }

        /**
         * <p>This is the netmask of the gateway. Defaults to 32.</p>
         * <p>@default 32</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        public _FinalStage netmask(Double netmask) {
            this.netmask = Optional.ofNullable(netmask);
            return this;
        }

        /**
         * <p>This is the netmask of the gateway. Defaults to 32.</p>
         * <p>@default 32</p>
         */
        @java.lang.Override
        @JsonSetter(value = "netmask", nulls = Nulls.SKIP)
        public _FinalStage netmask(Optional<Double> netmask) {
            this.netmask = netmask;
            return this;
        }

        /**
         * <p>This is the port number of the gateway. Default is 5060.</p>
         * <p>@default 5060</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        public _FinalStage port(Double port) {
            this.port = Optional.ofNullable(port);
            return this;
        }

        /**
         * <p>This is the port number of the gateway. Default is 5060.</p>
         * <p>@default 5060</p>
         */
        @java.lang.Override
        @JsonSetter(value = "port", nulls = Nulls.SKIP)
        public _FinalStage port(Optional<Double> port) {
            this.port = port;
            return this;
        }

        @java.lang.Override
        public SipTrunkGateway build() {
            return new SipTrunkGateway(
                    ip,
                    port,
                    netmask,
                    inboundEnabled,
                    outboundEnabled,
                    outboundProtocol,
                    optionsPingEnabled,
                    additionalProperties);
        }
    }
}
