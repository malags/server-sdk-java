/**
 * This file was auto-generated by Fern from our API Definition.
 */
package com.vapi.api.types;

import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.annotation.Nulls;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.vapi.api.core.ObjectMappers;
import java.util.HashMap;
import java.util.LinkedHashMap;
import java.util.Map;
import java.util.Objects;

@JsonInclude(JsonInclude.Include.NON_ABSENT)
@JsonDeserialize(builder = ModelCost.Builder.class)
public final class ModelCost {
    private final Map<String, Object> model;

    private final double promptTokens;

    private final double completionTokens;

    private final double cost;

    private final Map<String, Object> additionalProperties;

    private ModelCost(
            Map<String, Object> model,
            double promptTokens,
            double completionTokens,
            double cost,
            Map<String, Object> additionalProperties) {
        this.model = model;
        this.promptTokens = promptTokens;
        this.completionTokens = completionTokens;
        this.cost = cost;
        this.additionalProperties = additionalProperties;
    }

    /**
     * @return This is the model that was used during the call.
     * <p>This matches one of the following:</p>
     * <ul>
     * <li><code>call.assistant.model</code>,</li>
     * <li><code>call.assistantId-&gt;model</code>,</li>
     * <li><code>call.squad[n].assistant.model</code>,</li>
     * <li><code>call.squad[n].assistantId-&gt;model</code>,</li>
     * <li><code>call.squadId-&gt;[n].assistant.model</code>,</li>
     * <li><code>call.squadId-&gt;[n].assistantId-&gt;model</code>.</li>
     * </ul>
     */
    @JsonProperty("model")
    public Map<String, Object> getModel() {
        return model;
    }

    /**
     * @return This is the number of prompt tokens used in the call. These should be total prompt tokens used in the call for single assistant calls, while squad calls will have multiple model costs one for each assistant that was used.
     */
    @JsonProperty("promptTokens")
    public double getPromptTokens() {
        return promptTokens;
    }

    /**
     * @return This is the number of completion tokens generated in the call. These should be total completion tokens used in the call for single assistant calls, while squad calls will have multiple model costs one for each assistant that was used.
     */
    @JsonProperty("completionTokens")
    public double getCompletionTokens() {
        return completionTokens;
    }

    /**
     * @return This is the cost of the component in USD.
     */
    @JsonProperty("cost")
    public double getCost() {
        return cost;
    }

    @java.lang.Override
    public boolean equals(Object other) {
        if (this == other) return true;
        return other instanceof ModelCost && equalTo((ModelCost) other);
    }

    @JsonAnyGetter
    public Map<String, Object> getAdditionalProperties() {
        return this.additionalProperties;
    }

    private boolean equalTo(ModelCost other) {
        return model.equals(other.model)
                && promptTokens == other.promptTokens
                && completionTokens == other.completionTokens
                && cost == other.cost;
    }

    @java.lang.Override
    public int hashCode() {
        return Objects.hash(this.model, this.promptTokens, this.completionTokens, this.cost);
    }

    @java.lang.Override
    public String toString() {
        return ObjectMappers.stringify(this);
    }

    public static PromptTokensStage builder() {
        return new Builder();
    }

    public interface PromptTokensStage {
        /**
         * <p>This is the number of prompt tokens used in the call. These should be total prompt tokens used in the call for single assistant calls, while squad calls will have multiple model costs one for each assistant that was used.</p>
         */
        CompletionTokensStage promptTokens(double promptTokens);

        Builder from(ModelCost other);
    }

    public interface CompletionTokensStage {
        /**
         * <p>This is the number of completion tokens generated in the call. These should be total completion tokens used in the call for single assistant calls, while squad calls will have multiple model costs one for each assistant that was used.</p>
         */
        CostStage completionTokens(double completionTokens);
    }

    public interface CostStage {
        /**
         * <p>This is the cost of the component in USD.</p>
         */
        _FinalStage cost(double cost);
    }

    public interface _FinalStage {
        ModelCost build();

        /**
         * <p>This is the model that was used during the call.</p>
         * <p>This matches one of the following:</p>
         * <ul>
         * <li><code>call.assistant.model</code>,</li>
         * <li><code>call.assistantId-&gt;model</code>,</li>
         * <li><code>call.squad[n].assistant.model</code>,</li>
         * <li><code>call.squad[n].assistantId-&gt;model</code>,</li>
         * <li><code>call.squadId-&gt;[n].assistant.model</code>,</li>
         * <li><code>call.squadId-&gt;[n].assistantId-&gt;model</code>.</li>
         * </ul>
         */
        _FinalStage model(Map<String, Object> model);

        _FinalStage putAllModel(Map<String, Object> model);

        _FinalStage model(String key, Object value);
    }

    @JsonIgnoreProperties(ignoreUnknown = true)
    public static final class Builder implements PromptTokensStage, CompletionTokensStage, CostStage, _FinalStage {
        private double promptTokens;

        private double completionTokens;

        private double cost;

        private Map<String, Object> model = new LinkedHashMap<>();

        @JsonAnySetter
        private Map<String, Object> additionalProperties = new HashMap<>();

        private Builder() {}

        @java.lang.Override
        public Builder from(ModelCost other) {
            model(other.getModel());
            promptTokens(other.getPromptTokens());
            completionTokens(other.getCompletionTokens());
            cost(other.getCost());
            return this;
        }

        /**
         * <p>This is the number of prompt tokens used in the call. These should be total prompt tokens used in the call for single assistant calls, while squad calls will have multiple model costs one for each assistant that was used.</p>
         * <p>This is the number of prompt tokens used in the call. These should be total prompt tokens used in the call for single assistant calls, while squad calls will have multiple model costs one for each assistant that was used.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        @JsonSetter("promptTokens")
        public CompletionTokensStage promptTokens(double promptTokens) {
            this.promptTokens = promptTokens;
            return this;
        }

        /**
         * <p>This is the number of completion tokens generated in the call. These should be total completion tokens used in the call for single assistant calls, while squad calls will have multiple model costs one for each assistant that was used.</p>
         * <p>This is the number of completion tokens generated in the call. These should be total completion tokens used in the call for single assistant calls, while squad calls will have multiple model costs one for each assistant that was used.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        @JsonSetter("completionTokens")
        public CostStage completionTokens(double completionTokens) {
            this.completionTokens = completionTokens;
            return this;
        }

        /**
         * <p>This is the cost of the component in USD.</p>
         * <p>This is the cost of the component in USD.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        @JsonSetter("cost")
        public _FinalStage cost(double cost) {
            this.cost = cost;
            return this;
        }

        /**
         * <p>This is the model that was used during the call.</p>
         * <p>This matches one of the following:</p>
         * <ul>
         * <li><code>call.assistant.model</code>,</li>
         * <li><code>call.assistantId-&gt;model</code>,</li>
         * <li><code>call.squad[n].assistant.model</code>,</li>
         * <li><code>call.squad[n].assistantId-&gt;model</code>,</li>
         * <li><code>call.squadId-&gt;[n].assistant.model</code>,</li>
         * <li><code>call.squadId-&gt;[n].assistantId-&gt;model</code>.</li>
         * </ul>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        public _FinalStage model(String key, Object value) {
            this.model.put(key, value);
            return this;
        }

        /**
         * <p>This is the model that was used during the call.</p>
         * <p>This matches one of the following:</p>
         * <ul>
         * <li><code>call.assistant.model</code>,</li>
         * <li><code>call.assistantId-&gt;model</code>,</li>
         * <li><code>call.squad[n].assistant.model</code>,</li>
         * <li><code>call.squad[n].assistantId-&gt;model</code>,</li>
         * <li><code>call.squadId-&gt;[n].assistant.model</code>,</li>
         * <li><code>call.squadId-&gt;[n].assistantId-&gt;model</code>.</li>
         * </ul>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        public _FinalStage putAllModel(Map<String, Object> model) {
            this.model.putAll(model);
            return this;
        }

        /**
         * <p>This is the model that was used during the call.</p>
         * <p>This matches one of the following:</p>
         * <ul>
         * <li><code>call.assistant.model</code>,</li>
         * <li><code>call.assistantId-&gt;model</code>,</li>
         * <li><code>call.squad[n].assistant.model</code>,</li>
         * <li><code>call.squad[n].assistantId-&gt;model</code>,</li>
         * <li><code>call.squadId-&gt;[n].assistant.model</code>,</li>
         * <li><code>call.squadId-&gt;[n].assistantId-&gt;model</code>.</li>
         * </ul>
         */
        @java.lang.Override
        @JsonSetter(value = "model", nulls = Nulls.SKIP)
        public _FinalStage model(Map<String, Object> model) {
            this.model.clear();
            this.model.putAll(model);
            return this;
        }

        @java.lang.Override
        public ModelCost build() {
            return new ModelCost(model, promptTokens, completionTokens, cost, additionalProperties);
        }
    }
}
