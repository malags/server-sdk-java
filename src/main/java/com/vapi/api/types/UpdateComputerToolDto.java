/**
 * This file was auto-generated by Fern from our API Definition.
 */
package com.vapi.api.types;

import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.annotation.Nulls;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.vapi.api.core.ObjectMappers;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;

@JsonInclude(JsonInclude.Include.NON_ABSENT)
@JsonDeserialize(builder = UpdateComputerToolDto.Builder.class)
public final class UpdateComputerToolDto {
    private final Optional<List<UpdateComputerToolDtoMessagesItem>> messages;

    private final Optional<String> subType;

    private final Optional<Server> server;

    private final Optional<OpenAiFunction> function;

    private final Optional<String> name;

    private final Optional<Double> displayWidthPx;

    private final Optional<Double> displayHeightPx;

    private final Optional<Double> displayNumber;

    private final Map<String, Object> additionalProperties;

    private UpdateComputerToolDto(
            Optional<List<UpdateComputerToolDtoMessagesItem>> messages,
            Optional<String> subType,
            Optional<Server> server,
            Optional<OpenAiFunction> function,
            Optional<String> name,
            Optional<Double> displayWidthPx,
            Optional<Double> displayHeightPx,
            Optional<Double> displayNumber,
            Map<String, Object> additionalProperties) {
        this.messages = messages;
        this.subType = subType;
        this.server = server;
        this.function = function;
        this.name = name;
        this.displayWidthPx = displayWidthPx;
        this.displayHeightPx = displayHeightPx;
        this.displayNumber = displayNumber;
        this.additionalProperties = additionalProperties;
    }

    /**
     * @return These are the messages that will be spoken to the user as the tool is running.
     * <p>For some tools, this is auto-filled based on special fields like <code>tool.destinations</code>. For others like the function tool, these can be custom configured.</p>
     */
    @JsonProperty("messages")
    public Optional<List<UpdateComputerToolDtoMessagesItem>> getMessages() {
        return messages;
    }

    /**
     * @return The sub type of tool.
     */
    @JsonProperty("subType")
    public Optional<String> getSubType() {
        return subType;
    }

    /**
     * @return This is the server where a <code>tool-calls</code> webhook will be sent.
     * <p>Notes:</p>
     * <ul>
     * <li>Webhook is sent to this server when a tool call is made.</li>
     * <li>Webhook contains the call, assistant, and phone number objects.</li>
     * <li>Webhook contains the variables set on the assistant.</li>
     * <li>Webhook is sent to the first available URL in this order: {{tool.server.url}}, {{assistant.server.url}}, {{phoneNumber.server.url}}, {{org.server.url}}.</li>
     * <li>Webhook expects a response with tool call result.</li>
     * </ul>
     */
    @JsonProperty("server")
    public Optional<Server> getServer() {
        return server;
    }

    /**
     * @return This is the function definition of the tool.
     * <p>For <code>endCall</code>, <code>transferCall</code>, and <code>dtmf</code> tools, this is auto-filled based on tool-specific fields like <code>tool.destinations</code>. But, even in those cases, you can provide a custom function definition for advanced use cases.</p>
     * <p>An example of an advanced use case is if you want to customize the message that's spoken for <code>endCall</code> tool. You can specify a function where it returns an argument &quot;reason&quot;. Then, in <code>messages</code> array, you can have many &quot;request-complete&quot; messages. One of these messages will be triggered if the <code>messages[].conditions</code> matches the &quot;reason&quot; argument.</p>
     */
    @JsonProperty("function")
    public Optional<OpenAiFunction> getFunction() {
        return function;
    }

    /**
     * @return The name of the tool, fixed to 'computer'
     */
    @JsonProperty("name")
    public Optional<String> getName() {
        return name;
    }

    /**
     * @return The display width in pixels
     */
    @JsonProperty("displayWidthPx")
    public Optional<Double> getDisplayWidthPx() {
        return displayWidthPx;
    }

    /**
     * @return The display height in pixels
     */
    @JsonProperty("displayHeightPx")
    public Optional<Double> getDisplayHeightPx() {
        return displayHeightPx;
    }

    /**
     * @return Optional display number
     */
    @JsonProperty("displayNumber")
    public Optional<Double> getDisplayNumber() {
        return displayNumber;
    }

    @java.lang.Override
    public boolean equals(Object other) {
        if (this == other) return true;
        return other instanceof UpdateComputerToolDto && equalTo((UpdateComputerToolDto) other);
    }

    @JsonAnyGetter
    public Map<String, Object> getAdditionalProperties() {
        return this.additionalProperties;
    }

    private boolean equalTo(UpdateComputerToolDto other) {
        return messages.equals(other.messages)
                && subType.equals(other.subType)
                && server.equals(other.server)
                && function.equals(other.function)
                && name.equals(other.name)
                && displayWidthPx.equals(other.displayWidthPx)
                && displayHeightPx.equals(other.displayHeightPx)
                && displayNumber.equals(other.displayNumber);
    }

    @java.lang.Override
    public int hashCode() {
        return Objects.hash(
                this.messages,
                this.subType,
                this.server,
                this.function,
                this.name,
                this.displayWidthPx,
                this.displayHeightPx,
                this.displayNumber);
    }

    @java.lang.Override
    public String toString() {
        return ObjectMappers.stringify(this);
    }

    public static Builder builder() {
        return new Builder();
    }

    @JsonIgnoreProperties(ignoreUnknown = true)
    public static final class Builder {
        private Optional<List<UpdateComputerToolDtoMessagesItem>> messages = Optional.empty();

        private Optional<String> subType = Optional.empty();

        private Optional<Server> server = Optional.empty();

        private Optional<OpenAiFunction> function = Optional.empty();

        private Optional<String> name = Optional.empty();

        private Optional<Double> displayWidthPx = Optional.empty();

        private Optional<Double> displayHeightPx = Optional.empty();

        private Optional<Double> displayNumber = Optional.empty();

        @JsonAnySetter
        private Map<String, Object> additionalProperties = new HashMap<>();

        private Builder() {}

        public Builder from(UpdateComputerToolDto other) {
            messages(other.getMessages());
            subType(other.getSubType());
            server(other.getServer());
            function(other.getFunction());
            name(other.getName());
            displayWidthPx(other.getDisplayWidthPx());
            displayHeightPx(other.getDisplayHeightPx());
            displayNumber(other.getDisplayNumber());
            return this;
        }

        /**
         * <p>These are the messages that will be spoken to the user as the tool is running.</p>
         * <p>For some tools, this is auto-filled based on special fields like <code>tool.destinations</code>. For others like the function tool, these can be custom configured.</p>
         */
        @JsonSetter(value = "messages", nulls = Nulls.SKIP)
        public Builder messages(Optional<List<UpdateComputerToolDtoMessagesItem>> messages) {
            this.messages = messages;
            return this;
        }

        public Builder messages(List<UpdateComputerToolDtoMessagesItem> messages) {
            this.messages = Optional.ofNullable(messages);
            return this;
        }

        /**
         * <p>The sub type of tool.</p>
         */
        @JsonSetter(value = "subType", nulls = Nulls.SKIP)
        public Builder subType(Optional<String> subType) {
            this.subType = subType;
            return this;
        }

        public Builder subType(String subType) {
            this.subType = Optional.ofNullable(subType);
            return this;
        }

        /**
         * <p>This is the server where a <code>tool-calls</code> webhook will be sent.</p>
         * <p>Notes:</p>
         * <ul>
         * <li>Webhook is sent to this server when a tool call is made.</li>
         * <li>Webhook contains the call, assistant, and phone number objects.</li>
         * <li>Webhook contains the variables set on the assistant.</li>
         * <li>Webhook is sent to the first available URL in this order: {{tool.server.url}}, {{assistant.server.url}}, {{phoneNumber.server.url}}, {{org.server.url}}.</li>
         * <li>Webhook expects a response with tool call result.</li>
         * </ul>
         */
        @JsonSetter(value = "server", nulls = Nulls.SKIP)
        public Builder server(Optional<Server> server) {
            this.server = server;
            return this;
        }

        public Builder server(Server server) {
            this.server = Optional.ofNullable(server);
            return this;
        }

        /**
         * <p>This is the function definition of the tool.</p>
         * <p>For <code>endCall</code>, <code>transferCall</code>, and <code>dtmf</code> tools, this is auto-filled based on tool-specific fields like <code>tool.destinations</code>. But, even in those cases, you can provide a custom function definition for advanced use cases.</p>
         * <p>An example of an advanced use case is if you want to customize the message that's spoken for <code>endCall</code> tool. You can specify a function where it returns an argument &quot;reason&quot;. Then, in <code>messages</code> array, you can have many &quot;request-complete&quot; messages. One of these messages will be triggered if the <code>messages[].conditions</code> matches the &quot;reason&quot; argument.</p>
         */
        @JsonSetter(value = "function", nulls = Nulls.SKIP)
        public Builder function(Optional<OpenAiFunction> function) {
            this.function = function;
            return this;
        }

        public Builder function(OpenAiFunction function) {
            this.function = Optional.ofNullable(function);
            return this;
        }

        /**
         * <p>The name of the tool, fixed to 'computer'</p>
         */
        @JsonSetter(value = "name", nulls = Nulls.SKIP)
        public Builder name(Optional<String> name) {
            this.name = name;
            return this;
        }

        public Builder name(String name) {
            this.name = Optional.ofNullable(name);
            return this;
        }

        /**
         * <p>The display width in pixels</p>
         */
        @JsonSetter(value = "displayWidthPx", nulls = Nulls.SKIP)
        public Builder displayWidthPx(Optional<Double> displayWidthPx) {
            this.displayWidthPx = displayWidthPx;
            return this;
        }

        public Builder displayWidthPx(Double displayWidthPx) {
            this.displayWidthPx = Optional.ofNullable(displayWidthPx);
            return this;
        }

        /**
         * <p>The display height in pixels</p>
         */
        @JsonSetter(value = "displayHeightPx", nulls = Nulls.SKIP)
        public Builder displayHeightPx(Optional<Double> displayHeightPx) {
            this.displayHeightPx = displayHeightPx;
            return this;
        }

        public Builder displayHeightPx(Double displayHeightPx) {
            this.displayHeightPx = Optional.ofNullable(displayHeightPx);
            return this;
        }

        /**
         * <p>Optional display number</p>
         */
        @JsonSetter(value = "displayNumber", nulls = Nulls.SKIP)
        public Builder displayNumber(Optional<Double> displayNumber) {
            this.displayNumber = displayNumber;
            return this;
        }

        public Builder displayNumber(Double displayNumber) {
            this.displayNumber = Optional.ofNullable(displayNumber);
            return this;
        }

        public UpdateComputerToolDto build() {
            return new UpdateComputerToolDto(
                    messages,
                    subType,
                    server,
                    function,
                    name,
                    displayWidthPx,
                    displayHeightPx,
                    displayNumber,
                    additionalProperties);
        }
    }
}
