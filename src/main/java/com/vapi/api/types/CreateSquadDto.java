/**
 * This file was auto-generated by Fern from our API Definition.
 */
package com.vapi.api.types;

import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.annotation.Nulls;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.vapi.api.core.ObjectMappers;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;

@JsonInclude(JsonInclude.Include.NON_ABSENT)
@JsonDeserialize(builder = CreateSquadDto.Builder.class)
public final class CreateSquadDto {
    private final Optional<String> name;

    private final List<SquadMemberDto> members;

    private final Optional<AssistantOverrides> membersOverrides;

    private final Map<String, Object> additionalProperties;

    private CreateSquadDto(
            Optional<String> name,
            List<SquadMemberDto> members,
            Optional<AssistantOverrides> membersOverrides,
            Map<String, Object> additionalProperties) {
        this.name = name;
        this.members = members;
        this.membersOverrides = membersOverrides;
        this.additionalProperties = additionalProperties;
    }

    /**
     * @return This is the name of the squad.
     */
    @JsonProperty("name")
    public Optional<String> getName() {
        return name;
    }

    /**
     * @return This is the list of assistants that make up the squad.
     * <p>The call will start with the first assistant in the list.</p>
     */
    @JsonProperty("members")
    public List<SquadMemberDto> getMembers() {
        return members;
    }

    /**
     * @return This can be used to override all the assistants' settings and provide values for their template variables.
     * <p>Both <code>membersOverrides</code> and <code>members[n].assistantOverrides</code> can be used together. First, <code>members[n].assistantOverrides</code> is applied. Then, <code>membersOverrides</code> is applied as a global override.</p>
     */
    @JsonProperty("membersOverrides")
    public Optional<AssistantOverrides> getMembersOverrides() {
        return membersOverrides;
    }

    @java.lang.Override
    public boolean equals(Object other) {
        if (this == other) return true;
        return other instanceof CreateSquadDto && equalTo((CreateSquadDto) other);
    }

    @JsonAnyGetter
    public Map<String, Object> getAdditionalProperties() {
        return this.additionalProperties;
    }

    private boolean equalTo(CreateSquadDto other) {
        return name.equals(other.name)
                && members.equals(other.members)
                && membersOverrides.equals(other.membersOverrides);
    }

    @java.lang.Override
    public int hashCode() {
        return Objects.hash(this.name, this.members, this.membersOverrides);
    }

    @java.lang.Override
    public String toString() {
        return ObjectMappers.stringify(this);
    }

    public static Builder builder() {
        return new Builder();
    }

    @JsonIgnoreProperties(ignoreUnknown = true)
    public static final class Builder {
        private Optional<String> name = Optional.empty();

        private List<SquadMemberDto> members = new ArrayList<>();

        private Optional<AssistantOverrides> membersOverrides = Optional.empty();

        @JsonAnySetter
        private Map<String, Object> additionalProperties = new HashMap<>();

        private Builder() {}

        public Builder from(CreateSquadDto other) {
            name(other.getName());
            members(other.getMembers());
            membersOverrides(other.getMembersOverrides());
            return this;
        }

        /**
         * <p>This is the name of the squad.</p>
         */
        @JsonSetter(value = "name", nulls = Nulls.SKIP)
        public Builder name(Optional<String> name) {
            this.name = name;
            return this;
        }

        public Builder name(String name) {
            this.name = Optional.ofNullable(name);
            return this;
        }

        /**
         * <p>This is the list of assistants that make up the squad.</p>
         * <p>The call will start with the first assistant in the list.</p>
         */
        @JsonSetter(value = "members", nulls = Nulls.SKIP)
        public Builder members(List<SquadMemberDto> members) {
            this.members.clear();
            this.members.addAll(members);
            return this;
        }

        public Builder addMembers(SquadMemberDto members) {
            this.members.add(members);
            return this;
        }

        public Builder addAllMembers(List<SquadMemberDto> members) {
            this.members.addAll(members);
            return this;
        }

        /**
         * <p>This can be used to override all the assistants' settings and provide values for their template variables.</p>
         * <p>Both <code>membersOverrides</code> and <code>members[n].assistantOverrides</code> can be used together. First, <code>members[n].assistantOverrides</code> is applied. Then, <code>membersOverrides</code> is applied as a global override.</p>
         */
        @JsonSetter(value = "membersOverrides", nulls = Nulls.SKIP)
        public Builder membersOverrides(Optional<AssistantOverrides> membersOverrides) {
            this.membersOverrides = membersOverrides;
            return this;
        }

        public Builder membersOverrides(AssistantOverrides membersOverrides) {
            this.membersOverrides = Optional.ofNullable(membersOverrides);
            return this;
        }

        public CreateSquadDto build() {
            return new CreateSquadDto(name, members, membersOverrides, additionalProperties);
        }
    }
}
